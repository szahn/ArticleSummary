[{"url": "http://rauchg.com/2014/7-principles-of-rich-web-applications", "summary": ["Proof-of-concept SPA with inlined CSS and JS that doesn\u2019t incur in extra roundtrips\n\nA flexible enough system that can share rendering code between browser and server and provides tools for progressively loading scripts and styles will probably eliminate the colloquial distinction between websites and webapps.", "The medium by which pages are transmitted, the internet, has a theoretical speed limit.", "In some cases, parts of the page that are not essential to what the user is likely after are better left out of the initial response and fetched later by the client.", "When any of them are clicked, the browser will make a network request that\u2019ll take unpredictably long, then get and process its response and finally transition to the new state.", "The general consensus is that it\u2019s an acceptable tradeoff because once the bundle is loaded, you can then handle most of the user interaction (like transitions to other pages) without requesting additional pages or scripts.", "In this example, considering a great internet connection between London and New York, it takes 225ms before TCP is able to reach the maximum packet size.", "The cited 85ms round-trip time between Boston and Stanford will certainly improve over time, and your own experiments right now might already show it.", "If your data updates automatically, so should your code.", "The client side code doesn\u2019t \u201cknow\u201d about the future representation of the page, until an entire roundtrip to the server occurs.", "If you\u2019re using SSL, which happens to be important for safe script delivery, an additional two roundtrips are used (only one if the client is resuming a session).", "This is where an architecture like the one proposed by React comes particularly handy.", "Even a spreadsheet application, which traditionally relies a lot more on client side functionality, first needs to show the user the data he\u2019s interested in modifying.", "The inability to send data without necessarily triggering a new page load was not optimal from a performance standpoint.", "If your UI is self-updating, there\u2019s little reason for users to trigger a page refresh.", "It\u2019s also important to make sure the user doesn\u2019t inadvertently interrupt the data flow.", "The beforeunload browser warning\n\nThe other (and less obvious) one is capturing page transitions before they happen, like clicking links that trigger a new page load.", "Analysis of the HTML sent by the server for every page of a SPA in the wild\n\nAt this point many developers consciously accept this tradeoff because they make sure the extra network hops happen only once for their users by sending the proper cache headers in the script and stylesheet responses.", "Maybe less intuitively, one could also make a distinction between \u201cstructural CSS\u201d and the \u201cskin/theme CSS\u201d.", "Let\u2019s consider the basic HTML web again for a second.", "Since this rule applies also for the initial page download, it makes the initial content that comes rendered with the page all that much more important.", "You can then apply principle 3 and then inform the user of new data changes that happened to that page.", "After this, some web applications opt to refresh the page on behalf of the user when deemed appropriate.", "This pretty much guarantees that most script bundles won\u2019t be fetched in one roundtrip, making the situation described above even worse.", "This means that there would be no need to perform a full page refresh.", "In the case of a form, instead of waiting for some HTML as a response after its submission, we can act right after the user presses enter.", "If state was kept in the DOM, or event listeners where set up manually by your application, updating code would become a much more complicated task.", "Session and login state synchronization is an example of applying this principle uniformly.", "In the case of most SPAs, a blank page and a <script> tag is returned instead, and another roundtrip will be made to get the scripts contents.", "Making your application react to code changes is crucially important.", "This means that minimizing the number of roundtrips you make to display information on page is essential to great user experience and responsiveness.", "React to data changes\n\ntl;DR: When data changes on the server, let the clients know without asking.", "Are Single Page Applications (SPAs) the future?", "Should techniques like PJAX or TurboLinks be used?", "Keep in mind that in a traditional website, a page refresh accomplishes two things: reload the data and reload the code.", "For the time being, rendering part or all of the page on the server is the most common solution to avoiding extra roundtrips.", "The basic idea is that the first state of a page \u201cknows\u201d about the layout of the next state, so it can transition to it before there\u2019s any data to populate the page with.", "Each page reacts to the session and login state\n\nOnce you set up the expectation that the information on the screen updates automatically, it\u2019s important to consider a new need: state reconciliation.", "With SPDY or HTTP/2 server push, it should be theoretically possible to deliver client code that\u2019s cacheable in a single hop.", "If your application is not open, you can still attempt to sync user data in the background.", "Progressive loading of code, style and markup as the user navigates through them will ensure great performance without sacrificing interactivity.", "Push code updates\n\ntl;DR: Pushing data without pushing code is insufficient.", "Consider the additional roundtrips to get scripts, styles, and subsequent API requests.", "Setting up a mechanism to push data without one to push code is not enough, especially in a world where a single tab (session) might stay open for a very long time.", "Ever since the early days, iPhone OS would request app authors to provide a default.png image that would be rendered right away, while the actual app was loading.", "First of all, analyzing the packet dump of the TCP connection to www.google.com reveals they make sure to send their entire homepage all at once after the request comes in.", "This is akin to considering the back button an application-level button and applying principle 2: act immediately on user input.", "As the name implies, there\u2019s only one page the server consistently returns, and all the rest is figured out by your client side code.", "A better approach is to perform hot code reloading.", "This is a helpful illustration of the amount of data the server can send in each round-trip over time: How many KB a server can send for each phase of the connection by segments\n\nWebsites that deliver content (even if it\u2019s only the basic layout without the data) within this window will seem extremely responsive.", "The first principle builds heavily on the idea of minimizing latency as the user interacts with your website.", "Should JavaScript be used to replace browser functions like history, navigation and page rendering?", "It\u2019s certainly hard to make hot code reloading work for many existing codebases.", "In particular, I put a strong focus on the idea of minimizing the time it takes the user to get the data they are interested in.", "Then you modify the behavior of that component, for example, so that it produces different DOM markup for existing and new state.", "The toggling of comments should be preserved when navigating history\n\nIf the page was re-rendered by following a link within the application, the expectation of the user might be that all comments appear uncollapsed.", "Server rendered pages are not optional\n\ntl;DR: Server rendering is not about SEO, it\u2019s about performance.", "They have URLs, navigation, they show data to the user.", "Predict behavior\n\ntl;DR: Negative latency.", "So that then another roundtrip can be made to get the data needed for rendering.", "JavaScript allows to act immediately and optimistically on user input.", "Don\u2019t break history, enhance it\n\ntl;DR: Without the browser managing URLs and history for us, new challenges emerge.", "Applications that render HTML on the server and then modify it on the client are at particular risk of this subtle bug:\n\nPressing back incorrectly loads the initial HTML from the pageload\n\nAnother way of breaking navigation is by ignoring scrolling memory.", "In addition to the ability to send data the user inputs into a form, we now have some new opportunities to enhance UX.", "Some applications, for example, opt to render the \u201cshell\u201d of the page to respond immediately.", "Make sure to handle errors, retry on behalf of the user, sync data on the background and maintain offline caches.", "One that\u2019s specially relevant to our previous principle is the ability to display the connection state.", "When receiving ordered atomic data updates, it\u2019s easy to forget that your application should be able to update appropriately even after long periods of disconnection.", "A famous example of this is Gmail (or Google Inbox), where archiving an email will happen immediately on the UI while the server request is sent and processed asynchronously.", "PJAX or TurboLinks miss out on opportunities to improve the perception of speed.", "Act immediately on user input\n\ntl;DR: JavaScript allows us to mask network latency altogether.", "This has two serious implications for SPAs:\n\nLarge scripts take a lot longer to download than it seems.", "However, even in the presence of a cache, there\u2019s a performance penalty when considering script parsing and evaluation time."], "title": "7 Principles of Rich Web Applications"}, {"url": "http://exploringjs.com/es6/ch_first-steps.html", "summary": ["Prefer const in new code for variables whose values never change.", "' + elem ); }\n\nMore information: section \u201cThe for-of loop\u201d.", "4.8 Handling named parameters\n\nA common way of naming parameters in JavaScript is via object literals (the so-called options object pattern):\n\nselectEntries ({ start : 0 , end : - 1 });\n\nTwo advantages of this approach are: Code becomes more self-descriptive and it is easier to omit arbitrary parameters.", "In ES5 object literals, methods are created like other properties.", "In ES5, you can implement selectEntries() as follows:\n\nfunction selectEntries ( options ) { var start = options .", "4.5.2 Multiple return values via objects\n\nThe method Object.getOwnPropertyDescriptor() returns a property descriptor, an object that holds multiple values in its properties.", "foo (); }, // trailing comma is legal in ES5 }\n\nES6 has method definitions, special syntax for creating methods:\n\nlet obj = { foo () { \u00b7\u00b7\u00b7 }, bar () { this .", "log ( diag ( 4 , 3 )); // 5\n\nThe syntax for importing modules as objects looks as follows (line A):\n\n//------ main2.js ------ import * as lib from 'lib' ; // (A) console .", "random (); return x ; } return x ; } func ( false ); // undefined\n\nIn ES6, you can additionally declare variables via let and const .", "4.5 Handling multiple return values\n\nSome functions or methods return multiple values via arrays or objects.", "handleClick = function () { \u00b7\u00b7\u00b7 };\n\nIn ES6, you can use arrow functions, which don\u2019t shadow this (line A):\n\nfunction UiComponent () { var button = document .", "diag ( 4 , 3 )); // 5\n\n4.18.2 Single exports\n\nNode.js extends CommonJS and lets you export single values from modules, via module.exports :\n\n//------ myFunc.js ------ module .", "set ( word , count + 1 ); }\n\nAnother benefit of Maps is that you can use arbitrary values as keys, not just strings.", "In ES5, you always need to create intermediate variables if you want to access those values.", "log ( arg ); } }\n\nRest parameters are even nicer if you are only interested in trailing parameters:\n\nfunction format ( pattern , ... args ) { \u00b7\u00b7\u00b7 }\n\nHandling this case in ES5 is clumsy:\n\nfunction format () { var pattern = arguments [ 0 ]; var args = [].", "4.1 From var to let / const\n\nIn ES5, you declare variables via var .", "4.13.1 Base classes\n\nIn ES5, you implement constructor functions directly:\n\nfunction Person ( name ) { this .", "4.6 From for to forEach() to for-of\n\nPrior to ES5, you iterated over Arrays as follows:\n\nvar arr = [ 'a' , 'b' , 'c' ]; for ( var i = 0 ; i < arr .", "startsWith ( 'x' )) {} // ES6\n\nFrom indexOf to endsWith :\n\nfunction endsWith ( str , suffix ) { // ES5 var index = str .", "log ( elem ); }\n\nIf you want both index and value of each array element, for-of has got you covered, too, via the new Array method entries() and destructuring:\n\nfor ( let [ index , elem ] of arr .", "diag ( 4 , 3 )); // 5\n\nIn ES6, multiple exports are called named exports and handled like this:\n\n//------ lib.js ------ export const sqrt = Math .", "call ( arguments ); // ES5 let arr2 = Array .", "call ( arguments , 1 ); \u00b7\u00b7\u00b7 }\n\nRest parameters make code easier to read: You can tell that a function has a variable number of parameters just by looking at its parameter definitions.", "title + ')' ; };\n\nES6 has built-in support for subclassing, via the extends clause:\n\nclass Employee extends Person { constructor ( name , title ) { super ( name ); this .", "apply ( null , new Array ( 2 )); // [undefined, undefined] let arr2 = new Array ( 2 ).", "4.17.1 From Array.prototype.indexOf to Array.prototype.findIndex\n\nThe latter can be used to find NaN , which the former can\u2019t detect:\n\nconst arr = [ 'a' , NaN ]; console .", "repeat ( 3 ) // ES6\n\nMore information: Chapter \u201cNew string features\u201d\n\n4.17 New Array methods\n\nThere are also several new Array methods in ES6.", "4.18.1 Multiple exports\n\nIn CommonJS, you export multiple entities as follows:\n\n//------ lib.js ------ var sqrt = Math .", "ES5 \u2013 concat() :\n\nvar arr1 = [ 'a' , 'b' ]; var arr2 = [ 'c' ]; var arr3 = [ 'd' , 'e' ]; console .", "The following ES5 code contains the function countWords that uses the object dict as a map:\n\nvar dict = Object .", "exports = { sqrt : sqrt , square : square , diag : diag , }; //------ main1.js ------ var square = require ( 'lib' ).", "getOwnPropertyDescriptor ( obj , 'foo' ); var writable = propDesc .", "4.5.1 Multiple return values via arrays\n\nexec() returns captured groups via an Array-like object.", "log ( arguments [ i ]); } }\n\nIn ES6, you can declare a rest parameter ( args in the example below) via the ... operator:\n\nfunction logAllArguments (... args ) { for ( let arg of args ) { console .", "4.12 From function expressions in object literals to method definitions\n\nIn JavaScript, methods are properties whose values are functions.", "More information:\n\n4.16 New string methods\n\nThe ECMAScript 6 standard library provides several new methods for strings.", "push (... arr2 ); // arr1 is now ['a', 'b', 'c', 'd']\n\nMore information: section \u201cThe spread operator ( ... )\u201d.", "In ES6, the for-of loop combines both advantages:\n\nlet arr = [ 'a' , 'b' , 'c' ]; for ( let elem of arr ) { console .", "includes ( 'x' )) {} // ES6\n\nFrom join to repeat (the former way of repeating a string is more of a hack):\n\nnew Array ( 3 + 1 ).", "square ; var diag = require ( 'lib' ).", "const works like let , but creates variables whose values can\u2019t be changed.", "map ( function ( x ) { return x * x });\n\nIn ES6, arrow functions are much more concise:\n\nlet arr = [ 1 , 2 , 3 ]; let squares = arr .", "log ( diag ( 4 , 3 )); // 5\n\nAlternatively, you can import the whole module as an object and access square and diag via it:\n\n//------ main2.js ------ var lib = require ( 'lib' ); console .", "indexOf ( suffix ); return index >= 0 && index === str .", "In ES5, even if you are only interested in the properties of an object, you still need an intermediate variable ( propDesc in the example below):\n\nvar obj = { foo : 123 }; var propDesc = Object .", "Use let in new code for variables whose values change.", "log ( '(' + x + ', ' + y + ')' ); }\n\nIn ES6 you can use string interpolation via template literals:\n\nfunction printCoord ( x , y ) { console .", "writable ; var configurable = propDesc .", "in new code for variables whose values never change.", "start || 0 ; var end = options .", "log ([... arr1 , ... arr2 , ... arr3 ]); // [ 'a', 'b', 'c', 'd', 'e' ]\n\nMore information: section \u201cThe spread operator ( ... )\u201d.", "4.3.1 String interpolation\n\nIn ES5, you put values into strings by concatenating those values and string fragments:\n\nfunction printCoord ( x , y ) { console .", "4.9 From arguments to rest parameters\n\nIn ES5, if you want a function (or method) to accept an arbitrary number of arguments, you must use the special variable arguments :\n\nfunction logAllArguments () { for ( var i = 0 ; i < arguments .", "describe = function () { return 'Person called ' + this .", "map ( function ( x ) { return 'x' }); // ['x', 'x'] let arr3 = new Array ( 2 ).", "log ( tmp ); // ReferenceError\n\nIn ECMAScript 6, you can simply use a block and a let declaration (or a const declaration):\n\n{ // open block let tmp = \u00b7\u00b7\u00b7 ; \u00b7\u00b7\u00b7 } // close block console .", "end || - 1 ; var step = options .", "// ES5: same as Array(undefined, undefined) var arr1 = Array .", "constructor = MyError ;\n\nIn ES6, all built-in constructors can be subclassed, which is why the following code achieves what the ES5 code can only simulate:\n\nclass MyError extends Error { }\n\nMore information: section \u201cSubclassing built-in constructors\u201d.", "name ; };\n\nIn ES6, classes provide slightly more convenient syntax for constructor functions (note especially the compact syntax for method definitions \u2013 no keyword function needed):\n\nclass Person { constructor ( name ) { this .", "In ES6, you have Array.from() :\n\nvar arr1 = Array .", "In ES5, you need an intermediate variable ( matchObj in the example below), even if you are only interested in the groups:\n\nvar matchObj = /^(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)$/ .", "4.3 From concatenating strings to template literals\n\nWith ES6, JavaScript finally gets literals for string interpolation and multi-line strings."], "title": "4. First steps with ECMAScript 6"}, {"url": "https://davidwalsh.name/essential-javascript-functions", "summary": ["if(fn()) { callback(); } // If the condition isn't met but the timeout hasn't elapsed, go again else if (Number(new Date()) < endTime) { setTimeout(p, interval); } // Didn't match and too much time, reject!", "As I mentioned with the debounce function, sometimes you don't get to plug into an event to signify a desired state -- if the event doesn't exist, you need to check for your desired state at intervals:\n\nfunction poll(fn, callback, errback, timeout, interval) { var endTime = Number(new Date()) + (timeout || 2000); interval = interval || 100; (function p() { // If the condition is met, we're done!", "') + '$' ); function isNative(value) { var type = typeof value; return type == 'function' // Use `Function#toString` to bypass the value's own `toString` method // and avoid being faked out.", "*+?^${}()|[\\]\\/\\\\]/g, '\\\\$&') // Replace mentions of `toString` with `.", "This handy code can give you the answer:\n\n;(function() { // Used to resolve the internal `[[Class]]` of values var toString = Object.prototype.toString; // Used to resolve the decompiled source of functions var fnToString = Function.prototype.toString; // Used to detect host constructors (Safari > 4; really typed array specific) var reHostCtor = /^\\[object .+?Constructor\\]$/; // Compile a regexp using a common native method as a template.", "7 Essential JavaScript Functions\n\nI remember the early days of JavaScript where you needed a simple function for just about everything because the browser vendors implemented features differently, and not just edge features, basic features, like addEventListener and attachEvent .", "var reNative = RegExp('^' + // Coerce `Object#toString` to a string String(toString) // Escape any special regexp characters .replace(/[.", "We all know that we can grab a NodeList from a selector (via document.querySelectorAll ) and give each of them a style, but what's more efficient is setting that style to a selector (like you do in a stylesheet):\n\nvar sheet = (function() { // Create the <style> tag var style = document.createElement('style'); // Add a media (and/or media query) here if you'd like!", "reNative.test(fnToString.call(value)) // Fallback to a host object check because some environments will represent // things like typed arrays as DOM methods which may not conform to the // normal native pattern.", "Oftentimes we validate input before moving forward; ensuring a truthy value, ensuring forms data is valid, etc."], "title": "7 Essential JavaScript Functions"}, {"url": "https://medium.com/@nirbenita/the-10-design-heuristics-for-developers-1e70a9dc58a7", "summary": ["Focusing on making the underlying design more usable will help determine, amongst other things:\n\nHow easy it is to on board new developers.", "I would rather have you think of the following list as guidelines to designing systems rather than a set of strict rules saying \u201cThis is the best way to do X.\u201d\n\nDesign Heuristics.", "**Like designers, programmers enjoy applying their creativity to solve complex problems.", "Match between system and the real world\n\nWhen writing documentation or naming a component, always try to use familiar terms.", "While working with developers, I found out that these concepts already exist among programmers \u2014 they\u2019re just not as articulated as they are for designers.", "*I haven\u2019t gone into actual code in any of my examples as I feel people can be a bit too touchy about the right way to write any piece of software.", "Gist: I\u2019ll try to explain Jakob Nielsen\u2019s 10 design heuristics.", "When we get 3\u20135 usability experts to use our product and judge its compliance with basic usability principles a.k.a \u201cThe 10 Design Heuristics\u201d, that\u2019s heuristics simplified.", "User control and freedom\n\nA system should allow you the freedom to explore its contents, but do so in a responsible manner, such that lets you recover from mistakes should you make one.", "I use examples that you, as a developer, could relate to \u2014 so that the products you ship and the code behind them would be more usable."], "title": "10 design principles \u2014 for developers \u2014 Medium"}, {"url": "http://khanlou.com/2015/11/zero-dependencies/", "summary": ["I've heard that John Carmack begins every new game he works on by writing the simple functions he needs and building everything up from little pieces.", "When I started out writing Backchannel's SDK, I had just come off the heels of releasing Instant Cocoa, which is a library I created for reducing the intense amount of boilerplate we have to deal with as iOS developers.", "(In a future blog post, I'm hoping to go into GenericKeychain as a case study of how not to write classes.", "I'll almost definitely be bringing the new networking concepts to Instant Cocoa and removing its dependency on AFNetworking .", "Making a hard rule like \"no dependencies\" is a great way to test the limits of your code writing ability and forces you to get creative and make some awesome stuff.", ") I spent about a day understanding how Apple's code worked, and wrote my own wrapper around the Keychain API, with exactly the API I wanted and the features I needed, and thus BAKKeychain was born.", "It includes abstractions like data sources, which map index paths to objects, or resource gateways, which provide a clean interface for touching REST APIs through model objects.", "Backchannel lets both developers and their beta testers comment on and discuss feature requests, bug reports, and general feedback about the app.", "This week, I'd like to discuss the experience of writing a significant application with zero dependencies.", "Zero Dependencies\n\nBackchannel is streamlined way for app developers to gather feedback from beta testers, right within their apps.", "I had to rewrite a few of the Instant Cocoa features, like data sources.", "Data sources in Instant Cocoa are a lot more generic, allowing you to mix, match, and combine them in interesting ways.", "It wouldn't have been fair of me to expect other developers to import an enormous library of mine into their app just so that my development experience could be nicer.", "You can't offload networking, persistence, object mapping, or any other component to someone else's code."], "title": "Zero Dependencies"}, {"url": "http://www.c-sharpcorner.com/UploadFile/89bfaf/working-with-attribute-routing-in-web-api-2/", "summary": ["config.MapHttpAttributeRoutes();\n\nWe can use both the Routings in single projects.Add Route to the Action method of the Phases Controller as in the following code snippet:If we run the above code in Rest Client, we will get the response as desired.Similarly, we can perform attribute routing with Post, Put, Delete of HTTP verbs.Finding the exact Route follows the same rules of Convention Based Routing.", "The Route Names are useful to generate links.If you observe the Phases Controller, all the Routes are started with \"Project/{ProjectId}\".", "And Project model is,\n\n\n\n\n\n\n\nPhases Model is,\n\n\n\n\n\n\n\nStep 3 Create a Web API's empty controller called Phases Controller.", "Step 2: Create Models called Project and Phases.", "Step 4: In order to work with Attribute Routing, we need to enable this routing in WebAPIConfig.cs by adding the following code.", "Routes are located above the Action Methods.Now, we will discuss another interesting topics Route Names and Route Prefix in Attribute Routing.This is also an interesting topic in Attribute Routing.", "Requirements:\n\nVisual Studio 2012 with Web API 2 Project Template or Visual Studio 2013 and above.", "Attribute Routing With an Example:\n\n\n\nStep 1: Create an Web API Project using Visual Studio.", "Note: Attribute Routing introduced in ASP.NET Web API 2.", "You could observe this in Insert Action method.We have discussed about Attribute Routing in Web API 2 and why and where need to use this type of Routing."], "title": "Working With Attribute Routing In Web API 2"}, {"url": "http://wildbit.com/blog/2015/09/30/where-is-your-quiet-place", "summary": ["With the opening of the new office, I\u2019ve thought a lot about encouraging focus in a physical environment.", "They have amazing drinks, it\u2019s usually as quiet as a library, and I can just sit at a table to sketch, write, or plan with complete focus (the drinks help too).", "The second place is Rittenhouse Square, a park in downtown Philadelphia.", "If you are doing creative work or need complete focus to solve hard problems, you almost certainly have a place to call your own.", "Right after everyone has gone home for the day, stopped working, stopped sending emails, and the Internet seems just a little more calm than it was a few hours before.", "No matter how quiet your office, your home, or that cabin in the woods may be, you will still have a constant need to check your inbox, catch up on chat, or scan through the latest tweets.", "Around 9pm I would get a second wind, regroup, and usually work on interface design, content, or architecture decisions for our products.", "No matter how great your office or work environment is, you always need an escape and some alone time.", "And the last place is my favorite drinking establishment, Library Bar, at a nearby hotel.", "With two kids Natalie and I come home from work at 5:30pm and the day keeps rolling."], "title": "Where is your quiet place?"}, {"url": "http://www.dotnetjalps.com/2015/10/view-component-aspnet-mvc6.html", "summary": [], "title": "What's new in View Component : ASP.NET MVC 6"}, {"url": "http://bramstein.com/writing/web-font-anti-patterns-overusing.html?utm_source=html5weekly&utm_medium=email", "summary": ["If you\u2019re us\u00ading SVG you can eas\u00adily scale and switch be\u00adtween SVG files for dif\u00adfer\u00adent break\u00adpoints.", "If you use web fonts for let\u00adter\u00ading you\u2019ll need to ag\u00adgres\u00adsively sub\u00adset your fonts to make them small enough so that they load quickly.", "It\u2019ll give you ab\u00adsolute con\u00adtrol over kern\u00ading, track\u00ading, po\u00adsi\u00adtion, gra\u00addi\u00adents, mask\u00ading, and colour.", "Most \u201cweb safe\u201d fonts do not con\u00adtain Open\u00adType fea\u00adtures like swashes and dis\u00adcre\u00adtionary lig\u00ada\u00adtures that are of\u00adten used for let\u00adter\u00ading.", "It\u2019ll in\u00adcrease your page load times and if you\u2019re re\u00adly\u00ading on the browser\u2019s de\u00adfault be\u00adhav\u00adiour it\u2019ll also block your site from ren\u00adder\u00ading un\u00adtil the fonts have loaded.", "Us\u00ading web fonts for let\u00adter\u00ading be\u00adcomes es\u00adpe\u00adcially prob\u00adlem\u00adatic in re\u00adspon\u00adsive de\u00adsign.", "If you find your\u00adself wrap\u00adping each let\u00adter or word in a span el\u00ade\u00adment in or\u00adder to style them \u2014 stop.", "Ex\u00adam\u00adine your ty\u00adpo\u00adgraphic hi\u00ader\u00adar\u00adchy and con\u00adsider us\u00ading ex\u00adist\u00ading fonts be\u00adfore adding a new font.", "As an added bonus, the re\u00adsult\u00ading SVG file size will be smaller than load\u00ading sev\u00aderal fonts.", "Web Font Anti-Pattern: Overusing web fonts\n\nOc\u00adto\u00adber 13, 2015\n\nThis is my favourite web font anti-pat\u00adtern and one I of\u00adten get wrong my\u00adself; why are you us\u00ading web fonts for that?", "Most of the times when you\u2019re wrap\u00adping words and char\u00adac\u00adters in span el\u00ade\u00adments you are ac\u00adtu\u00adally at\u00adtempt\u00ading to do let\u00adter\u00ading in HTML and CSS .", "Not many of the web safe fonts are scripts, so at best your fonts will fall back to a com\u00adpletely un\u00adre\u00adlated script font.", "It\u2019s per\u00adfectly fine to use web fonts for head\u00adlines and body text.", "By do\u00ading that you\u2019ll also make it dif\u00adfi\u00adcult to trans\u00adlate your let\u00adter\u00ading in other lan\u00adguages, which of\u00adten uses dif\u00adfer\u00adent char\u00adac\u00adter set.", "The global av\u00ader\u00adage of font re\u00adquests per page has tripled in the last cou\u00adple years."], "title": "Web Font Anti-Pattern: Overusing web fonts"}, {"url": "https://medium.com/ben-and-dion/web-components-are-dead-3988b31c380a#.9pwd189mo", "summary": ["Now, React has had to work around the browser to give us the declarative development model that many of us enjoy.", "\u201cIt takes 10/20 years to become an overnight success\u201d\n\nOh how often we fall for that trap.", "Multiple implementations, much needed in a world where Firefox was fighting for share from IE.", "With Web Components we are still missing some crucial browser support, but it is on its way thanks to good browser engine folk.", "Once your eyes could see past syntax, you realized that it maybe was a feature and not a bug.", "Microsoft built an ActiveX component to solve a problem for the Outlook Web team.", "I remember giving talks about how to \u201cbuild killer web sites with dhtml!\u201d (or some other silly title) and the room was a lot more full once Jesse James Garrett pushed it out there in a way that made sense to folks.", "Are we tired of not having a foundation and having the \u201coh crap I really want that component but it is based on jQuery and I am on Prototype!\u201d of old?", "As we see real world usage such as AMP, it may show developers that it is ready for prime time.", "So, one thing React has done well, is that it has shown us that components can actually work well on the Web.", "This way you maybe don\u2019t run into the pain of the bugs that can occur when you have retained vs. immediate mode APIs.", "For the folks who were \u201cdoing Ajax before it was cool\u201d it was almost comical to see how it surged after years of lying dormant."], "title": "Web Components Are Dead? \u2014 Ben and Dion \u2014 Medium"}, {"url": "http://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html?utm_source=javascriptweekly&utm_medium=email", "summary": ["Clarification: for these examples, I\u2019m assuming that both doSomething() and doSomethingElse() return promises, and that those promises represent something done outside of the JavaScript event loop (e.g.", "Advanced mistake #3: promises vs promise factories\n\nLet's say you want to execute a series of promises one after the other, in a sequence.", "So they write something like this:\n\n// I want to remove() all docs db .", ":( });\n\nAs it turns out, when you use the then(resolveHandler, rejectHandler) format, the rejectHandler won't actually catch an error if it's thrown by the resolveHandler itself.", "And if you don't believe me, here's proof: a refactor of PouchDB's map/reduce module to replace callbacks with promises.", "Unfortunately this means that any thrown errors will be swallowed, and you won't even see them in your console.", "If I didn't say return , then the getUserAccountById() would actually be a side effect, and the next function would receive undefined instead of the userAccount .", "Rookie mistake #5: using side effects instead of returning\n\nWhat's wrong with this code?", "reject ( new Error ( 'some awful error' ));\n\nAdvanced mistake #2: catch() isn't exactly like then(null, ...)\n\nI said above that catch() is just sugar.", "Instead, our program's entire flow is based on side effects: one function incidentally calling another one.", "For instance:\n\ngetUserByName ( 'nolan' ).", "Throw a synchronous error\n\nSpeaking of throw , this is where promises can get even more awesome.", "Return a synchronous value (or undefined)\n\nReturning undefined is often a mistake, but returning a synchronous value is actually an awesome way to convert synchronous code into promisey code.", "So while I recognize that, like JavaScript: The Good Parts, this blog post can only have a limited impact, it's hopefully something you can point people to when you see them making these same mistakes.", "For this reason, I've made it a personal habit to never use the second argument to then() , and to always prefer catch() .", "The second function doesn't care whether the userAccount was fetched synchronously or asynchronously, and the first function is free to return either a synchronous or asynchronous value.", "Advanced mistake #4: okay, what if I want the result of two promises?", "Return another promise\n\nThis is a common pattern you see in the promise literature, as in the \"composing promises\" example above:\n\ngetUserByName ( 'nolan' ).", "Awaiting async/await\n\nThat's the point I made in \"Taming the asynchronous beast with ES7\", where I explored the ES7 async / await keywords, and how they integrate promises more deeply into the language.", "Rookie mistakes\n\nSome people try to explain promises as a cartoon, or in a very noun-oriented way: \"Oh, it's this thing you can pass around that represents an asynchronous value.", "While superior to callbacks, promises are still difficult to understand and error-prone, as evidenced by the fact that I felt compelled to write this blog post.", "That is, you want something like Promise.all() , but which doesn't execute the promises in parallel.", "then ( function () { throw new Error ( 'oh noes' ); }, function ( err ) { // I didn't catch your error!", "Instead of having to write pseudo-synchronous code (with a fake catch() method that's kinda like catch , but not really), ES7 will allow us to use the real try / catch / return keywords, just like we learned in CS 101.", "It's so useful, that I've gotten in the habit of beginning nearly all of my promise-returning API methods like this:\n\nfunction somePromiseAPI () { return Promise .", "The whole point of promises is to give us back the language fundamentals we lost when we went async: return , throw , and the stack.", "There are three things:\n\nreturn another promise return a synchronous value (or undefined ) throw a synchronous error\n\nThat's it.", "catch ( function ( err ) { // handle error }); somePromise ().", "Let's say we want to throw a synchronous error in case the user is logged out.", "With callbacks, that error would get swallowed, but with promises, we can simply handle it inside our catch() function.", "Rookie mistake #1: the promisey pyramid of doom\n\nLooking at how people use PouchDB, which has a largely promise-based API, I see a lot of poor promise patterns.", "then ( function ( response ) { alert ( \"Pulled doc with id \" + element .", "If you find that hard to believe, consider this puzzle I recently posted to Twitter:\n\nQ: What is the difference between these four promises?", "To avoid this nasty scenario, I've gotten into the habit of simply adding the following code to my promise chains:\n\nsomePromise ().", "Writing code without a stack is a lot like driving a car without a brake pedal: you don't realize how badly you need it, until you reach for it and it's not there.", "So let's go through each point one at a time.", "Again, the function doesn't care whether the error it gets is synchronous or asynchronous.", "Blissfully confident that their promises could never possibly throw an error, many developers forget to add a .catch() anywhere in their code.", "bind ( console )); // <-- this is badass\n\nEven if you never expect an error, it's always prudent to add a catch() .", "Often times, one promise will depend on another, but we'll want the output of both promises.", "I'm also going to offer what I consider to be the singular insight, the one weird trick, that makes promises a cinch to understand.", "catch ( function ( err ) { // Boo, I got an error!", "_id , resp .", "});\n\nOkay, this is a good point to talk about everything you ever need to know about promises.", "So what you really want is an array of promise factories:\n\nfunction executeSequentially ( promiseFactories ) { var result = Promise .", "Rookie mistake #3: forgetting to add .catch()\n\nThis is another common mistake.", "First off, most promise libraries give you a way to \"import\" promises from third-party libraries.", "The big problem, which has revealed itself to me over the course of the past year, as I've watched numerous programmers struggle with the PouchDB API and other promise-heavy APIs, is this:\n\nMany of us are using promises without really understanding them.", "For this reason, I make it a personal habit to always return or throw from inside a then() function.", "The exception is when I'm writing asynchronous Mocha tests, where I might write a test to ensure that an error is thrown:\n\nit ( 'should throw an error' , function () { return doSomethingThatThrows ().", "But to start with, let's challenge some common assumptions about promises.", "You might na\u00efvely write something like this:\n\nfunction executeSequentially ( promises ) { var result = Promise .", "For instance, to wrap a callback-based API like Node's fs.readFile() , you can simply do:\n\nnew Promise ( function ( resolve , reject ) { fs .", "These mistakes I'd classify as \"advanced,\" because I've only seen them made by programmers who are already fairly adept with promises.", "then ( function () { // at this point, doSomething() is done, and we are back to indentation 0 });\n\nAs your promise code starts to get more complex, you may find yourself extracting more and more functions into named functions.", "id ]; // returning a synchronous value!", "As I said before, the magic of promises is that they give us back our precious return and throw .", "then ( function ( userAccount ) { // dangit, I need the \"user\" object too!", "But we're going to need to discuss them, if we want to be able to solve the puzzle I posed at the beginning of this post.", "then ( /* ... */ ); }\n\nJust remember: any code that might throw synchronously is a good candidate for a nearly-impossible-to-debug swallowed error somewhere down the line.", "});\n\nOur catch() will receive a synchronous error if the user is logged out, and it will receive an asynchronous error if any of the promises are rejected.", "The problem is that the first function is actually returning undefined , meaning that the second function isn't waiting for db.remove() to be called on all the documents.", "Rookie mistake #2: WTF, how do I use forEach() with promises?", "Advanced mistake #1: not knowing about Promise.resolve()\n\nAs I showed above, promises are very useful for wrapping synchronous code as asynchronous code.", "});\n\nWanting to be good JavaScript developers and avoid the pyramid of doom, we might just store the user object in a higher-scoped variable:\n\nvar user ; getUserByName ( 'nolan' ).", "Because in the end, these promise anti-patterns will still keep cropping up, as long as our tools don't tell us when we're making a mistake.", "As explained in the brilliant talk \"Redemption from Callback Hell\", the real problem with callbacks it that they deprive us of keywords like return and throw .", "Because there are still way too many of us who just need to admit: \"I have a problem with promises!", "then ( null , function ( err ) { // handle error });\n\nHowever, that doesn't mean that the following two snippets are equivalent:\n\nsomePromise ().", "Advanced mistakes\n\nOkay, now that you've learned the single trick that makes promises dead-easy, let's talk about the edge cases.", "then ( function () { return someOtherPromise (); }, function ( err ) { // handle error });\n\nIf you're wondering why they're not equivalent, consider what happens if the first function throws an error:\n\nsomePromise ().", "then ( /* ... */ ); // <-- this is all the code you need\n\nAnother strategy is to use the revealing constructor pattern, which is useful for wrapping non-promise APIs.", "then ( /* ... */ );\n\nThis is also incredibly useful for catching any synchronous errors.", "then ( /* ... */ )\n\nDone!", "This actually circles back to the previous point I made about promises vs promise factories.", "then ( function ( userAccount ) { // I got a user account!", "So Angular users can wrap PouchDB promises this way:\n\n$q .", "For instance, Angular's $q module allows you to wrap non- $q promises using $q.when() ."], "title": "We have a problem with promises"}, {"url": "http://www.quirksmode.org/blog/archives/2015/01/the_problem_wit.html?utm_source=javascriptweekly&utm_medium=email", "summary": ["Unfortunately they aren\u2019t trained to recognise Angular\u2019s performance problems.", "Angular and front end\n\nDon\u2019t get me wrong: there are front-enders who are enthusiastic about Angular.", "In itself this is not a problem: people should just use whatever framework ties in with their coding style.", "I have the feeling their number is surprisingly low \u2014 see also the problems my clients had with finding good front-end Angular consultants.", "I wonder what Google was thinking when it pushed a framework that wasn\u2019t originally intended to assist developers, contained serious DOM performance problems, and wasn\u2019t optimised to support its own mobile platform.", "The Angular criticism that resonates most with me comes from the What\u2019s wrong with Angular.js article by Daniel Steigerwald:\n\nGoogle does not use Angular in production for their flag apps like Gmail or Gplus.", "I think that this radical rewrite is mostly aimed at front-enders, who will get much more performance and a coding style that is more in line with what we\u2019ve come to expect of JavaScript frameworks.", "The Software Improvement Group published a report that states (my emphasis):\n\nUsing AngularJS provides developers with a number of advantages.", "From my clients I also got the impression that their Java developers decided to use Angular.", "I don\u2019t think that a rapid-prototyping framework should be used for complex, enterprise-level production code.", "The proposed radical Angular 2.0 rewrite aims to make it more palatable to front-enders, but I doubt they\u2019re interested in yet another MVC framework.", "In an excellent article, Andrew Austin makes the case for Angular in enterprise IT:\n\nThere are many positives about the AngularJS team all working for Google.", "In a self-admittedly opinionated rundown of JS frameworks, Henrik Joreteg is more negative:\n\nPicking Angular means you\u2019re learning Angular the framework instead of how to solve problems in JavaScript.", "Despite its serious technical problems Angular 1.x is a success especially among corporate developers with a Java background.", "Although it is not necessarily lethal for overall performance, parsing the entire DOM at load time is an issue that should be addressed.", "Angular is aimed at corporate IT departments rather than front-enders, many of whom are turned off by its peculiar coding style, its emulation of an HTML templating system that belongs on the server instead of in the browser, and its serious and fundamental performance issues.", "The 2.0 rewrite is aimed at front-end developers, but may not reach them, and in addition will turn off Angular\u2019s current following.", "Rob Eisenberg provides an explanation:\n\nWhen AngularJS was first created, almost five years ago, it was not originally intended for developers.", "However, it\u2019s logical that Angular, of all JavaScript frameworks, gives rise to this problem.", "That\u2019s why I think Andrew Austin, who was quoted at the start of this article, is wrong when he states:\n\nCompared to hiring jQuery developers, hiring AngularJS developers may be more difficult for an organization.", "The same article gives another cause for concern:\n\nWhile Angular can be used to build mobile apps, it wasn't designed with them in mind.", "Angular insufficiently caters to frond-end sensibilities, so many front-enders tend to ignore it.", "[...] I\u2019ve got developers who\u2019s primary skill is Angular, not necessarily JavaScript.", "Mobile simply wasn\u2019t an issue back in 2010.", "Many front-enders, on the other hand, who have worked with JavaScript and browsers for years and have developed their own coding style, tend to have their doubts about Angular.", "The long litany of complaints I summarised in this article, especially the performance issues, makes me doubt Angular 1.x\u2019s suitability for modern front-end engineering.", "That\u2019s why most Angular developers come from the back-end, particularly from Java.", "Take a look at this demo code example that I pulled straight from the horse\u2019s mouth:\n\n<body> <h2>Todo</h2> <div ng-controller=\"TodoController\"> <span>{{remaining()}} of {{todos.length}} remaining</span> [ <a href=\"\" ng-click=\"archive()\">archive</a> ] <ul class=\"unstyled\"> <li ng-repeat=\"todo in todos\"> <input type=\"checkbox\" ng-model=\"todo.done\"> <span class=\"done-{{todo.done}}\">{{todo.text}}</span> </li> </ul> <form ng-submit=\"addTodo()\"> <input type=\"text\" ng-model=\"todoText\" size=\"30\" placeholder=\"add new todo here\"> <input class=\"btn-primary\" type=\"submit\" value=\"add\"> </form> </div> </body>\n\nThis code reminds me of a simple server-side scripting language such as JSP or ASP that\u2019s used to fill HTML templates with database content.", "[...] Rather than hiring developers with AngularJS experience, it may be easiest to train your existing team or hire JavaScript generalists interested in learning AngularJS.", "They have no preconceived notion of how front-end code is supposed to work, and aren\u2019t trained to recognise Angular\u2019s performance problems.", "That thins the pool of available front-end Angular developers and consultants even more.", "As far as I know this situation where a front-end framework is supported mostly by non-front-enders is unique.", "Giving Angular a serious performance boost requires ditching the {{}} DOM parsing at load time.", "I have doubts about Angular 1.x\u2019s suitability for modern web development.", "Angular Server Pages\n\nI feel that Angular\u2019s fundamental proposition blurs the line between front end and back end.", "I\u2019d say Angular is mostly being used by people from a Java background because its coding style is aimed at them.", "Also, I wonder how people from a Java background will like new coding style.", "I\u2019d say Angular 2.0 will require developers to embed less application logic in their HTML templates, and more in their scripts.", "The problem is that there is no way for Angular to discover these instructions except by parsing the entire DOM, including all text nodes and attribute values \u2014 a very expensive process if there ever was one, especially on mobile."], "title": "The problem with Angular"}, {"url": "http://javascriptplayground.com/blog/2015/02/promises/?utm_source=javascriptweekly&utm_medium=email", "summary": ["We won't go into the underlying specifics of how the code works, but I wanted to look at a high level how we used Promises to build a robust solution that handles errors too.", "Conclusion\n\nPromises are not going anywhere, and are going to become the standard approach for dealing with large amounts of asynchronous operations.", "log ( 'everything is great' ); });\n\nYou might expect an error to be thrown, because x does not exist.", "With the above change, the new code looks like so:\n\nprepareDataForCsv ( fetchData ).", "However, running this code gives you absolutely nothing.", "log ( 'your csv has been saved' ); });\n\nThat's pretty succinct, and I think reads really well.", "If you were to add another catch onto the end, that catch function would run, because when a callback function throws, the next catch in the chain is called.", "log ( 'oh no' , error ); });\n\nNow we get oh no something went wrong .", "Therefore to fetch all the data needed, we need to make two API calls.", "var count = 0 ; var http = function () { if ( count === 0 ) { count ++ ; return Promise .", "Recursion in Promises\n\nOne of the problems we had to deal with was that sometimes to fetch the data from our API, you might have to make multiple requests.", "This is something I've come to really appreciate with promises, once you get used to writing them and working with them, you can end up with some really nice looking code that's easy to follow.", "If it's true, it calls itself again, passing in the new array of users.", "Once it clicks in your mind, you'll find promises really nice to work with and even nicer to handle errors with.", "The chaining of promises is something that really makes them shine in my opinion, but it does take some getting used to - the way they work can be a little odd at first.", "When a promise rejects, the first catch in the chain following that is called.", "resolve ({ more : true , user : { name : 'jack' , age : 22 } }); } else { return Promise .", "log ( 'oh no' , error ); // y is not a thing!", "log ( 'something went wrong' , error ); });\n\nBecause of how the chaining of promises and errors work, as discussed earlier, it means that just one catch at the end of the chain is guaranteed to catch any errors thrown along the way.", "If you have a function that just takes one argument, you can pass that directly to then rather than calling it from a callback function:\n\nfetchData ().", "Chaining and Passing around Promises\n\nThis part is inspired by some work I did recently to add CSV exporting to our client-side application.", "In a complex operation like this, errors could easily occur at any stage of the process (the API might be down, or the code parsing the data might throw an error, or the CSV might not save properly) and we found that with promises we could handle this really nicely, using a sensible combination of then and catch .", "Let's write a function fetchData that can deal with this:\n\nvar fetchData = function () { var goFetch = function ( users ) { return http ().", "Else, you have to deal with error handling through promises in one area, but through good old try {} catch in another.", "then ( function ( data ) { return data ; }); };\n\nWe've found this to be quite a nice pattern for tidying up code and keeping it more generic - it's often easier in an application where most of the work is async to pass promises around rather than waiting for them to resolve and pass the data.", "Let's take prepareDataForCsv as the example:\n\nvar prepareDataForCsv = function ( dataPromise ) { return dataPromise ().", "However, if you return something promise-like, the next \"then\" waits on it, and is only called when that promise settles (succeeds/fails)\n\nAgain, for a real in-depth look at promises, I can't recommend this blog post highly enough.", ") puts this best:\n\nWhen you return something from a \"then\" callback, it's a bit magic.", "log ( 'your csv has been saved' ); });\n\nBearing in mind how complex the underlying code is (at least, in the real application), the high level API reads really nicely.", "That's pretty awesome - prepareDataForCsv is right in the middle of our promise chain but we didn't have to do any extra work or trickery to deal with the error.", "However, right now we don't have any error handling, but we can add it all with one extra piece of code:\n\nfetchData ().", "Of course, if the code within the catch throws an error, that is not the case:\n\nsomeAsyncThing ().", "log ( 'something went wrong' , error ); });\n\nThe beauty of this is that the error handling hasn't changed.", "As you'll see we also end up chaining promises heavily.", "But when a function exists as part of a larger chain, I've found it really beneficial to wrap it in a promise, because it means all your error handling can be done through promises.", "Whenever in the code you see Promise , this will be using the above polyfill, but if you're reading this in a world where promises are widely implemented in browsers, you should still find everything here works exactly the same.", "log ( 'oh no' , error ); });\n\nHere we will still get oh no [ReferenceError: x is not defined] , because someAsyncThing rejected.", "log ( 'oh no' , error ); });\n\nNow, running this gives:\n\noh no [ ReferenceError : x is not defined ]\n\nYou also need to be comfortable with how errors are caught in a chain of promises."], "title": "Embracing Promises in JavaScript"}, {"url": "http://javascript.crockford.com/javascript.html", "summary": ["They lacked exception handling, inner functions, and inheritance.", "JavaScript is well suited to a large class of non-Web-related applications\n\nMoving Target\n\nThe first versions of JavaScript were quite weak.", "It was originally called LiveScript, but that name wasn't confusing enough.", "Important features of the language are often explained poorly, or left out entirely.", "These mistakes have led to programming errors, and called the design of the language as a whole into question.", "Its success there led to it becoming standard equipment in virtually all web browsers.", "Compounding that, those implementations were embedded in horribly buggy web browsers.", "Despite its popularity, few know that JavaScript is a very nice dynamic object-oriented general-purpose programming language.", "Virtually every personal computer in the world has at least one JavaScript interpreter installed on it and in active use.", ") Of course, few understand this because JavaScript is the world's most misunderstood programming language.", "The ECMA committee that has stewardship over the language is developing extensions which, while well intentioned, will aggravate one of the language's biggest problems: There are already too many versions.", "Copyright 2001 Douglas Crockford.", "Compared to C, JavaScript trades performance for expressive power and dynamism.", "Lisp in C's Clothing\n\nJavaScript's C-like syntax, including curly braces and the clunky for statement, makes it appear to be an ordinary procedural language.", "JavaScript:\n\nThe World's Most Misunderstood Programming Language\n\nDouglas Crockford\n\nwww.crockford.com\n\nJavaScript, aka Mocha, aka LiveScript, aka JScript, aka ECMAScript, is one of the world's most popular programming languages.", "Some argue that JavaScript is not truly object oriented because it does not provide information hiding.", "I have reviewed dozens of JavaScript books, and I can only recommend one: JavaScript: The Definitive Guide (5th Edition) by David Flanagan.", "This is misleading because JavaScript has more in common with functional languages like Lisp or Scheme than with C or Java.", "JavaScript has its share of design errors, such as the overloading of + to mean both addition and concatenation with type coercion, and the error-prone with statement should be avoided."], "title": "The World's Most Misunderstood Programming Language"}, {"url": "http://www.smashingmagazine.com/2015/12/generating-svg-with-react/?utm_source=html5weekly&utm_medium=email", "summary": ["At this time in our browser, we should see two axes:\n\n9\n\nGroups in SVG are something like div elements in HTML.", "Groups in SVG are something like div elements in HTML, very useful when your component should return more than one node.", "You can leverage all of the ideas that shape your HTML in SVG, and have small, understandable components that anyone can easily change without breaking any external dependencies.", "Our new data.js looks like this:\n\nexport default [ [ [1, 3], [2, 5], [3, 2], [4, 16], [18, 5] ], [ [1, 16], [2, 23], [3, 5], [4, 3], [5, 1] ] ];\n\nAdding support for multiple data sets is an easy task for us, thanks to React\u2019s top-to-bottom data flow approach.", "12\n\nAdding support for multiple data sets is an easy task for us, thanks to React\u2019s top-to-bottom data flow approach.", "So, let\u2019s add an option to change the data set.", "Suppose the data science department extends our data set by another array and asks us to create a way to switch data on the fly.", "For the less common ones, React provides a way to set the innerHTML of an element via dangerouslySetInnerHTML19, which can help you work around any missing SVG elements you might require.", "This very powerful module bundler will process and manage all dependencies for us.", "With its \u201cre-render the whole world\u201d approach, you can avoid any complex internal interactions between small components, while your application continues to be blazingly fast due to the DOM-diffing that React does under the hood (i.e.", "So, the new index.js is this:\n\nimport React from 'react'; import ReactDOM from 'react-dom'; import App from './app'; import data from './data'; ReactDOM.render(<App datasets={data} />, document.getElementById('root'));\n\nAnd here is scripts/app.js :\n\nimport React from 'react'; import Graph from './components/graph'; export default class App extends React.Component { render() { return ( <Graph data={this.props.datasets[0]} /> # or this.props.datasets[1] just to check that everything is working ) } }\n\nHowever, changing the data set in the code is not user-friendly at all (even if we have React Hot Load to magically update the page for us).", "But let\u2019s try to create something a little more complex, so that we can see how React helps to structure SVG in a human-understandable way.", "This code transpiler allows us to use ECMAScript 6 (ES6) in browsers that don\u2019t yet support it.", "babel 6\n\nThis code transpiler allows us to use ECMAScript 6 (ES6) in browsers that don\u2019t yet support it.", "Axes should just return lines, nothing complex there.", "Crafting this string is easy; it consists of two parts: an initial Moveto command and a bunch of Lineto commands to draw the graph itself:\n\nMoveto will be our starting point: M ${this.props.x} ${this.props.y} .", "I will use React Hot Boilerplate4 as a starting point to save time configuring our development essentials, including the following:\n\nwebpack 5\n\nThis very powerful module bundler will process and manage all dependencies for us.", "We could hardcode them, but better to use defaultProps :\n\nexport default class Graph extends React.Component { static defaultProps = { width: 800, height: 600 };\n\nNow, if we pass no width or height to the Graph component as props , then default values will be used."], "title": "Generating SVG With React \u2013 Smashing Magazine"}, {"url": "https://glebbahmutov.com/blog/instant-web-application/?utm_source=html5weekly&utm_medium=email", "summary": ["Here is one example: the screen recording of Angular2 TodoMVC application where I add items and reload the page.", "In server-side rendering, the page is rendered in the complete form on the server, thus when it arrives the user sees the right layout instantly.", "Ideas for further research and experimentation\n\nHow much code does one need to load in order to make the first static page appear functional?", "This \"instant\" technology is called bottle-service; it is web framework-agnostic and should work with any library: Virtual-Dom, Angular, React, etc.", "Of course, there is a delay between the page load and the instant it becomes it fully responsive application - but at least this is better than hiding the page behind the loading screens, or sudden violent page layout shifts.", "Every time the state changes, the application needs to store both the state and the rendered HTML snapshot.", "We then can store the \"above-the-fold\" code together with the HTML snapshot in the ServiceWorker, loading it right away, making the application appear and respond to the user \"instantly\".", "Conclusion\n\nIn a sense, we have removed the need to render the application server-side (with its problems, framework compatability, etc) and instead are using the best page rendering engine - the browser itself.", "The web application can then take over, \"hydrating\" the static page.", "Then all of the sudden, everything shifts - the application's code took over, rewriting the page's tree structure, forcing the browser to render the loaded data.", "The state can be stored inside the page, even inside the localStorage , while the HTML snapshot is sent to the ServiceWorker code where it will be available on page reload.", "I want to explore dividing the library + web code into a tiny \"above-the-fold\" code fragment + the rest.", "The larger question I want to answer is this:\n\nCan we recreate the same \"instant\" page loading experience in our web application without the server-side rendering?", "), source\n\nUses bottle-service library to implement self-rewriting\n\nOpen your favorite web application, even a simple TodoMVC would work.", "The communication with the ServiceWorker part only has 1 API method, called refill ."], "title": "Better world by better software"}, {"url": "https://app.pluralsight.com/library/courses/alan-turing-wonderful-machine/description", "summary": [], "title": "Pluralsight"}, {"url": "https://medium.com/@dan_abramov/react-components-elements-and-instances-90800811f8ca#.dqgdwl8cn", "summary": ["When React sees an element with a function or class type, it will know to ask that component what element it renders to with the given props.", "this.message = new Message({ text: 'Success!", "'\n\n}\n\n}\n\n}\n\n}\n\nAt the end of this process React knows the result DOM tree, and a renderer like ReactDOM or React Native applies the minimal set of changes necessary to update the actual DOM nodes.", "' });\n\nthis.el.appendChild(this.message.el);\n\n}\n\n}\n\n}\n\nThis is pseudocode, but this is more or less what you end up with when you try to write composable UI that behaves consistently in an object oriented way with a framework like Backbone.", "'\n\n}\n\n}\n\n// React: ...And Form told me this...\n\n{\n\ntype: Button,\n\nprops: {\n\nchildren: 'OK!", "When you call\n\nReactDOM.render({\n\ntype: Form,\n\nprops: {\n\nisSubmitted: false,\n\nbuttonText: 'OK!", "React Elements are easy to traverse, don\u2019t need to be parsed, and of course are much lighter than the actual DOM elements\u2014they\u2019re just objects!", "It will gradually \u201crefine\u201d its understanding of your component tree in terms of simpler primitives:\n\n// React: You told me this...\n\n{\n\ntype: Form,\n\nprops: {\n\nisSubmitted: false,\n\nbuttonText: 'OK!", "This feature lets you define a DangerButton component as a Button with a specific color property value without worrying about whether Button renders to a button, a div, or something else entirely.", "However, the type of an element can also be a function or class corresponding to a React component:\n\n{\n\ntype: Button,\n\nprops: {\n\ncolor: 'blue',\n\nchildren: 'OK!", "Recap\n\nAn element is a plain object describing what you want to appear on the screen in terms of the DOM nodes or other components.", "'\n\n}\n\n}, {\n\ntype: DangerButton,\n\nprops: {\n\nchildren: 'Yep'\n\n}\n\n}, {\n\ntype: Button,\n\nprops: {\n\ncolor: 'blue',\n\nchildren: 'Cancel'\n\n}\n\n}]\n\n});\n\nOr, if you prefer JSX:\n\nconst DeleteAccount = () => (\n\n<div>\n\n<p>Are you sure?</p>\n\n<DangerButton>Yep</DangerButton>\n\n<Button color='blue'>Cancel</Button>\n\n</div>\n\n);\n\nThis keeps components decoupled from each other, as they can express both is-a and has-a relationships exclusively through composition.", "this.button = new Button({\n\nchildren: buttonText,\n\ncolor: 'blue'\n\n});\n\nthis.el.appendChild(this.button.el);\n\n}\n\nif (this.button) {\n\n// The button is visible.", "In this traditional UI model, it is up to you take care of creating and destroying child component instances.", "React will take care of creating an instance for every class component, so that you can write components in an object oriented way with methods and local state, but other than that, instances are not very important in the React\u2019s programming model, and are managed by React itself.", "When it sees\n\n{\n\ntype: Button,\n\nprops: {\n\ncolor: 'blue',\n\nchildren: 'OK!", "This is the traditional object oriented UI programming.", "Class components have instances, but you never need to create a component instance directly\u2014React takes care of this.", "For example:\n\n{\n\ntype: 'button',\n\nprops: {\n\nclassName: 'button button-blue',\n\nchildren: {\n\ntype: 'b',\n\nchildren: 'OK!", "'\n\n}\n\n}\n\nReact will ask Button what it renders to, and it will get\n\n{\n\ntype: 'button',\n\nprops: {\n\nclassName: 'button button-blue',\n\nchildren: {\n\ntype: 'b',\n\nchildren: 'OK!", "return {\n\ntype: Message,\n\nprops: {\n\ntext: 'Success!", "class Form extends TraditionalObjectOrientedView {\n\nrender() {\n\n// Read some data passed to the view\n\nconst { isSubmitted, buttonText } = this.attrs;\n\nif (!isSubmitted && !this.button) {\n\n// Form is not yet submitted.", "An element is a plain object describing a component instance or DOM node and its desired properties.", "*\n\nWhen the element\u2019s type is a string, an element represents a DOM node with that tag name, and props correspond to its attributes.", "In both cases, it takes props as an input, and returns an element tree as the output.", "It\u2019s just an immutable description object with two fields: type: (string | Component) and props: Object.", "',\n\ncolor: 'blue'\n\n}\n\n}\n\n// React: ...and Button told me this!", "A functional component is less powerful but is simpler, and it acts like a class component with just a single render() method.", "For example, you may declare a Button component by creating a class.", "Only components declared as classes have instances, and you never create them directly: React does that for you.", "'\n\n}\n\n}, document.getElementById('root'));\n\nReact will ask the Form component what element tree it returns, given those props.", "The returned element tree can contain both elements describing DOM nodes, and elements describing other components.", "We let React create, update, and destroy instances."], "title": "React Components, Elements, and Instances \u2014 Medium"}, {"url": "http://usergroup.tv/videos/cross-platform-authentication", "summary": ["At the Technology center, David utilizes his extensive experience and passion for custom application development to help customers on their journey of creating exciting new application and solutions, built on the Microsoft development platform.", "Bio:\n\nDavid Powell is a Technology Architect focusing on the Application Platform, in the Dallas Microsoft Technology Center.", "With new application models, such as mobile apps, web application, and api applications we need a cloud friendly way to securely authenticate, and identify our users, that works across all application platforms.", "In our discussion, we will dig into the details of OAuth, SAML, JWT Tokens, Bearer Tokens, Graph API and all of the technical goodies that go into integrating identity into our native, web and api applications.", "Cross-Platform Authentication\n\nSpeaker:\n\nDavid Powell\n\nAbstract:\n\nMicrosoft Active Directory has been a core piece of our line of business, and intranet application architectures.", "Recorded At:\n\nDallas .NET Users Group", "The Windows Integrated Authentication model has made implementing authentication, authorization and Identity in our applications super easy.", "David has been designing, implementing and evangelizing the Microsoft Application Platform throughout his 15 yr. tenure at Microsoft.", "In this session, I will walk you through implementing identity in your modern applications, using Microsoft Azure Active Directory.", "As a hands on architect, David has helped implement some of the largest eCommerce websites, and Retail applications built on the Microsoft platform."], "title": "Cross-Platform Authentication"}, {"url": "http://blog.boyet.com/blog/blog/making-your-web-pages-fast-part-one/", "summary": ["It took, believe it or not, over 17 seconds to load and display on my wired connection, around 10 seconds longer than I would have waited if I hadn\u2019t have wanted to read the content.", "At around 1 second , the user is aware that the browser is doing something or that the network is introducing some level of latency, but their train of thought is not broken (and as devs we know how annoying that can be).", "If the web developer was canny enough to present the content you, the reader, needed as fast as possible, but the remaining parts of the page took longer (say, a list of recent posts or similar posts, ads, the tweet stream, whatever), you\u2019d rate the page as a whole as faster than the alternative (that is, get all the data and render only when it was available).", "This level of responsiveness is essential to support the feeling of \u201d That is, at this order of magnitude, it feels like the browser is directly responding to you, the user.", "\u2014 Julian M Bucknall (@JMBucknall) August 30, 2015\n\nSo this one blog post used 117 HTTP requests for various files (HTML, CSS, JavaScript, images, whatever) from 16 separate web servers.", "] still feel in control of the overall experience and that they're moving freely rather than waiting on the computer.\u201d At 10 seconds , well that\u2019s it: you have pretty much lost the user.", "Depending on your connection speed, general traffic, etc, you\u2019ll glimpse the main banner displayed on the left out of the corner of your eye, well before the scrollbar gets displayed when the rest of the page is downloaded and renders large enough.", "The overall time to render the whole page would be the same, give or take, but the reader\u2019s task (read the content) could be started much earlier.", "At around 0.1 second , the user feels it\u2019s instantaneous.", "To quote Nielsen: \u201cThe outcome feels like it was caused by the user, not the computer.", "] still feel in control of the overall experience and that they're moving freely rather than waiting on the computer.\u201d\n\n, the user is aware that the browser is doing something or that the network is introducing some level of latency, but their train of thought is not broken (and as devs we how annoying that can be).", "You could say Amazon\u2019s devs have heightened this perception to the level of performance art.", "This is the tweet I sent:\n\n@JohnKaster @delphijunkie @NickHodges So I ran it under Firebug: 117 reqs, 16 servers, 6.98s for the page; 17.02s before onload."], "title": "Making your web pages fast (part one) : Algorithms for the masses"}, {"url": "http://blog.boyet.com/blog/blog/making-your-web-pages-fast-part-two/", "summary": ["In the previous episode of this series I discussed why you might want to speed up your web pages and how it is more about perceived performance, rather than absolute performance.", "Already, in this particular article, we\u2019ve identified two optimizations: sometimes downloading from your own domain can be quicker (an absolute optimization), and declaring your script elements as late as possible means the reader can see the content before the JavaScript parsing, compiling, and executing takes over (a perceived optimization).", "The very first item is the request for the main page itself, every other request is going to be triggered because of something in that page's markup: CSS files, script files, images, and so on.", "Another small point to notice here: jQuery is downloaded from the ajax.microsoft.com CDN (Content Delivery Network) and although it is a smaller file than shortcode.css, it\u2019s taking longer to download (the length of the green bar).", "Anyway, this first thing that needs to be done is to analyze the web page with the developer tools that come with your browser.", "), there\u2019s another gap: the downloads of the images are blocked until jQuery has been downloaded.", "This in fact is one of the major \u201cperceived performance\u201d optimizations you can make for your webpages: declare your script elements as late in the markup as possible.", "For me, on my Volvo blog, the page itself is being returned really quickly: waiting 97ms (purple bar) with an almost instantaneous receive time (too thin a green bar to see) isn\u2019t too shabby at all.", "Unfortunately there's another catch here: ideally you want to clear the cache for that particular page.", "Let the refresh complete and you will have a display that looks something like this (click to enlarge, although it might be better to right-click and open in its own window):\n\nNetwork analysis for 64SAINT.com\n\nThis network analysis is for the blog I have for my Volvo 1800S.", "If you have a site that receives occasional use, then maybe you don't want to overdo the time and effort that these performance optimizations might entail.", "(For Firefox: load up the page so it\u2019s first in your history list, then go to the History list, click Show All History, right-click the page you just loaded and select Forget About This Site.", "If you look carefully, this same batching occurs elsewhere as well: files seems to be downloaded in batches of five or six.", "In this example, it\u2019s nearly a whole second before the DOM content is finally loaded, with well over half of that time just sitting around waiting for jQuery to download and be parsed and be executed (together with all the other JavaScript files that depend on it).", "The thin blue vertical line represents an event when the DOM content has been loaded (essentially, the markup minus images, etc), the red one is when the page Load event is fired.", "This batching size is browser-dependent, by the way; in my experience Firefox certainly seems to use six-at-a-time batches.", "For Firebug, a purple color in a file download timeline indicates the time spent waiting for a response, green indicates the receiving time.", "I\u2019m sure just by looking at this bar graph, you can immediately see the other main optimizations we can do: reduce the number of files and make them smaller.", "This in fact brings up a very important optimization point: the way that browsers work is that script elements are processed immediately they are encountered in the HTML markup."], "title": "Making your web pages fast (part two) : Algorithms for the masses"}, {"url": "http://blog.boyet.com/blog/blog/making-your-web-pages-fast-part-three/", "summary": ["Better is to try and put as much on the main domain hostname as you can (only one DNS lookup required!", "Summary\n\nTo improve the perceived performance of your webpages, try these recommendations:\n\nMinimize the number of files.", "(As an example of what I\u2019m talking about here, Steve Souders has created a simple webpage where it takes a full 10 seconds to download the script file (select \u201cRule 6\u201d then \u201cExample 2\u201d to see it in action).", "Optimize your images, especially PNGs.", "And note that even if your script looks like this:\n\n$( function ($) { \"use strict\" ; // code code code });\n\n\u2026it\u2019s still going to have to execute that call to the jQuery $(document).ready() function.", "The reason for doing this is that, unless we explicitly mark the script with the async attribute in the markup, the browser will stop parsing the markup, request and download the script (if it\u2019s external), then compile and execute the code.", "Obviously, if you are going to be minifying your code and CSS, it makes sense to concatenate them afterwards as well to produce a single minified CSS file and a single minified script file.", "Another option, for smaller scripts, say, is to inline the script into the markup.", "These types of script elements are known as blocking scripts, because, well, they block the browser from doing what the reader wants: displaying content.", "Reduced file sizes means reduced time to download them.", "There are two scopes to strict mode: the whole file \u2013 what you might call Global Strict Mode \u2013 and per function.", "One way to make batching work for you at the browser is to separate the files that need to be downloaded onto different domains.", "Avoid blocking script problems.", "If, however, I concatenate it into a big ol\u2019 JavaScript file for my site, I will only benefit from caching provided the reader has visited my webpage at least once.", "It prevents, or throws errors, when relatively \"unsafe\" actions are taken (such as gaining access to the global object).", "By doing so, I am (A) reducing the work that my web server needs to do (for every reader visiting the site they will download just one file, instead of issuing five requests at the same time), and (B) reducing the work that the browser has to do, especially if it batches requests.", ".NET developers would probably go for the Microsoft Ajax Minifier (AjaxMin).", "Optimizing images\n\nOnce you have minified and concatenated your code, don\u2019t stop there.", "For JavaScript and CSS files, the easiest way to reduce the file sizes is to minify them.", "Strict mode helps developers out in a few ways:\n\nIt catches some common coding bloopers, throwing exceptions.", "As an example, unminified jQuery 1.11 is 277KB, whereas the official minified version is 95KB, a third the size.", "To be brutally honest, though, I don\u2019t see much benefit these days from domain sharding; maybe in earlier years it was more important than it is now.", "At first glance, such a strategy \u2013 storing your files on several hostnames \u2013 might speed things up, especially for webpages that have a lot of files to download (we assume that you haven\u2019t concatenated your scripts and CSS).", "My classic car website required 5 CSS files to be downloaded, all from my domain.", "In my example from last time, the jQuery script file was being downloaded from a well-known CDN URL.", "For each new domain, the browser must do a DNS lookup to find the server\u2019s IP address.", "Concatenate your JavaScript and CSS files to have just two downloads rather than tens of downloads.", "You can also minify your HTML, but, to be honest, I don\u2019t know of many sites that do.", "It catches some common coding bloopers, throwing exceptions.", "Scripts in the markup\n\nAs it happens, last time we discussed one of those performance gains: putting your script elements at the end of the markup, just before the </body> tag.", "Next, my webpage requires 14 JavaScript files to be downloaded.", "So, instead of 14 requests, batched, I could have one request for a concatenated file.", "This simple change has one huge benefit: the browser can kick off a request to download an image, but still knows how big the image will be to display."], "title": "Making your web pages fast (part three) : Algorithms for the masses"}, {"url": "http://apmblog.dynatrace.com/2015/11/04/understanding-garbage-collection-and-hunting-memory-leaks-in-node-js/?utm_source=nodeweekly&utm_medium=email", "summary": ["The mechanism that allocates and frees heap memory is called garbage collection.", "Although this example leads to obvious results the process is always the same:\n\nCreate heap dumps with some time and a fair amount of memory allocation in between Compare a few dumps to find out what\u2019s growing\n\nWrap Up\n\nAs we have seen, garbage collection is a complex process and even valid code can cause memory leaks.", "As we already learned, in Node.js JavaScript is compiled to native code by V8.", "V8 provides a way to dump the current heap, and V8-profiler exposes this functionality to JavaScript.", "This function will return an object containing:\n\nResident Set Size\n\nTotal Size of the Heap\n\nHeap actually Used\n\nWe can use this function to record the memory usage over time to create a graph that perfectly shows how V8\u2019s memory handling actually works.", "To remedy this situation V8 uses two types of garbage collection:\n\nScavenge, which is fast but incomplete\n\nMark-Sweep, which is relatively slow but frees all non-referenced memory\n\nFor an excellent blog post containing in-depth information about garbage collection in V8 please click here.", "This simple module creates heap dump files if memory usage is constantly rising.", "That\u2019s why Chrome developer tools allow you to compare different memory profiles.", "This does not mean that Node.js is more prone to problems than other technologies \u2013 the user must simply be aware of certain things about how Node.js works .", "By using the native module node-gc-profiler we can gather even more information about garbage collection runs.", "Garbage collection tries its best to free memory but for every run we see that consumption after a garbage collection run is constantly climbing, which is a clear indication of a leak.", "The theory behind garbage collection is quite simple: If a memory segment is not referenced from anywhere, we can assume that it is not used and, therefore, can be freed.", "By using the out-of-the-box functionality provided by V8 plus Chrome developer tools it\u2019s possible to obtain insights that help us trace down the root cause of the leaks and, if you build in such functionality into your application, you have everything necessary to fix a problem when it occurs.", "V8 uses a well-known mechanism called garbage collection to address this problem.", "Revisiting the data we collected from process.memoryUsage() we can now easily identify the different garbage collection types: The saw-tooth pattern is created by Scavenge runs and the downward jumps indicate Mark-Sweep operations.", "But first, let\u2019s cover some Node.js basics.", "Within Node.js the current memory usage can easily be queried by calling process.memoryUsage().", "While this technology has a rather flat learning curve, the machinery that keeps Node.js ticking is quite complex and you must understand it to preemptively avoid performance pitfalls.", "Enter Garbage Collection\n\nEvery program that consumes memory requires a mechanism for reserving and freeing space.", "Building a Leak\n\nSome leaks are obvious \u2014 like storing data in process-global variables, an example of which would be storing the IP of every visiting user in an array.", "We see that the used heap graph is highly volatile but always stays within certain boundaries to keep the median consumption constant.", "Instead, let\u2019s just look at a difficult to track leak you can easily introduce into your own JavaScript code that I found on Meteor\u2019s blog.", "The same heap dump functionality is also provided within Chrome and, fortunately, you can use Chrome developer tools to analyze the dumps V8-profiler."], "title": "V8 Garbage Collection & Memory Leak analysis"}]