[{"url": "http://andyshora.com/promises-angularjs-explained-as-cartoon.html", "summary": ["Different things happen from week-to-week:\n\nOutcome A) Weather forecast retrieved!", "By Andy Shora \u2190 back to andyshora.com | Tweet this article\n\nOne morning, a father says to his son: \"Go and get the weather forecast, son!", "Sunshine :-) The son succeeded in retrieving the weather forecast, clear skies and sunshine!", "We've already stated the logic, the father asks the son to get the weather forecast, and as the son can't tell him immediately, and the father has other things to do while he waits, the son makes a promise he shall return with the weather.", "We'll suppose when the son is looking through his telescope and looking for the approaching weather, it's analogous to using a weather API, in the sense that it's an asynchronous operation, he may get a variable answer, and there may be a problem (say, a 500 response, foggy skies).", "Promises in AngularJS, Explained as a Cartoon An alternative frontend development article.", "\" Every Sunday morning, a father asks his son to go and find out the weather forecast for the afternoon, by using his super-strong telescope to look across the horizon from the tallest hill by their house.", "Cloudy and rain :-( The son succeeded in retrieving the weather forecast, but it looked like cloudy and rain.", "Outcome C) Couldn't get the weather forecast :-/ The son failed to retrieve the forecast, there was a problem; it was way too foggy to see what weather was coming over the hills.", "The important thing to note here, is the son's trip up the hill shouldn't 'block' the dad from doing anything, so this is why the situation is perfect for the creation of a promise, which can be resolved (fulfilled or rejected) later on."], "title": "Promises in AngularJS, Explained as a Cartoon"}, {"url": "http://apmblog.dynatrace.com/2015/11/04/understanding-garbage-collection-and-hunting-memory-leaks-in-node-js/", "summary": ["The mechanism that allocates and frees heap memory is called garbage collection.", "Although this example leads to obvious results the process is always the same:\n\nCreate heap dumps with some time and a fair amount of memory allocation in between Compare a few dumps to find out what\u2019s growing\n\nWrap Up\n\nAs we have seen, garbage collection is a complex process and even valid code can cause memory leaks.", "As we already learned, in Node.js JavaScript is compiled to native code by V8.", "V8 provides a way to dump the current heap, and V8-profiler exposes this functionality to JavaScript.", "This function will return an object containing:\n\nResident Set Size\n\nTotal Size of the Heap\n\nHeap actually Used\n\nWe can use this function to record the memory usage over time to create a graph that perfectly shows how V8\u2019s memory handling actually works.", "To remedy this situation V8 uses two types of garbage collection:\n\nScavenge, which is fast but incomplete\n\nMark-Sweep, which is relatively slow but frees all non-referenced memory\n\nFor an excellent blog post containing in-depth information about garbage collection in V8 please click here.", "This simple module creates heap dump files if memory usage is constantly rising.", "That\u2019s why Chrome developer tools allow you to compare different memory profiles.", "This does not mean that Node.js is more prone to problems than other technologies \u2013 the user must simply be aware of certain things about how Node.js works .", "By using the native module node-gc-profiler we can gather even more information about garbage collection runs.", "Garbage collection tries its best to free memory but for every run we see that consumption after a garbage collection run is constantly climbing, which is a clear indication of a leak.", "The theory behind garbage collection is quite simple: If a memory segment is not referenced from anywhere, we can assume that it is not used and, therefore, can be freed.", "By using the out-of-the-box functionality provided by V8 plus Chrome developer tools it\u2019s possible to obtain insights that help us trace down the root cause of the leaks and, if you build in such functionality into your application, you have everything necessary to fix a problem when it occurs.", "V8 uses a well-known mechanism called garbage collection to address this problem.", "Revisiting the data we collected from process.memoryUsage() we can now easily identify the different garbage collection types: The saw-tooth pattern is created by Scavenge runs and the downward jumps indicate Mark-Sweep operations.", "But first, let\u2019s cover some Node.js basics.", "Within Node.js the current memory usage can easily be queried by calling process.memoryUsage().", "While this technology has a rather flat learning curve, the machinery that keeps Node.js ticking is quite complex and you must understand it to preemptively avoid performance pitfalls.", "Enter Garbage Collection\n\nEvery program that consumes memory requires a mechanism for reserving and freeing space.", "Building a Leak\n\nSome leaks are obvious \u2014 like storing data in process-global variables, an example of which would be storing the IP of every visiting user in an array.", "We see that the used heap graph is highly volatile but always stays within certain boundaries to keep the median consumption constant.", "Instead, let\u2019s just look at a difficult to track leak you can easily introduce into your own JavaScript code that I found on Meteor\u2019s blog.", "The same heap dump functionality is also provided within Chrome and, fortunately, you can use Chrome developer tools to analyze the dumps V8-profiler."], "title": "V8 Garbage Collection & Memory Leak analysis"}, {"url": "http://blog.beanstalkapp.com/post/134466186744/empowering-new-teammates", "summary": ["But after going through the process of adding the new potential all star, reality kicks in: internal onboarding is a lot of work.", "They can create a safe place to give and receive feedback, allowing the less experienced developer to ask, \u201cHow would you approach this problem?\u201d With the right approach, code reviews will bring the learning experience full circle!", "Teaching someone else forces a person to remember all the little steps along the way.", "Here are a couple of the tools that have helped us get our new friends up to speed:\n\nAll the above will take you a little time, but consider it an investment.", "And you hire the latter for potential, but they may have to learn new tools as well as getting acquainted with your workflow.", "Have a playground\n\nOnce you\u2019ve helped the new hire get set up with equipment, shared the team\u2019s toolset, and discussed the workflow, let \u2018em loose.", "For many people, rolling back a document to a previous version with a tool like Dropbox is simple and intuitive.", "Imagine the difference for that person when they can spend the first couple of days reading documentation rather than worrying about asking too many questions.", "Documenting your team\u2019s workflow, giving space to ask questions, and letting new hires play in a safe environment will help them when they begin to make changes in your projects.", "Code Reviews are an opportunity to mentor\n\nLast, make sure your team has a full, robust development workflow.", "But for many, committing changes to your team\u2019s repo is a much scarier step to take.", "Empowering New Teammates\n\nPosted on December 3, 2015 by Chris Bowler\n\nOne of the more exciting aspects of working as a team is adding new team members.", "Schedule a question period\n\nAs a follow up to the first step, schedule time for the new hire to spend with key members of the team."], "title": "Empowering New Teammates \u2014 Beanstalk"}, {"url": "http://blog.boyet.com/blog/blog/making-your-web-pages-fast-part-one/", "summary": ["It took, believe it or not, over 17 seconds to load and display on my wired connection, around 10 seconds longer than I would have waited if I hadn\u2019t have wanted to read the content.", "At around 1 second , the user is aware that the browser is doing something or that the network is introducing some level of latency, but their train of thought is not broken (and as devs we know how annoying that can be).", "If the web developer was canny enough to present the content you, the reader, needed as fast as possible, but the remaining parts of the page took longer (say, a list of recent posts or similar posts, ads, the tweet stream, whatever), you\u2019d rate the page as a whole as faster than the alternative (that is, get all the data and render only when it was available).", "This level of responsiveness is essential to support the feeling of \u201d That is, at this order of magnitude, it feels like the browser is directly responding to you, the user.", "\u2014 Julian M Bucknall (@JMBucknall) August 30, 2015\n\nSo this one blog post used 117 HTTP requests for various files (HTML, CSS, JavaScript, images, whatever) from 16 separate web servers.", "] still feel in control of the overall experience and that they're moving freely rather than waiting on the computer.\u201d At 10 seconds , well that\u2019s it: you have pretty much lost the user.", "Depending on your connection speed, general traffic, etc, you\u2019ll glimpse the main banner displayed on the left out of the corner of your eye, well before the scrollbar gets displayed when the rest of the page is downloaded and renders large enough.", "The overall time to render the whole page would be the same, give or take, but the reader\u2019s task (read the content) could be started much earlier.", "At around 0.1 second , the user feels it\u2019s instantaneous.", "To quote Nielsen: \u201cThe outcome feels like it was caused by the user, not the computer.", "] still feel in control of the overall experience and that they're moving freely rather than waiting on the computer.\u201d\n\n, the user is aware that the browser is doing something or that the network is introducing some level of latency, but their train of thought is not broken (and as devs we how annoying that can be).", "You could say Amazon\u2019s devs have heightened this perception to the level of performance art.", "This is the tweet I sent:\n\n@JohnKaster @delphijunkie @NickHodges So I ran it under Firebug: 117 reqs, 16 servers, 6.98s for the page; 17.02s before onload."], "title": "Making your web pages fast (part one) : Algorithms for the masses"}, {"url": "http://blog.boyet.com/blog/blog/making-your-web-pages-fast-part-three/", "summary": ["Better is to try and put as much on the main domain hostname as you can (only one DNS lookup required!", "Summary\n\nTo improve the perceived performance of your webpages, try these recommendations:\n\nMinimize the number of files.", "(As an example of what I\u2019m talking about here, Steve Souders has created a simple webpage where it takes a full 10 seconds to download the script file (select \u201cRule 6\u201d then \u201cExample 2\u201d to see it in action).", "Optimize your images, especially PNGs.", "And note that even if your script looks like this:\n\n$( function ($) { \"use strict\" ; // code code code });\n\n\u2026it\u2019s still going to have to execute that call to the jQuery $(document).ready() function.", "The reason for doing this is that, unless we explicitly mark the script with the async attribute in the markup, the browser will stop parsing the markup, request and download the script (if it\u2019s external), then compile and execute the code.", "Obviously, if you are going to be minifying your code and CSS, it makes sense to concatenate them afterwards as well to produce a single minified CSS file and a single minified script file.", "Another option, for smaller scripts, say, is to inline the script into the markup.", "These types of script elements are known as blocking scripts, because, well, they block the browser from doing what the reader wants: displaying content.", "Reduced file sizes means reduced time to download them.", "There are two scopes to strict mode: the whole file \u2013 what you might call Global Strict Mode \u2013 and per function.", "One way to make batching work for you at the browser is to separate the files that need to be downloaded onto different domains.", "Avoid blocking script problems.", "If, however, I concatenate it into a big ol\u2019 JavaScript file for my site, I will only benefit from caching provided the reader has visited my webpage at least once.", "It prevents, or throws errors, when relatively \"unsafe\" actions are taken (such as gaining access to the global object).", "By doing so, I am (A) reducing the work that my web server needs to do (for every reader visiting the site they will download just one file, instead of issuing five requests at the same time), and (B) reducing the work that the browser has to do, especially if it batches requests.", ".NET developers would probably go for the Microsoft Ajax Minifier (AjaxMin).", "Optimizing images\n\nOnce you have minified and concatenated your code, don\u2019t stop there.", "For JavaScript and CSS files, the easiest way to reduce the file sizes is to minify them.", "Strict mode helps developers out in a few ways:\n\nIt catches some common coding bloopers, throwing exceptions.", "As an example, unminified jQuery 1.11 is 277KB, whereas the official minified version is 95KB, a third the size.", "To be brutally honest, though, I don\u2019t see much benefit these days from domain sharding; maybe in earlier years it was more important than it is now.", "At first glance, such a strategy \u2013 storing your files on several hostnames \u2013 might speed things up, especially for webpages that have a lot of files to download (we assume that you haven\u2019t concatenated your scripts and CSS).", "My classic car website required 5 CSS files to be downloaded, all from my domain.", "In my example from last time, the jQuery script file was being downloaded from a well-known CDN URL.", "For each new domain, the browser must do a DNS lookup to find the server\u2019s IP address.", "Concatenate your JavaScript and CSS files to have just two downloads rather than tens of downloads.", "You can also minify your HTML, but, to be honest, I don\u2019t know of many sites that do.", "It catches some common coding bloopers, throwing exceptions.", "Scripts in the markup\n\nAs it happens, last time we discussed one of those performance gains: putting your script elements at the end of the markup, just before the </body> tag.", "Next, my webpage requires 14 JavaScript files to be downloaded.", "So, instead of 14 requests, batched, I could have one request for a concatenated file.", "This simple change has one huge benefit: the browser can kick off a request to download an image, but still knows how big the image will be to display."], "title": "Making your web pages fast (part three) : Algorithms for the masses"}, {"url": "http://blog.boyet.com/blog/blog/making-your-web-pages-fast-part-two/", "summary": ["In the previous episode of this series I discussed why you might want to speed up your web pages and how it is more about perceived performance, rather than absolute performance.", "Already, in this particular article, we\u2019ve identified two optimizations: sometimes downloading from your own domain can be quicker (an absolute optimization), and declaring your script elements as late as possible means the reader can see the content before the JavaScript parsing, compiling, and executing takes over (a perceived optimization).", "The very first item is the request for the main page itself, every other request is going to be triggered because of something in that page's markup: CSS files, script files, images, and so on.", "Another small point to notice here: jQuery is downloaded from the ajax.microsoft.com CDN (Content Delivery Network) and although it is a smaller file than shortcode.css, it\u2019s taking longer to download (the length of the green bar).", "Anyway, this first thing that needs to be done is to analyze the web page with the developer tools that come with your browser.", "), there\u2019s another gap: the downloads of the images are blocked until jQuery has been downloaded.", "This in fact is one of the major \u201cperceived performance\u201d optimizations you can make for your webpages: declare your script elements as late in the markup as possible.", "For me, on my Volvo blog, the page itself is being returned really quickly: waiting 97ms (purple bar) with an almost instantaneous receive time (too thin a green bar to see) isn\u2019t too shabby at all.", "Unfortunately there's another catch here: ideally you want to clear the cache for that particular page.", "Let the refresh complete and you will have a display that looks something like this (click to enlarge, although it might be better to right-click and open in its own window):\n\nNetwork analysis for 64SAINT.com\n\nThis network analysis is for the blog I have for my Volvo 1800S.", "If you have a site that receives occasional use, then maybe you don't want to overdo the time and effort that these performance optimizations might entail.", "(For Firefox: load up the page so it\u2019s first in your history list, then go to the History list, click Show All History, right-click the page you just loaded and select Forget About This Site.", "If you look carefully, this same batching occurs elsewhere as well: files seems to be downloaded in batches of five or six.", "In this example, it\u2019s nearly a whole second before the DOM content is finally loaded, with well over half of that time just sitting around waiting for jQuery to download and be parsed and be executed (together with all the other JavaScript files that depend on it).", "The thin blue vertical line represents an event when the DOM content has been loaded (essentially, the markup minus images, etc), the red one is when the page Load event is fired.", "This batching size is browser-dependent, by the way; in my experience Firefox certainly seems to use six-at-a-time batches.", "For Firebug, a purple color in a file download timeline indicates the time spent waiting for a response, green indicates the receiving time.", "I\u2019m sure just by looking at this bar graph, you can immediately see the other main optimizations we can do: reduce the number of files and make them smaller.", "This in fact brings up a very important optimization point: the way that browsers work is that script elements are processed immediately they are encountered in the HTML markup."], "title": "Making your web pages fast (part two) : Algorithms for the masses"}, {"url": "http://blog.getify.com/concurrently-javascript-1/", "summary": ["A system level thread would be the set of tasks that a CPU core is going to perform.", "Next, 2b needs to be instructed to wait for both 1a and 1b to finish, regardless of which order that might occur in.", "Coordination\n\nWhen you have two separate lists of operations to perform that are entirely independent \u2013 they don\u2019t depend on each other in ordering, and they don\u2019t use any shared resources \u2013 modern parallel threaded programming is mostly a no brainer.", "The coordination steps we just talked about can be thought of in two categories:\n\nthings happening in parallel\n\nthings happening in series\n\nFor \u201cthings happening in parallel\u201d, our only concern is that we be able to wait for all the things in a set to complete before moving on.", "So if a computer has 4 cores, there would be at most 4 system threads that could be processing 4 separate lists of operations.", "The desired coordination could be visualized as such (the two columns are two separate threads where the operations happen in parallel):\n\n1a 1b\n\n2b\n\n2a\n\n3a 3b\n\nThere\u2019s several components of coordination to consider here.", "First, 1a and 1b need to be instructed to occur in parallel.", "Consequently, 2a needs to wait for 2b to finish before it runs.", "That entire set of operations could be conceptually composed together to look like one or more high level tasks we might be working with in our programs.", "In subsequent parts of this blog post series, we\u2019re going to look at reactive programming (event-concurrency) and CSP (channel-concurrency).", "This semantic is significantly simplifying in terms of ease of writing correct, bug-free code.", "Generators (+ Promises) achieve almost perfect sync-looking async code, which makes expressing our coordinated concurrency look even closer to how our brains work.", "It may be hard to picture it, but the high-level things we do in programming like sorting numbers, making database queries, or styling the text with a custom font \u2013 they really do break down to (lots of) these very low-level operations.", "Note: If you\u2019re looking for more in-depth coverage on these topics beyond this article, check out You Don\u2019t Know JS: Async & Performance, Chapter 1.", "The better we are at breaking up tasks into operations, the more effective the JS engine can be at scheduling these operations on the single thread event loop.", "BTW, the things we\u2019re talking about happening in parallel are not big tasks like network requests and responses.", "Don\u2019t worry: following parts of this blog post series will talk more about APIs, if that\u2019s what really gets you excited.", "Parallel\n\nImagine you have two different tasks to perform with several operations in each task.", "Instead, we\u2019re talking about very low-level actions, like adding two numbers together or performing a bitwise operation on a single number.", "Because the event-loop is so efficient, JS programs can achieve impressive amounts of performance even though they\u2019re only running on a single thread.", "It would seem like those two things could happen at the same time, right?", "Of course, if your computer only has 4 cores, and thus only 4 possible system level threads at any given moment, that\u2019s going to be rather limiting and difficult for the dozen or more programs you have open right now to trade off on what they need to get done.", "Async / Parallel\n\nWhether we\u2019re talking about truly parallel programming, or async (single-threaded) programming like in JS, coordination of concurrency is absolutely foundational for effective programming.", "The OS is pretty good at this scheduling, so even if there are many more virtual threads than system threads, the processing of all those operations will still procede as if they\u2019re all happening truly in parallel."], "title": "Concurrently JavaScript (1)"}, {"url": "http://blog.getsentry.com/2015/10/29/debuggable-javascript-with-source-maps.html", "summary": ["//# sourceMappingURL: http://company.intranet/app/static/app.min.js.map\n\nWhen a non-team member visits your application with developer tools open, they will attempt to download this source map but get a 404 (or 403) HTTP error, and the source map will not be applied.", "If you are using UglifyJS to minify your source code, the following command will additionally generate a source map mapping the minified code back to the original source:\n\n$ uglifyjs app.js -o app.min.js --source-map app.min.js.map\n\nIf you take a look at the generated output file (app.min.js), you\u2019ll notice that the final line includes the sourceMappingURL directive pointed to our newly generated source map.", "Source Maps and Sentry\n\nIf you use Sentry to track exceptions in your client-side JavaScript applications, we have good news: Sentry automatically fetches and applies source maps to stack traces generated by your errors.", "Note: Browsers only download and apply source maps when developer tools are open.", "exports = { // ... entry : { \"app\" : \"src/app.js\" }, output : { path : path .", "using React Native or PhoneGap, whose source code/maps cannot be reached over the internet\n\nAvoids version mismatches where fetched source map doesn\u2019t match code where error was thrown\n\nFor more information on uploading source maps to Sentry, check out our official documentation.", "Or perhaps more likely, you\u2019re minifying your source code in order to reduce the filesize of your deployed scripts.", "Above: A stack trace in Sentry mapped back to its original ES6 + JSX source code.", "This means that you\u2019ll see your original source code, and not minified and/or transpiled code.", "Above: Stepping through Sentry\u2019s original ES6 + JSX code in Firefox using Source Maps.", "Good news: basically every modern JavaScript transpiler has a command-line option for generating an associated source map.", "In order for the browser to download the associated source map, it must be uploaded to (and served from) the same destination directory as the Uglified file (app.min.js).", "sourceMappingURL\n\nTo indicate to browsers that a source map is available for a transpiled file, the sourceMappingURL directive needs to be added to the end of that file:\n\n// app.min.js $ ( function () { // your application ... }); //# sourceMappingURL=/path/to/app.min.js.map\n\nWhen modern browsers see the sourceMappingURL directive, they download the source map from the provided location and use the mapping information inside to corroborate the running client-code with the original source code.", "join ( __dirname , 'dist' ), filename : \"[name].js\" , sourceMapFilename : \"[name].js.map\" , }, // ... };\n\nNow when you run the webpack command-line program, Webpack will assemble your files, generate a source map, and reference that source map in the built JavaScript file via the sourceMappingUrl directive.", "Perhaps you\u2019re writing your source code in a language that \u201ccompiles\u201d to JavaScript \u2013 like CoffeeScript, TypeScript, or the latest standards-body approved version of JavaScript, ECMAScript 2015 (ES6).", "This presents a problem: when debugging code in the browser, or inspecting stack traces generated from errors in your application, you are looking at transpiled and (typically) hard-to-read JavaScript."], "title": "Debuggable JavaScript in production with Source Maps \u00b7 Sentry"}, {"url": "http://blog.jooq.org/2015/02/13/10-sql-articles-everyone-must-read/", "summary": ["Read Lukas\u2019s: \u201c10 Common Mistakes Java Developers Make when Writing SQL\u201c\n\n6.", "Whether you\u2019re using SQL Server or not, this is a must-read to re-raise awareness of the subtle little differences between SQL implementations\n\nRead Alek\u2019s \u201c10 things in SQL Server (which don\u2019t work as expected)\u201c\n\n10.", "Markus Winand: \u201cClustering Data: The Second Power of Indexing\u201d\n\nMarkus Winand is the author of the popular book SQL Performance Explained, parts of which you can also read on his blog \u201cUse The Index Luke\u201c.", "At the end of the list, you will agree that either:\n\nSQL is awesome\n\nSQL is crazy\n\n\u2026 or probably both.", "Read Aaron\u2019s \u201cBest approaches for running totals\u201c\n\nMany other articles\n\nThere are, of course, many other very good articles providing deep insight into useful SQL tricks.", "If you\u2019re using Oracle 11g or less, you should filter on ROWNUM :\n\nRead Andr\u00e1s\u2019s \u201cTechniques for Pagination in SQL\u201c\n\nOn a side-note, you should probably consider not using OFFSET at all.", "We\u2019ve collected 10 of the most common mistakes that Java developers make when writing SQL.", "A very interesting set of things that happen inside of SQL Server, which you might not have expected when you\u2019re used to using other databases.", "There is an incredible amount of very useful knowledge both in the book and on this page, but one of the most revealing and neat SQL tricks is to know about \u201ccovering indexes\u201d, \u201cclustering indexes\u201d, or \u201cindex only scans\u201d\n\nRead Markus\u2019s: \u201cClustering Data: The Second Power of Indexing\u201c\n\n4.", "Joe Celko: \u201cDivided We Stand: The SQL of Relational Division\u201d\n\nRelational division is a very powerful concept in relational algebra.", "It answers questions like:\n\nGive me all the students that have completed a given set of courses\n\nUnfortunately, division doesn\u2019t have any direct equivalent in SQL.", "Read Markus\u2019s \u201cWe need tool support for keyset pagination\u201c\n\n8.", "From a technical perspective\u2026\n\n\u2026 you need to apply filtering, grouping, and ordering on a vast amount of data, skipping and throwing away all the data that appears before the offset until you reach the first row of interest.", "Markus Windand: \u201cWe need tool support for keyset pagination\u201d\n\nIf you think about OFFSET pagination, it\u2019s actually a rather dumb thing from a technical perspective, and a useless thing from a business perspective.", "Andr\u00e1s G\u00e1bor\u2019s \u201cTechniques for Pagination in SQL\u201d\n\nUp until recently, offset pagination has been rather difficult to implement in commercial databases like Oracle, SQL Server, DB2, Sybase, which didn\u2019t feature the equivalent of MySQL\u2019s / PostgreSQL\u2019s LIMIT ..", "Read Dimitri\u2019s: \u201cUnderstanding Window Functions\u201c\n\n5.", "Quassnoi) blogs about various interesting SQL-related things, but one of his top contributions every year are his \u201chappy new year\u201d series.", "Lukas Eder: \u201c10 Common Mistakes Java Developers Make when Writing SQL\u201d\n\nA bit of advertising for our own writing.", "Alex Bolenok: \u201cHappy New Year!\u201d\n\nAlek Bolenok (a.k.a."], "title": "10 SQL Articles Everyone Must Read"}, {"url": "http://blog.paralleluniverse.co/2014/02/13/web-spaceships/", "summary": ["Every spacehip is running its simulation in a fiber (lightweight thread) of its own, updating its location in an in-memory spatial database, and querying the database for its surroundings many times per second.", "To see how these web actors might be used in production, we have ported our spaceships demo from a standalone simulation to an MMO:\n\nThe code for this game is found here as part of the Comsat examples project.", "The client merely renders the graphics (in WebGL) and performs simple extrapolation of the server state to provide smoother animation; it also sends command to control the player\u2019s ship.", "So for public state, our game uses SpaceBase, our in-memory, concurrent spatial database.", "Every ship is an actor, running concurrently on its own fiber (lightweight thread).", "In the real world, I guess you could talk about private and public state.", "send ( new WebDataMessage ( self (), \"exit\" )); } break ; } } return null ; }\n\nThe web actor communicates with two other actors: one representing the client browser, and one for the player\u2019s spaceship.", "The client actor is passed to the ship actor\u2019s constructor, so that the ship can directly send messages to the client without going through the web actor.", "I\u2019d say it\u2019s hardly ever enough for any application: you also need public state.", "send ( new HttpResponse ( self (), ok ( msg , nameFormHtml ()))); else { // logged in - reply with the game page loginName = truncate ( loginName .", "get ( $y ); final double rng2 = dx * dx + dy * dy ; if ( rng2 > 100 & rng2 <= minRange2 ) { // not me and not too close minRange2 = rng2 ; nearestShip = s ; } } if ( nearestShip != null ) lockOnTarget ( nearestShip ); }\n\nAny attempt to store the state records and access them outside a transaction, will result in an immediate runtime exception.", "get ( $x ); final double dy = s .", "In our simulation, actors manage private state.", "It is very fast (about as fast as direct field access), but it allows us to protect a record instance with decorators like TransactionalRecord , that control access to the record\u2019s data.", "This is a fine approach, and the one used by Clojure atoms and agents.", "send ( msg ); // pipe messages from the client to the spaceship } else if ( message instanceof ExitMessage ) { ActorRef actor = (( ExitMessage ) message ).", "Part 1 \u2013 Communicating with the Real World\n\nWhen a new player first accesses the game\u2019s page, a new instance of this web actor will be created.", "There is also public state, which is what you can know about me without actively asking.", "getParameter ( \"name\" ); if ( loginName == null ) // not logged in - reply with the login page msg .", "The spaceship actor is used both for player spaceships and NPC ships; for NPCs, the client field is null .", "getFrom (); watch ( client ); } else if ( message instanceof WebDataMessage ) { WebDataMessage msg = ( WebDataMessage ) message ; if ( spaceship == null ) { spaceship = spaceships .", "For example, when an NPC spaceship is searching for targets, it performs this query that returns the public state records of the ships that are in our radar range:\n\ntry ( ResultSet < Record < SpaceshipState >> rs = global .", "In addition to fiber-based, standard API implementations, Comsat includes an optional API called Web Actors, that lets you write interactive web applications using the actor model.", "Transactions (including queries), provide instantaneus (in virtual time) access to shared public state.", "spawnControlledSpaceship ( client , \"c.\" + loginName ); if ( spaceship == null ) // too many players break ; watch ( spaceship ); } if ( msg .", "Instead, this short post will give a broad overview of the game architecture in two parts: the first will discuss how the client-server communication is done using Web Actors, and the second will discuss some core aspects of the simulation architecture.", "We didn\u2019t use any HTML template libraries or any JSON marshalling libraries because for our game, both the little HTML we needed, and whatever JSON messages we used were trivial; of course in your own application you might decide to make use of either."], "title": "Parallel Universe"}, {"url": "http://blog.paralleluniverse.co/2014/02/20/reactive/", "summary": ["println ( \"=> \" + ( m + x .", "Conclusion\n\nWe\u2019ve seen how reactive programming helps tackle concurrency by isolating the computations from any concerns of when their input data arrives, and how both functional and imperative code can make use of reactive programming.", "newChannel ( 1 , Channels .", "join ();\n\nJust for fun, the first fiber subscribes a regular generic channel to the topic, while the second subscribes a primitive int channel.", "start (); new Fiber (() -> { ReceivePort < String > c = Channels .", "This imperative-reactive style, based on channels and lightweight threads, is also called Communicating Sequential Processes (CSP).", "DelayedVals are very similar to Clojure promises, so in Pulsar, DelayedVals are defined with the co.paralleluniverse.pulsar.core/promise function, which follows the same API as clojure.core/promise , only it supports fibers as well as threads.", "The fiber could also be written like this (propagating errors and closing the output channel are handled for us):\n\nChannels .", "To do that, we\u2019ll use topics.", "start (); Channel < Double > avg = Channels .", "DelayedVals and Promises\n\nThe first reactive construct used by Quasar is the DelayedVal .", "Here\u2019s an example in Clojure:\n\n( use 'co.paralleluniverse.pulsar.core ) ( let [ v1 ( promise ) v2 ( promise ) v3 ( promise ) v4 ( promise ) f1 ( spawn-fiber # ( deliver v2 ( + @ v1 1 ))) t1 ( spawn-thread # ( deliver v3 ( + @ v1 @ v2 ))) f2 ( spawn-fiber # ( deliver v4 ( + @ v3 @ v2 )))] ( sleep 50 ) ( deliver v1 1 ) @ v4 ) ; => 5\n\nNotice how this Clojure example uses fibers as well as regular threads.", "println ( \"Producer error: \" + e .", "Quasar\u2019s reactive constructs achive their simplicity and performance first and foremost through the use of fibers, which are true lightweight threads.", "But before we go on to show how reactive programming is used, it\u2019s important to clarify what problem it solves.", "receive (); if ( v == null ) break ; if ( i ++ % 5 == 0 ) out .", "Here\u2019s the complete Java example (Clojure code would be similar):\n\nfinal int PORT = 1234 ; DoubleChannel t = Channels .", "In this blog post we\u2019ll explore how JVM lightweight threads, combined with reactive constructs, let us work with asynchronous data using Quasar and its Clojure API, Pulsar.", "Note how the first fiber simply reads x and y , even though their values are set by two different fibers at two different times.", "setVisible ( true ); } }); // Now we get to the reactive stuff: Channel < Integer > t = Channels .", "While we can\u2019t directly read DelayedVals or channels on the UI thread, we can actually do something better: we can schedule fibers to execute on the UI thread.", "DISPLACE ); DelayedVal < String > x = new DelayedVal <>(); // publish lots of numbers: new Fiber (() -> { for ( int i = 0 ; i < 100000 ; i ++) { Strand .", "println ( \"-> \" + x ); } } catch ( ProducerException e ) { System .", "Propagating errors\n\nBefore we move on to the functional style, let\u2019s take a look at a slightly more complex example.", "The result is that the second fiber simply processes fewer values.", "println ( \"x + y = \" + ( x .", "start (); new Fiber ( UIScheduler , () -> { ReceivePort < Integer > c = Channels .", "read ( buf ); // blocks the fiber (but not the OS thread) assert n == 8 ; // we assume the message is sent in a single packet buf .", "receive ()) != null ) { // we block until x is available (in 5 seconds), even though we're on the UI thread label2 .", "start ();\n\nFirst, notice how the first fiber uses the familiar Java NIO API, except that the blocking reads simply block the fiber rather than the OS thread (this is accomplished by using asynchronous IO under the covers).", "start (); // This fiber prints out the running average new Fiber (() -> { try { for (;;) { Double x = avg .", "core.async is a Clojure-only reactive programming library modelled after Go channels, which supports both functional and imperative styles.", "setText ( \"bar: \" + num + x .", "start ();\n\nWhile the first fiber consumes the values as they are published by the topic, the second transforms the integer channel into a string channel using map .", "DISPLACE ); // This fiber reads values off a socket and sends them to the ticker channel, t new Fiber (() -> { try ( FiberServerSocketChannel socket = FiberServerSocketChannel .", "invokeLater ( command ); } }); // set text for the first label new Fiber ( UIScheduler , () -> { ReceivePort < Integer > c = Channels .", "Here\u2019s the exact same example in Clojure (remember, we\u2019re still using the imperative style):\n\n( use 'co.paralleluniverse.pulsar.core ) ( import 'co.paralleluniverse.strands.channels.ReceivePort$EOFException ) ( let [ x ( promise ) t ( topic ) f1 ( spawn-fiber ( fn [] ( let [ c ( subscribe!", "filter ( x -> x % 2 != 0 ) .", "println ( \"==> \" + x ); } } catch ( ProducerException e ) { System .", "send ( v ); } });\n\nOr even emits a ticker channel\u2019s values more slowly:\n\nChannel < Integer > polled = newChannel ( 0 ); Channels .", "newChannel ( 0 )), ( Integer x ) -> \"my number is: \" + x ); // transform the channel for ( String m ; ( m = c .", "Quasar channels (modelled after Go channels) can be used to represent a sequence of changing values, with each message sent to the channel corresponding to an update event.", "Here\u2019s a simple Java example using the map operator:\n\nTopic < Integer > t = new Topic <>(); new Fiber (() -> { for ( int i = 0 ; i < 10 ; i ++) { Strand .", "nCopies ( 3 , x ))), ( num , letter ) -> \"letter: \" + letter + \" number: \" + num ); for ( String m ; ( m = c .", "So to demonstrate reactive UI, we\u2019ll use Swing:\n\npublic static void main ( String [] args ) throws Exception { // first, let's create the Swing UI: final JFrame frame = new JFrame ( \"Reactive Window\" ); // a window frame .", "start (); // This fiber prints out the raw values new Fiber (() -> { try { ReceivePort < Double > c = Channels .", "A ticker channel may have multiple consumers, each maintaining their own position in the buffer.", "This is a common-enough pattern that we\u2019ve added a simpler API for that (also, just for fun, lets use the new Java 8 stream API to calculate the average).", "Imperative code can also be used to write new functional stateful operators.", "We also don\u2019t care if some of the values are lost to the average computation because we want an approximate average, but we don\u2019t want a slow computation to slow down the flow, so we\u2019ll use a ticker channel.", "start (); new Fiber (() -> { ReceivePort < Integer > c = t .", "When talking about parallelism (sometimes better described as data parallelism), the various software and hardware threads cooperate to solve the problem at hand.", "t ))) ( join [ f1 f2 ]))\n\nThe second fiber takes its time, and sleeps for 500ms between channel reads.", "Sometimes people are forced to use the functional style to avoid blocking, but because lightweight threads make blocking cheap, we can choose the right tool for the job.", "start (); // We'll make x available only 5 seconds from now: new Fiber (() -> { Strand .", "newTickerConsumerFor ( t ); for (;;) { Double x = c .", "newChannel ( 0 )); // a regular channel with no internal buffer for ( Integer m ; ( m = c .", "start ();\n\nRunning this code will print x + y = 15.", "Another may be one that simply polls every fifth value:\n\nChannel < Integer > polled = newChannel ( 0 ); Channels .", "It treats the topic channels as a kind of changing quantities that it can transform without regard to concurrency concerns at all.", "start ();\n\nFunctional reactive programming often makes manipulation and composition of asynchronous data simple and clear.", "The two producer fibers emit a sequence of numbers and the letters of the alphabet on two different topics, at different rates.", "println ( \"x + y = \" + z .", "t ( channel 0 ))] ( loop [] ( when-let [ m ( rcv c )] ( println \"=>\" ( + m @ x )) ( recur )))))) f2 ( spawn-fiber ( fn [] ( let [ c ( subscribe!", "Tags: quasar, pulsar", "newDoubleChannel ( 100 , Channels .", "If it has not been set, the strand (fiber or thread) trying to read it will block until the value is available (if it sounds like a future, that\u2019s because it is; DelayedVal implements the Future interface).", "* new Fiber (() -> { ReceivePort < String > c = zip ( transform ( numbers .", "Quasar and Pulsar also have a rich and very Erlang-like distributed actor system; Quasar fibers provide extremely scalable blocking IO operations, useful in themselves even without reactive programming; Comsat uses Quasar fibers and fiber-blocking IO to scale JVM web applications, while keeping the same familiar, standard APIs.", "start (); // also, t changes from time to time new Fiber (() -> { for ( int i = 0 ; i < 10 ; i ++) { Strand .", "add ( panel ); final JLabel label1 = new JLabel (); // label 1 final JLabel label2 = new JLabel (); // label 2 label1 .", "start (); // some time in the future, we'll set x new Fiber (() -> { Strand .", "However, FRP relies on functional operators that at times may be cumbersome, and sometimes, if the right operator is missing, writing your own might be hard without knowing the details of how concurrency is treated, especially if the operator has internal state.", "newChannel ( 10 ); // This fiber computes a sliding-window running average, and publishes the results to channel avg final int WINDOW_SIZE = 10 ; new Fiber (() -> { try { DoubleReceivePort c = Channels .", "If you want to automate recovery from errors, you might want to consider using Quasar actors, which add powerful fault-tolerance capabilities (actors can read and write to channels just like any fiber can).", "To make the Java code more concise, we\u2019ll use Java 8 lambdas (supported by the current dev version of Quasar, 0.5.0-SNAPSHOT), but they work equally well with the familiar Java anonymous classes.", "You\u2019d think that we can\u2019t directly use imperative reactive programming as we\u2019ve done so far on the UI thread because we\u2019re not allowed to block the UI thread.", "start (); // Now let's create a fiber scheduler that runs fibers on the UI thread FiberScheduler UIScheduler = new FiberExecutorScheduler ( \"UI-fiber-scheduler\" , new Executor () { @Override public void execute ( Runnable command ) { EventQueue .", "To do that, we need to better define two concepts that can sometimes be used interchangeably: parallelism and concurrency.", "When dealing with concurrent computations, it is often beneficial to use multiple processing cores as well, only in that case, the various software and hardware threads compete with each other over system resources rather than cooperate.", "We\u2019ve also shown examples of the reactive constructs provided by Quasar and Pulsar, and how they can be used."], "title": "Parallel Universe"}, {"url": "http://blog.paralleluniverse.co/2014/05/01/modern-java/", "summary": ["Next, let\u2019s try the units type system, supposed to prevent unit conversion errors:\n\npackage jmodern ; import org.checkerframework.checker.units.qual.", "nextInt ( 30 ) == 0 ) throw new RuntimeException ( \"darn\" ); checkCodeSwap (); // this is a convenient time for a code swap } } } static class NaiveActor extends BasicActor < Void , Void > { private ActorRef < String > myBadActor ; public NaiveActor ( String name ) { super ( name ); } @Override protected Void doRun () throws InterruptedException , SuspendExecution { spawnBadActor (); int count = 0 ; for (;;) { receive ( 500 , TimeUnit .", "start (); new Fiber < Void >(() -> { for ( int i = 0 ; i < 10 ; i ++) { Strand .", "forEach (( letter , names ) -> System .", "First, let\u2019s modify build.gradle a bit.", "forName ( \"UTF-8\" ); public static void main ( String [] args ) throws Exception { new Fiber (() -> { try { System .", "\"Got a string: \" + x : \"ch2 closed\" ))); }\n\nNow let\u2019s try some high-performance IO with fibers:\n\npackage jmodern ; import co.paralleluniverse.fibers.", "\"Got a string: \" + ( String ) sa .", "And yet, in recent years, the Java programming language has gained some noteriety as well, especially among web startups.", "println ( x != null ?", "\"Got a number: \" + x : \"ch1 closed\" )), receive ( ch2 , x -> System .", "But the modern Java developer likes Markdown, and would like to write spice up their Javadoc with Markdown.", "That\u2019s precisely the approach taken by Erlang and (much later) Go: lightweight, user-mode threads.", "println ( \"I am a lowly, but improved, actor that still sometimes fails: - \" + ( count ++)); if ( ThreadLocalRandom .", "foo ( x ) : - 1 ; }\n\nEven though FooBar has two methods, only one of them ( foo ) is abstract, so it is still a functional interface, and can be created with a lambda expression.", "To test our setup, let\u2019s add a fancy Markdown Javadoc to a method called randomString (which we\u2019ll write in the next section):\n\n/** * ## The Random String Generator * * This method doesn't do much, except for generating a random string.", "println ( \"Got a message: \" + m ); System .", "To see how much lambda expressions help, I took the most infuriatingly verbose, simple data manipulation example I could think of, and wrote it in Java 8.", "The last line says that we would like to use Checker\u2019s nullness type system, the physical units type system, and the tainted data type system.", "So let\u2019s create a new modern Java project with Gradle.", "For example, the call:\n\nuseFooBar ( 3 , x -> x * x )\n\nwill return 9.", "Those allow mapping domain concurrency (like number of concurrent users) directly to program concurrency (lightweight threads).", "First, create a subdirectory under the project\u2019s directory, which we\u2019ll call modules .", "println ( \"Starting server\" ); FiberServerSocketChannel socket = FiberServerSocketChannel .", "asType ( List ) // gradle should relly make this simpler doclet = \"ch.raffael.doclets.pegdown.PegdownDoclet\" addStringOption ( \"parse-timeout\" , \"10\" ) }\n\nNow we can use Markdown in our Javadoc comments, complete with syntax highlighting!", "In Linux/Mac:\n\ncp build/libs/jmodern.jar modules\n\nYou\u2019ll see the running program changing (depending on your OS, this can take up to 10 seconds).", "send ( \"hi from \" + self () + \" number \" + ( count ++)); } } private void spawnBadActor () { myBadActor = new BadActor ().", "newChannel ( 0 ); final Channel < String > ch2 = Channels .", "Here\u2019s how our little project looks in NetBeans, after installing the Gradle plugin:\n\nWhat I like best about NetBeans\u2019 Gradle support is that the IDE takes not only the project dependencies from the build file, but all other configurations as well, so we only need to specify them once \u2013 in the build file.", "*; public class Main { public static void main ( String [] args ) throws Exception { final Channel < Integer > ch1 = Channels .", "start (); new Fiber < Void >(() -> { Integer x ; while (( x = ch .", "getCause () + \"'.", "We will explore the JVM\u2019s manageabity in part 2 of this guide, but now we\u2019ll play with actor hot code swapping.", "} run { systemProperty 'jmodern.name' , 'Jack' }\n\nThe build file sets jmodern.Main as the main class, it declares Guava as a dependency, and sets the value of the jmodern.name system property, which we read in our program.", "The language recently acquired lambda expression and traits; libraries provide it with true lightweight threads \u2013 just like Erlang\u2019s and Go\u2019s.", "MAX_VALUE ); } static class BadActor extends BasicActor < String , Void > { private int count ; @Override protected Void doRun () throws InterruptedException , SuspendExecution { System .", "First, let\u2019s try the nullability type system, which is supposed to prevent null pointer exceptions:\n\npackage jmodern ; import org.checkerframework.checker.nullness.qual.", "range ; public class Main { public static void main ( String [] args ) { // generate a list of 100 random names List < String > students = range ( 0 , 100 ).", "If you\u2019re adding new dependencies to the build file while the project is open in NetBeans, you\u2019ll want to right-click the project and select \u201cReload Project\u201d, so that NetBeans can download the dependencies.", "start (); new Fiber < Void >(() -> { for ( int i = 0 ; i < 10 ; i ++) { SelectAction < Object > sa = select ( receive ( ch1 ), receive ( ch2 )); switch ( sa .", "nextInt ( 100 ) == 0 ) throw new RuntimeException ( \"darn\" ); checkCodeSwap (); // this is a convenient time for a code swap } } }\n\nWe add the @Upgrade annotation because that\u2019s the class we want to upgrade, and modify the code so that now the actor fails less often.", "mapToObj ( i -> randomString ( new Random (), 'A' , 'Z' , 10 )).", "collect ( toList ()); // sort names and group by the first letter Map < Character , List < String >> directory = students .", "Checker isn\u2019t ready for primetime yet, but when it is, if used wisely, it could become one of the modern Java developer\u2019s most powerful tools.", "println ( \"(re)starting actor\" ); for (;;) { String m = receive ( 300 , TimeUnit .", "Let\u2019s try Erlang.", "I haven\u2019t been able to get Checker to work well with NetBeans, so for this section, we\u2019ll continue without our IDE.", "fork = true options .", "In particular, we are yet to see Java\u2019s awesome monitoring and profiling tools, or its new, lean, web microframeworks.", "join (); // join waits for this fiber to finish } }\n\nStarting with Quasar 0.6.0 (in development), you can use lambda expressions directly in the select statement (to try this at home, you\u2019ll need to change Quasar\u2019s version in the build file from 0.5.0 to 0.6.0-SNAPSHOT and add maven { url \"https://oss.sonatype.org/content/repositories/snapshots\" } to the repositories section), so the code running in the last fiber could also be written so:\n\nfor ( int i = 0 ; i < 10 ; i ++) { select ( receive ( ch1 , x -> System .", "Before we start playing with actors, we\u2019ll need to add this dependency to the dependencies section in the build file: compile \"co.paralleluniverse:quasar-actors:0.5.0\" .", "repeat ( str , 3 ); } }\n\nLet\u2019s also create a small unit-test suite in src/test/java/jmodern/MainTest.java :\n\npackage jmodern ; import static org .", "Simple Lightweight Concurrency with Fibers\n\nFor people like me, who are interested in concurrent data structures, the JVM is paradise.", "The Checker framework is a library that allows (advanced) developers write their own pluggable type systems, complete with inheritence, type inference and more.", "Our doc will look like this:\n\nI don\u2019t use markdown in comments often, as they don\u2019t render well in IDEs.", "println ( \"I am but a lowly actor that sometimes fails: - \" + ( count ++)); if ( ThreadLocalRandom .", "For those unfamiliar with Java, JAR (Java Archive) files are used to package Java modules (we\u2019ll discuss modern Java packaging and deployment in part 2).", "Finally, let\u2019s try the tainting type system, which helps you track tainted (potentially dangerous) data obtained, say, as a user input:\n\npackage jmodern ; import org.checkerframework.checker.tainting.qual.", "collect ( joining ( \"\n\n\\t\" )))); } public static String randomString ( Random r , char from , char to , int length ) { return r .", "\"Got a number: \" + ( int ) sa .", "* ; public class Main { static final int PORT = 1234 ; static final Charset charset = Charset .", "Well, I don\u2019t have an opinion about that, but having a good IDE always helps, regardless of the programming language you\u2019re using, and Java\u2019s got the best around.", "*; import static java .", "These optional type systems, that can be turned on and off, can add powerful type-based static verification to Java code.", "While the program is running, let\u2019s go back to the editor, and modify our BadActor class a bit:\n\n@Upgrade static class BadActor extends BasicActor < String , Void > { private int count ; @Override protected Void doRun () throws InterruptedException , SuspendExecution { System .", "println ( letter + \"\n\n\\t\" + names .", "Now let\u2019s rewrite our Main class yet again, this time the code is more complicated as we want our app to be fault tolerant:\n\npackage jmodern ; import co.paralleluniverse.actors.", "Strand.sleep , and all of the Strand class\u2019s methods, work equally well whether we run our code in a fiber or a plain Java thread.", "newChannel ( 0 ); new Fiber < Void >(() -> { for ( int i = 0 ; i < 10 ; i ++) { Strand .", "One of the potentially most powerful (and probably least discussed) new features in Java 8, is type annotations and pluggable type systems.", "MILLISECONDS ); if ( m != null ) System .", "The Java Development Kit, or the JDK, is a version of the JRE that includes development tools like javac , the Java compiler, and various monitoring and profiling tools.", "Nevertheless, the JVM is so mature, well-tested, fast, flexible, and allows for such detailed runtime profiling and monitoring, that I wouldn\u2019t consider running a critical, non-trivial server process on anything else.", "index ()) { case 0 : System .", "* ; import co.paralleluniverse.strands.Strand ; import java.util.Objects ; import java.util.concurrent.ThreadLocalRandom ; import java.util.concurrent.TimeUnit ; public class Main { public static void main ( String [] args ) throws Exception { new NaiveActor ( \"naive\" ).", "Merge the following into build.gradle :\n\nconfigurations { quasar } dependencies { compile \"co.paralleluniverse:quasar-core:0.5.0:jdk8\" quasar \"co.paralleluniverse:quasar-core:0.5.0:jdk8\" } run { jvmArgs \"-javaagent:${configurations.quasar.iterator().next()}\" // gradle should make this simpler, too }\n\nThis will be our new Main.java (if you\u2019re using NetBeans, you\u2019ll want to right-click the project and select \u201cReload Project\u201d after adding the new dependencies):\n\npackage jmodern ; import co.paralleluniverse.fibers.Fiber ; import co.paralleluniverse.strands.Strand ; import co.paralleluniverse.strands.channels.Channel ; import co.paralleluniverse.strands.channels.Channels ; public class Main { public static void main ( String [] args ) throws Exception { final Channel < Integer > ch = Channels .", "Wrapping Up (For Now)\n\nWe\u2019ve seen how with the changes made in Java 8, along with modern tools and libraries, Java bears little resemblance to the Java of old.", "Gradle is a mature, heavily developed, modern Java build tool, that uses a DSL built on top of the Groovy language to specify the build process.", "parseInt ( s ); // apparently the JDK libraries aren't annotated with @PolyTainted } static void process ( @Untainted int data ) { System .", "Use your favorite text editor to create src/main/java/jmodern/Main.java , which will initially consist of this code:\n\npackage jmodern ; import com.google.common.base.Strings ; public class Main { public static void main ( String [] args ) { System .", "If we wanted to go a little crazier with the functional style, we could write the main method like so:\n\npublic static void main ( String [] args ) { range ( 0 , 100 ) .", "mapToObj ( i -> randomString ( new Random (), 'A' , 'Z' , 10 )) .", "Then, we\u2019ll put this somewhere in the build file:\n\ncompileJava { options .", "It also offers dynamic runtime-linking of all code, hot code swapping, and monitoring of pretty much everything that\u2019s going on in the JVM itself, and in the Java libraries.", "message () : \"ch1 closed\" ); break ; case 1 : System .", "* ; public class Main { public static void main ( String [] args ) { String str1 = \"hi\" ; foo ( str1 ); // we know str1 to be non-null String str2 = System ."], "title": "Parallel Universe"}, {"url": "http://blog.paralleluniverse.co/2014/05/08/modern-java-pt2/", "summary": ["Not only that: the JVM gives us the ability to transform, and re-transform, already running code.", "Let\u2019s try:\n\njcmd jmodern.Main Thread.print\n\nThis will print out the current stack trace for all threads running in the JVM.", "Now, run:\n\njcmd jmodern.Main help\n\nYou will see a list of jcmd commands that the particular JVM process supports.", "JMX (Java Management Extensions), is a runtime management and monitoring standard.", "This is our build.gradle file:\n\napply plugin: 'java' apply plugin: 'application' sourceCompatibility = '1.8' mainClassName = 'jmodern.Main' repositories { mavenCentral () } configurations { quasar } dependencies { compile \"co.paralleluniverse:quasar-core:0.5.0:jdk8\" compile \"co.paralleluniverse:quasar-actors:0.5.0\" quasar \"co.paralleluniverse:quasar-core:0.5.0:jdk8\" testCompile 'junit:junit:4.11' } run { jvmArgs \"-javaagent:${configurations.quasar.iterator().next()}\" }\n\nand here\u2019s our jmodern.Main class:\n\npackage jmodern ; import co.paralleluniverse.fibers.Fiber ; import co.paralleluniverse.strands.Strand ; import co.paralleluniverse.strands.channels.Channel ; import co.paralleluniverse.strands.channels.Channels ; public class Main { public static void main ( String [] args ) throws Exception { final Channel < Integer > ch = Channels .", "start (); new Fiber < Void >(() -> { Integer x ; while (( x = ch .", "start (); // starts reporting via JMX final Channel < Object > ch = Channels .", "If you need logging, use SLF4J as the logging API, period.", "We\u2019ll use Byteman to insert that log while the program is running.", "warn ( \"Sent {} messages\" , i + 1 ); // log something } ch .", "receive ()) != null ) System .", "nanoTime (); while (( x = ch .", "newChannel ( 0 ); new Fiber < Void >(() -> { Meter meter = metrics .", "next () + + \" ${getDependencies(configurations.jolokia).iterator().next()}=port=7777,host=localhost\" ,\n\nRun the application with gradle run , or with the capsule ( gradle capsule; java -jar build/libs/jmodern-capsule.jar ), and point your browser at http://localhost:7777/jolokia/version .", "As we mentioned in part 1, one of the JVM\u2019s most powerful features is the ability to dynamically load code at runtime (which goes far beyond loading dynamic libraries in native applications).", "class ); public static void main ( String [] args ) throws Exception { final Channel < Integer > ch = Channels .", "A nice project called jmxterm, provides a CLI for JMX MBeans.", "join ( ' ' ), // copy JVM args from the run task 'System-Properties' : run .", "Here\u2019s a screenshot of some advanced monitoring information provided by VisualVM\u2019s traces plugins:\n\nA modern Java developer might sometimes prefer a CLI to a nice GUI.", "In this post we\u2019ve covered some of the best tools for JVM management, monitoring and profiling.", "With our app running in one terminal, run jvisualvm (included as part of the JDK) in another.", "next (), 'Dependencies' : getDependencies ( configurations .", "Monitoring and Management with jcmd and jstat\n\nThe JDK includes several command line monitoring and management tools, but here we\u2019ll only shortly cover a couple: jcmd and jstat.", "Byteman allows us to inject tracing, debugging and profiling code into a running application.", "We can now change the logging level at runtime via the JMX MBean.", "We also want to have Jolokia in our capsule, so we\u2019ll change the Java-Agents attribute in capsule task to read:\n\n'Java-Agents' : getDependencies ( configurations .", "Here\u2019s another example, this one also reports the time spent garbage-collecting, and gives a crude method stack profile:\n\npackage jmodern ; import java.util.", "In another terminal, let\u2019s fire up Mission Control with the jmc command.", "longBitsToDouble ( i ); x = x * ( 1.5d - xhalf * x * x ); return x ; } }\n\nBy the way, like the Checker framework we discussed in part 1, JMH uses an annotation processor.", "class , \"messages\" , \"received\" )); Timer timer = metrics .", "join ( ' ' ), // copy system properties 'Java-Agents' : configurations .", "The app uses Project Avatar, which allows running Node.js-like JavaScript applications on the JVM.", "The one used in the heap plot, for example, is found under java.lang/Memory (double-click the attribute value in order to expand it):\n\nNow let\u2019s pick the java.util.logging/Logging MBean.", "start (); new Fiber < Void >(() -> { Object x ; while (( x = ch .", "get (); } }, new ObjectName ( \"jmodern:type=Info\" )); new Fiber < Void >(() -> { for ( int i = 0 ; i < 100000 ; i ++) { Strand .", "newChannel ( 0 ); new Fiber < Void >(() -> { for ( int i = 0 ; i < 100000 ; i ++) { Strand .", "In the meantime, Capsule is a lean, and quite satisfactory solution for modern Java packaging and deployment.", "sleep ( pause ); return \"aaa\" + pause ; } }\n\nfoo simulates calling a service which may take some unknown time to complete.", "join ( ',' ) + \")\" } return res } }\n\nThen we\u2019ll change the capsule task in the build file to read:\n\ntask capsule ( type: Jar , dependsOn: classes ) { archiveName = \"jmodern-capsule.jar\" from sourceSets .", "What we want is a simple, lightweight, fire-and-forget packaging and deployment tool for server-side code.", "NANOSECONDS ) public class Benchmark { public static void main ( String [] args ) throws Exception { new Runner ( new OptionsBuilder () .", "Finally, because this post is applicable to any JVM language, here\u2019s a tiny project packaging a Node.js app in a capsule.", "join ( ' ' ), 'Java-Agents' : getDependencies ( configurations .", "println ( \"Calling foo\" ); foo ( i ); } } private static String foo ( int x ) throws InterruptedException { long pause = ThreadLocalRandom .", "start (); new Fiber < Void >(() -> { Counter counter = metrics .", "We will just be reporting to JMX (although we\u2019ll see Metrics\u2019s HTTP reporting in part 3, when we discuss Dropwizard).", "class ); public static void main ( String [] args ) throws Exception { final AtomicInteger counter = new AtomicInteger (); final Channel < Object > ch = Channels .", "It\u2019s made of two components, The first, Java Flight Recorder is baked into the HotSpot VM.", "Java libraries are packaged into JARs, and then deployed into Maven repositories (those are used by practically all JVM build tools \u2013 not just Maven).", "class , \"messages\" , \"duration\" )); Object x ; long lastReceived = System .", "You can even easily add your own Byteman actions (say, if you want to log events using your logging engine).", "Once you use SLF4J, you can leave the choice of a logging engine for later (you can even pick an engine at deployment time).", "When launched (with a simple java -jar app.jar ), the capsule will do all or some of the following: extract the JAR into a cache directory, download and cache Maven dependencies, find an appropriate JVM installation, and configure and run the application in a new JVM process.", "Now try:\n\njcmd jmodern.Main PerfCounter.print\n\nThis will print out a long list of various JVM performance counters (you\u2019ll have to Google for their meaning).", "exclude group: \"org.apache.logging.log4j\" , module: \"*\"\n\nFinally, we\u2019ll add some logging to our code:\n\npackage jmodern ; import co.paralleluniverse.fibers.Fiber ; import co.paralleluniverse.strands.Strand ; import co.paralleluniverse.strands.channels.Channel ; import co.paralleluniverse.strands.channels.Channels ; import org.slf4j.Logger ; import org.slf4j.LoggerFactory ; public class Main { static final Logger log = LoggerFactory .", "Let\u2019s add logging to our app.", "We\u2019ve also introduced Capsule, a lightweight, single-file, stateless, installation-free deployment package for JVM apps.", "Also, the unit test example used Hamcrest matchers.", "In another terminal window, run jcmd .", "But, as we\u2019ll see in part 3 of this post series, as far as modern Java is concerned, Java application servers are dead.", "info ( \"Sending {}\" , i ); // log something ch .", "I wrote, \u201cthe modern Java developer uses Gradle\u201d.", "To learn more about what each means, see the jstat documentation.", "registerMBean ( new JModernInfo () { @Override public void send ( String message ) { try { ch .", "log ( \"Server running at http://127.0.0.1:8000/\" );\n\nAnd two Gradle build files.", "Writing Your Own MBeans\n\nWriting and registering your own MBeans is easy:\n\npackage jmodern ; import co.paralleluniverse.fibers.Fiber ; import co.paralleluniverse.strands.Strand ; import co.paralleluniverse.strands.channels.", "We\u2019ll add the following to the bottom of our build file:\n\ntask capsule ( type: Jar , dependsOn: jar ) { archiveName = \"jmodern-capsule.jar\" from jar // embed our application jar from { configurations .", "The modern Java developer, then, might prefer Maven to Gradle.", "* ; import java.lang.management.ManagementFactory ; import java.util.concurrent.atomic.AtomicInteger ; import javax.management.MXBean ; import javax.management.ObjectName ; import org.slf4j.Logger ; import org.slf4j.LoggerFactory ; public class Main { static final Logger log = LoggerFactory .", "Here for example, is what happens in NetBeans if you forget to include the @State annotation:\n\nTo run the benchmarks, type gradle bench at the shell.", "inc (); double y = foo ( x ); System .", "join (); // join waits for this fiber to finish } }\n\nIn this example we\u2019ve used a Metrics counter (which counts things), a meter (measures rate of events) and a timer (produces a histogram of time durations).", "SLF4J chooses a logging engine at runtime, based on whatever relevant JARs are included as dependencies.", "If you package an application (as opposed to a library) in a JAR, the manifest can point to the app\u2019s main class, in which case the application can be launched with the command java -jar app.jar ; that\u2019s called an executable JAR.", "Another project by JBoss, called hawtio uses the Jolokia HTTP API to construct a full featured, browser-based monitoring and manangement console for JVM applications.", "newChannel ( 0 ); new Fiber < Void >(() -> { for ( int i = 0 ; i < 10 ; i ++) { Strand .", "In order to play with them, we\u2019re going to have to make our app not terminate so quickly, so change the for loop limit in the first fiber from 10 to, say, 1000000 , and run it in a terminal with gradle run .", "join (); // join waits for this fiber to finish } }\n\nIf you now run the app ( gradle run ), you\u2019ll see the log statements printed to the standard output (that\u2019s the default; we\u2019re not going to get into configuring log files \u2013 refer to your logging engine docs for that).", "join (); // join waits for this fiber to finish } }\n\nTo test if our program is working correctly, we\u2019ll try a gradle run .", "class ) // report method stack execution profile .", "runtimeClasspath // we'll put jmodern.Benchamrk in the test directory main = \"jmodern.Benchmark\" ; }\n\nFinally, we\u2019ll put our benchmark code in src/test/java/jmodern/Benchmark.java .", "In this post, we\u2019ll go beyond the code to discuss Java operations, namely deployment, monitoring and management, profiling and benchmarking.", "We\u2019ve also seen how powerful the JVM is when it comes to modifying running code with tools like Byteman.", "receive ()) != null ) { final long now = System .", "There\u2019s is no point in benchmarking two algorithms or data structures to find out that one is 100 times faster than the other, if the algorithm accounts for a grand total of 1% of your app\u2019s execution time.", "This will be our main class:\n\npackage jmodern ; import java.util.concurrent.ThreadLocalRandom ; public class Main { public static void main ( String [] args ) throws Exception { for ( int i = 0 ;; i ++) { System .", "The second tool is Java Mission Control (or JMC), which is included in the JDK installation.", "The logging level can be set in the log configuration (which, again, we\u2019re not going to do now), or at runtime, as we\u2019ll soon see.", "*; public class Main { public static void main ( String [] args ) throws Exception { final MetricRegistry metrics = new MetricRegistry (); JmxReporter .", "JMX specifies simple Java objects, called MBeans, that expose monitoring and management operations of the JVM itself, the JDK libraries, and any JVM application.", "This will be our new Main class:\n\npackage jmodern ; import co.paralleluniverse.fibers.Fiber ; import co.paralleluniverse.strands.Strand ; import co.paralleluniverse.strands.channels.", "Advanced Topic: Benchmarking with JMH\n\nAdvances in both hardware architecture as well as compiler technology have made benchmarking the only viable way to reason about code performance.", "class ) // report GC time .", "In part 1 we presented new Java language features, libraries and tools, that make Java into a much more lightweight development environment: new build tools, easier docs, expressive code and lightweight concurrency.", "In fact, jcmd gets much of its information with JMX.", "In the build file, we\u2019ll add a capsule configuration.", "It turns out that the most contentious recommendation I made in part 1 was the build tool."], "title": "Parallel Universe"}, {"url": "http://blog.paralleluniverse.co/2014/05/15/modern-java-pt3/", "summary": ["class ); try ( Handle h = dbi .", "To test our new service, start up our application ( gradle run , remember) and point your browser at http://localhost:8080/consumer.", "We\u2019ll now write our first modern Java web service with Dropwizard.", "format ( \"The service is saying: %s (id: %d)\" , saying .", "This will be our domain object (full code listing is here)\n\npublic static class Something { @JsonProperty public final int id ; @JsonProperty public final String name ; public Something ( int id , String name ) { this .", "Using JDBC directly is often better, but perhaps the best approach is to use one of the tools we will now present.", "It is a rare occurrence in computer science \u2013 usually full of tradeoffs and caveats \u2013 that one approach almost always beats another, but this is one: asynchronous code has many disadvantages and absolutely zero advantages relative to synchronous code.", "The answer is simple: performance.", "We\u2019ll even get a bit tricker, by mapping table rows to Java objects.", "register ( new ConsumerResource ( feignBuilder ));\n\nOur consumer service will now look like this:\n\n@Path ( \"/consumer\" ) @Produces ( MediaType .", "execute ()); } } @Timed @POST @Path ( \"/add\" ) public Something add ( String name ) throws SQLException { try ( Connection conn = ds .", "findById ( id ); } @Timed @GET @Path ( \"/all\" ) public List < Something > all ( @PathParam ( \"id\" ) Integer id ) { return dao .", "createStatement ( \"insert into something (name) values (:name)\" ).", "This is the service:\n\n@Path ( \"/hello-world\" ) @Produces ( MediaType .", "Lightweight (or user-level) threads \u2013 used in Erlang, Go, or on the JVM via the Quasar library \u2013 let you use simple, blocking APIs, without any of their performance issues.", "build ( env , cfg .", "class ); return find ( id ); } } @Timed @GET @Path ( \"/item/{id}\" ) public Something find ( @PathParam ( \"id\" ) Integer id ) throws SQLException { try ( Connection conn = ds .", "Unfortunately, Retrofit uses the same annotation names as JAX-RS (server), only defined in a different package, which would make our example a bit ugly.", "We\u2019ll not get into detail here, but using nonblocking APIs in such languages requires great discipline, and a clear understanding of complex concurrency issues.", "run ( new String []{ \"server\" , System .", "queryParam ( \"name\" , \"consumer\" ).", "class , \"http://localhost:8080\" ); } @Timed @GET public String consume () { Saying saying = hellowWorld .", "format ( template , name .", "APPLICATION_JSON ) public static class DBResource { private final DataSource ds ; private static final RecordMapper < Record , Something > toSomething = record -> new Something ( record .", "dao = dbi .", "getId ()); } }\n\nFinally, we\u2019ll add the HelloWorldAPI interface, which puts the REST API in Java terms (you can put the interface definition somewhere in our Main class; no need to create a new Java file):\n\ninterface HelloWorldAPI { @GET @Path ( \"/hello-world\" ) Saying hi ( @QueryParam ( \"name\" ) String name ); @GET @Path ( \"/hello-world\" ) Saying hi (); }\n\nThis interface uses JAX-RS annotations to specify how method calls translate to HTTP requests.", "* ;\n\nInstead of the JAX-RS client initialization and the consumer service registration in the run method, we\u2019ll create a Feign.Builder :\n\nFeign .", "Comsat\u2019s next release will support the tools discussed in this post (with the possible exceptions of jOOQ and Retrofit/Feign), so that you can write the same simple blocking code, but get all the performance and scalability advantages of obtuse asynchronous code.", "After launching our server app, visit http://localhost:8080/consumer to test the new consumer service.", "Finally, we\u2019ve made our HelloWorld service configurable, using DropWizard YAML configuration.", "defaultName = cfg .", "first (); return find ( id ); } } @Timed @GET @Path ( \"/item/{id}\" ) public Map < String , Object > find ( @PathParam ( \"id\" ) Integer id ) { try ( Handle h = dbi .", "Why would anyone use asynchronous APIs over synchronous ones, then?", "cfg = cfg ; } @Provides @Named ( \"template\" ) String provideTemplate () { return cfg .", "class ))); public DBResource ( DataSource ds ) throws SQLException { this .", "where ( field ( \"id\" , Integer .", "first (); } } @Timed @GET @Path ( \"/all\" ) public List < Map < String , Object >> all ( @PathParam ( \"id\" ) Integer id ) { try ( Handle h = dbi .", "join ( ' ' ),\n\nWe\u2019ll now build our deployment capsule with gradle capsule , and launch the server with java -jar build/libs/jmodern-web.jar .", "map ( toSomething ); } } }\n\nNow, jOOQ does not yet implement DDL (SQL statements like create table ), so you\u2019ll notice we\u2019re creating the table using JDBC.", "map ( toSomething ); } } @Timed @GET @Path ( \"/all\" ) public List < Something > all ( @PathParam ( \"id\" ) Integer id ) throws SQLException { try ( Connection conn = ds .", "hi ( \"consumer\" ); return String .", "getConnection ()) { // this does not work int id = using ( conn ).", "getValue ( field ( \"id\" , Integer .", "insert ( name )); } @Timed @GET @Path ( \"/item/{id}\" ) public Something find ( @PathParam ( \"id\" ) Integer id ) { return dao .", "register ( new HelloWorldResource ()); } @Path ( \"/hello-world\" ) @Produces ( MediaType .", "TEXT_PLAIN ) public static class ConsumerResource { private final HelloWorldAPI hellowWorld ; public ConsumerResource ( Feign .", "So the JAX-RS standard also specifies a client API.", "getValue ( field ( \"name\" , String .", "If you want to see how more complex REST APIs translate to Java, this very simple example demonstrates consuming the GitHub API with Retrofit, and here\u2019s the same example using Feign.", "register ( new ConsumerResource ( client ));\n\nFinally, this will be our consumer service:\n\n@Path ( \"/consumer\" ) @Produces ( MediaType .", "You can now test our improved service browser at http://localhost:8080/hello-world, and http://localhost:8080/hello-world?name=Modern+Developer.", "Dropwizard simply adds simple, consistent configuration and automatic monitoring without little extra work.", "getTemplate (); } @Provides @Named ( \"defaultName\" ) String provideDefaultName () { return cfg .", "These are part of the JSR-330 standard, so our service code will remain unchanged no matter which DI tool we use.", "To test the service point your browser at http://localhost:8080/hello-world, and then at http://localhost:8080/hello-world?name=Modern+Developer.", "A blocking, or synchronous, API is one whose methods block the calling thread until they complete.", "A lightweight web-service server, then, should best implement the standard APIs.", "Traditional Java web servers \u2013 or, in their full-featured incarnation, application servers \u2013 have one particular distinguishing feature: the ability to run multiple applications in a single JVM instance.", "name : \"World\" )); return res ; } } }\n\nThis is pretty much the simplest Dropwizard service possible.", "JAXRSContract ()) // we want JAX-RS annotations .", "client = client ; } @Timed @GET public String consume () { Saying saying = client .", "metrics (), \"db\" ); // Dropwizard will monitor the connection pool env .", "We\u2019ll add these dependencies:\n\ncompile 'io.dropwizard:dropwizard-db:0.7.0' compile 'io.dropwizard:dropwizard-jdbi:0.7.0' runtime 'com.h2database:h2:1.4.178'\n\nand these imports:\n\nimport io.dropwizard.db.", "*;\n\nIn the run method, we\u2019ll now register our DB resource like so (the full code listing is here):\n\nDataSource ds = cfg .", "getDataSourceFactory (), \"db\" ); env .", "APPLICATION_JSON ) public static class DBResource { private final ModernDAO dao ; public DBResource ( DBI dbi ) { this .", "JModernConfiguration > { public static void main ( String [] args ) throws Exception { new Main ().", "We will, therefore, only discuss frameworks and libraries for HTTP \u201cdata\u201d services.", "bind ( \"name\" , name ) .", "Advanced Topic: Blocking vs. Non-blocking or Synchronous vs. Asynchronous\n\nAt this point we\u2019ll take some time for a more theoretical discussion on blocking vs. nonblocking APIs.", "defaultName : Stranger\n\nNext, add this to build.gradle so that when we run the server with gradle run , it will locate the config file:\n\nrun { systemProperty \"dropwizard.config\" , \"build/resources/main/jmodern.yml\" }\n\nFinally, we want to include the default configuration file in the capsule, so to the capsule section we\u2019ll add:\n\nfrom { sourceSets .", ")\" , name )); } } @Timed @POST @Path ( \"/add\" ) public Something add ( String name ) { return find ( dao .", "Especially when it comes to web, and web-related, development, tools, libraries and frameworks proliferate.", "register ( new HelloWorldResource ( cfg )); } // YAML Configuration public static class JModernConfiguration extends Configuration { @JsonProperty private @NotEmpty String template ; @JsonProperty private @NotEmpty String defaultName ; public String getTemplate () { return template ; } public String getDefaultName () { return defaultName ; } } // The actual service @Path ( \"/hello-world\" ) @Produces ( MediaType .", ")\" , name )); } } @Timed @POST @Path ( \"/add\" ) public Map < String , Object > add ( String name ) { try ( Handle h = dbi .", "* ;\n\nWe then need to add a DataSource factory to JModernConfiguration :\n\n@Valid @NotNull @JsonProperty private DataSourceFactory database = new DataSourceFactory (); public DataSourceFactory getDataSourceFactory () { return database ; }\n\nAnd the following to the run method, which will connect to the database and register our new DbService :\n\nDBI dbi = new DBIFactory ().", "After playing with modern Java code in part 1, and exploring deployment, management, monitoring and benchmarking of JVM applications in part 2, it is time to delve into modern Java web development.", "bind ( \"id\" , id ).", "Advanced Topic: Interactive Web Services with Web Actors\n\nWhile generally you should stick to standard server APIs, sometimes an alternative provides significant advantages.", "You\u2019ll still get automatic choice of a Java runtime and automatic JVM configuration when you launch the capsule.", "To actually wire and inject the dependencies we use Dagger specific code.", "getDefaultName (); } @Timed // monitor timing of this service with Metrics @GET public Saying sayHello ( @QueryParam ( \"name\" ) Optional < String > name ) throws InterruptedException { final String value = String .", "Those users might find it worthwhile to assemble Jersey, Jetty and other libraries of their choosing, and work out the plumbing themselves, to build a lightweight server that\u2019s the best fit for their organization.", "You can use three different HTTP clients, and 3 different JDBC APIs in the same method, but your server usually runs on a single framework.", "createQuery ( \"select id, name from something where id = :id\" ).", "APPLICATION_JSON ) public static class HelloWorldResource { private final AtomicLong counter = new AtomicLong (); private final String template ; private final String defaultName ; public HelloWorldResource ( JModernConfiguration cfg ) { this .", "template = cfg .", "* ; public class Main extends Application < Configuration > { public static void main ( String [] args ) throws Exception { new Main ().", "Create the following foo.yml file in the project\u2019s directory:\n\ntemplate : Howdy, %s!", "build ( \"client\" ); env .", "fromUri ( \"http://localhost:8080/hello-world\" ).", "And because Dropwizard supports the Jersey JAX-RS client out-of-the-box, it automatically supplies performance metrics of outgoing requests.", "put ( \"id\" , counter .", "register ( new DBResource ( ds ));\n\nAnd our new DBResource looks like this:\n\n@Path ( \"/db\" ) @Produces ( MediaType .", "put ( \"content\" , \"Hello, \" + ( name != null ?", "But even more traditional web servers, like Tomcat, now have modern embedded modes.", "register ( new DBResource ( dbi ));\n\nIn order to configure the database, we need to add the following to jmodern.yml :\n\ndatabase : driverClass : org.h2.Driver url : jdbc:h2:mem:test user : u password : p\n\nFinally, let\u2019s create our database resource (if you\u2019re finding the code changes hard to follow, the full listing is here):\n\n@Path ( \"/db\" ) @Produces ( MediaType .", "getId ()); } }\n\nNotice how the returned JSON is deserialized into a Saying object; it can also be returned as a map, a string, and probably other types as well (Dropwizard is using an outdated version of the Jersey JAX-RS client, but the new API is similar).", "select ( field ( \"id\" ), field ( \"name\" )).", "It would therefore be natural to build a modern Java web service microframework by putting together Jetty and Jersey, and that\u2019s pretty much the tool we\u2019ll be playing with next: Dropwizard.", "insertInto ( table ( \"something\" ), field ( \"name\" )).", ") payload public static class Saying { private long id ; private @Length ( max = 10 ) String content ; public Saying ( long id , String content ) { this .", "This is our DAO class (or SQL Object in JDBI parlance) \u2013 JDBI SQL Object is to the database what Retrofit is for REST:\n\n@RegisterMapper ( SomethingMapper ."], "title": "Parallel Universe"}, {"url": "http://bramstein.com/writing/web-font-anti-patterns-overusing.html", "summary": ["If you\u2019re us\u00ading SVG you can eas\u00adily scale and switch be\u00adtween SVG files for dif\u00adfer\u00adent break\u00adpoints.", "If you use web fonts for let\u00adter\u00ading you\u2019ll need to ag\u00adgres\u00adsively sub\u00adset your fonts to make them small enough so that they load quickly.", "It\u2019ll give you ab\u00adsolute con\u00adtrol over kern\u00ading, track\u00ading, po\u00adsi\u00adtion, gra\u00addi\u00adents, mask\u00ading, and colour.", "Most \u201cweb safe\u201d fonts do not con\u00adtain Open\u00adType fea\u00adtures like swashes and dis\u00adcre\u00adtionary lig\u00ada\u00adtures that are of\u00adten used for let\u00adter\u00ading.", "It\u2019ll in\u00adcrease your page load times and if you\u2019re re\u00adly\u00ading on the browser\u2019s de\u00adfault be\u00adhav\u00adiour it\u2019ll also block your site from ren\u00adder\u00ading un\u00adtil the fonts have loaded.", "Us\u00ading web fonts for let\u00adter\u00ading be\u00adcomes es\u00adpe\u00adcially prob\u00adlem\u00adatic in re\u00adspon\u00adsive de\u00adsign.", "If you find your\u00adself wrap\u00adping each let\u00adter or word in a span el\u00ade\u00adment in or\u00adder to style them \u2014 stop.", "Ex\u00adam\u00adine your ty\u00adpo\u00adgraphic hi\u00ader\u00adar\u00adchy and con\u00adsider us\u00ading ex\u00adist\u00ading fonts be\u00adfore adding a new font.", "As an added bonus, the re\u00adsult\u00ading SVG file size will be smaller than load\u00ading sev\u00aderal fonts.", "Web Font Anti-Pattern: Overusing web fonts\n\nOc\u00adto\u00adber 13, 2015\n\nThis is my favourite web font anti-pat\u00adtern and one I of\u00adten get wrong my\u00adself; why are you us\u00ading web fonts for that?", "Most of the times when you\u2019re wrap\u00adping words and char\u00adac\u00adters in span el\u00ade\u00adments you are ac\u00adtu\u00adally at\u00adtempt\u00ading to do let\u00adter\u00ading in HTML and CSS .", "Not many of the web safe fonts are scripts, so at best your fonts will fall back to a com\u00adpletely un\u00adre\u00adlated script font.", "It\u2019s per\u00adfectly fine to use web fonts for head\u00adlines and body text.", "By do\u00ading that you\u2019ll also make it dif\u00adfi\u00adcult to trans\u00adlate your let\u00adter\u00ading in other lan\u00adguages, which of\u00adten uses dif\u00adfer\u00adent char\u00adac\u00adter set.", "The global av\u00ader\u00adage of font re\u00adquests per page has tripled in the last cou\u00adple years."], "title": "Web Font Anti-Pattern: Overusing web fonts"}, {"url": "http://colintoh.com/blog/lodash-10-javascript-utility-functions-stop-rewriting", "summary": ["2) Loop through a collection and return a deeply-nested property from each item\n\n// Fetch the name of the first pet from each owner var ownerArr = [{ \"owner\": \"Colin\", \"pets\": [{\"name\":\"dog1\"}, {\"name\": \"dog2\"}] }, { \"owner\": \"John\", \"pets\": [{\"name\":\"dog3\"}, {\"name\": \"dog4\"}] }]; // Array's map method.", "We might also want to cater for a single string parameter for single key deletion or even accepting a comparator.", "ownerArr.map(function(owner){ return owner.pets[0].name; }); // Lodash _.map(ownerArr, 'pets[0].name');\n\nLodash's map method works exactly like Javascript native array method except that it has a sweet upgrade.", "_.pick comes with all the benefits that _.omit provides too - New object creation and ability to take in single string, array and comparator functions.", "Get rid of the .bind(null,...)\n\n// Lodash _.times(6, _.partial(_.uniqueId, 'ball_'));\n\nThe _.partial method basically does the same thing as the native bind method except it assumes the context to this .", "Returning random floating number and taking in single parameter as maximum value will add substantial amount of code to our custom utility method.", "See Stackoverflow for solution: http://stackoverflow.com/questions/4459928/how-to-deep-clone-in-javascript // Lodash var objB = _.cloneDeep(objA); objB === objA // false\n\nDeep-cloning javascript object is difficult and there is no easy way around it.", "[ball_0, ball_1, ball_2, ball_3, ball_4, ball_5] // Array's map method.", "Take note: If your N is going to be non-trivial, please use a basic for loop or a reverse while loop for a much more performant iteration.", "4) Deep-cloning Javascript object\n\nvar objA = { \"name\": \"colin\" } // Normal method?", "With array and the apply method, we can achieve the N loop without creating an additional variable.", "Array.apply(null, Array(6)).map(function(item, index){ return \"ball_\" + index; }); // Lodash _.times(6, _.uniqueId.bind(null, 'ball_'));\n\nWe already know how useful _.times is from the previous example.", "Although we didn't completely replace the try-catch utility method, we managed to remove the unsightly try-catch blocks.", "More use-cases\n\nvar objA = {\"name\": \"colin\", \"car\": \"suzuki\", \"age\": 17}; // Lodash objA = _.omit(objA, 'car'); // {\"name\": \"colin\", \"age\": 17}; objA = _.omit(objA, _.isNumber); // {\"name\": \"colin\"};\n\nOnce again, catering for such cases would have added substantial amount of code into the naive utility function."], "title": "Lodash: 10 Javascript Utility Functions That You Should Probably Stop Rewriting"}, {"url": "http://ebookfriendly.com/best-short-books/", "summary": ["50 short books for busy people\n\nPiotr Kowalczyk 1,321\n\nHere are the novels, short stories and non-fiction books that will perfectly fit into your busy life.", "\u21e2 Kindle\n\n32.", "\u21e2 Kindle\n\n13.", "\u21e2 Kindle\n\n27.", "Estimated reading time: 182 minutes.", "Estimated reading time: 107 minutes.", "\u21e2 Kindle\n\n8.", "Estimated reading time: 108 minutes.", "Estimated reading time: 57 minutes.", "\u21e2 Kindle\n\n23.", "Poke the Box is a little book but a huge inspiration for anyone, who faces doing something for the first time.", "Number of pages: 48.", "Book cover images via Amazon, Wikipedia, Project Gutenberg, Internet Archive.", "Estimated reading time: 150 minutes.", "Estimated reading time: 165 minutes.", "Estimated reading time: 23 minutes.", "The title of the essay comes from Woolf\u2019s opinion that \u201ca woman must have money and a room of her own if she is to write fiction.\u201d\n\nNumber of pages: 148.", "Estimated reading time: 145 minutes.", "Estimated reading time: 138 minutes.", "Number of pages: 52.", "There are many fantastic books short enough that it will take little time to finish them.", "Number of pages: 64.", "Estimated reading time: 143 minutes.", "\u21e2 Kindle\n\n45.", "Number of pages: 176.", "Number of pages: 130.", "When he accidentally kills a clansman, things begin to fall apart\u2026\n\nNumber of pages: 176.", "\u21e2 Print\n\n22.", "Estimated reading time: 122 minutes.", "Estimated reading time: 67 minutes.", "Estimated reading time: 42 minutes.", "Number of pages: 81.", "Estimated reading time: 38 minutes.", "Steal Like an Artist \u2013 Austin Kleon\n\nAustin Kleon, a young writer and artist based in Austin, Texas, wrote a highly inspirational and entertaining book on how to find creativity.", "This essay offers readers unparalleled insight into the living heart of haiku\u2014how haiku work and what they hold, and how to read through and into their images to find a full expression of human life and perceptions, sometimes profound, sometimes playful.", "Number of pages: 32.", "Estimated reading time: 97 minutes.", "\u21e2 Kindle\n\n40.", "Larger Than Life \u2013 Jodi Picoult\n\nA 2014 gripping and brilliantly written novella from Jodi Picoult, set in the wilds of Africa.", "\u21e2 Print\n\n24.", "Estimated reading time: 65 minutes.", "Estimated reading time: 56 minutes.", "Estimated reading time: 162 minutes.", "The Case of the Caretaker \u2013 Agatha Christie\n\nThis is one of the classic crime short stories written by the master of detective fiction, Agatha Christie.", "Estimated reading time: 53 minutes.", "Mile 81 \u2013 Stephen King\n\nOne of the best short stories written by Stephen King.", "One of the most famous books by Robert Louis Stevenson describes the struggle of two opposing personalities.", "Number of pages: 160.", "Estimated reading time: 33 minutes.", "Number of pages: 162.", "Alfred Hitchcock: The Man Who Knew Too Much \u2013 Michael Wood\n\nIn the Icons series Michael Wood presents life and works of one of the greatest filmmakers in history \u2013 Alfred Hitchcock.", "Bonjour Tristesse \u2013 Fran\u00e7oise Sagan\n\nWritten by an 18-year-old Fran\u00e7oise Sagan, this short novel became an overnight bestseller, after it was published in 1954.", "\u21e2 Kindle\n\n29.", "Estimated reading time: 123 minutes.", "Number of pages: 29.", "Estimated reading time: 147 minutes.", "\u21e2 Kindle\n\n25.", "\u21e2 Kindle\n\n50.", "Estimated reading time: 27 minutes.", "\u21e2 Kindle\n\n38.", "Number of pages: 178.", "\u21e2 Kindle\n\n21.", "It\u2019s an extended essay narrated by a fictional character, a Shakespeare\u2019s sister named Judith, we learn whether women were ready \u2013 and free \u2013 to create work of the quality of William Shakespeare.", "Animal Farm \u2013 George Orwell\n\nIn this classic dystopian novel from 1945, George Orwell paints an allegory of the Russian Revolution leading to the communism in the Soviet Union.", "\u21e2 Kindle\n\nShort stories\n\n19.", "Estimated reading time: 135 minutes.", "Estimated reading time: 45 minutes.", "\u21e2 Kindle\n\n33.", "Estimated reading time: 43 minutes.", "Estimated reading time: 40 minutes.", "Number of pages: 50.", "Published for the first time in 1942, the story follows an elderly spinster and amateur detective Jane Marple, very well known from Christie\u2019s twelve crime novels.", "The Stranger \u2013 Albert Camus\n\nThe Stranger is a short novel from a master of absurd and existentialism, Albert Camus.", "\u21e2 Print\n\n48.", "Number of pages: 25.", "50 best short books for busy people\n\nNon-fiction books\n\n1.", "Number of pages: 146.", "Estimated reading time: 87 minutes.", "Stephen King says about the book:\n\nI think the issue of an America awash in guns is one every citizen has to think about.", "Estimated reading time: 79 minutes.", "A Christmas Carol \u2013 Charles Dickens\n\nOne of the most beloved stories in the English literature.", "\u21e2 Kindle\n\n26.", "\u21e2 Print\n\n42.", "The Elements of Style \u2013 William Strunk\n\nA classic prescriptive American English writing style guide, written by Cornell University professor William Strunk, and first published in 1919.", "Estimated reading time: 148 minutes.", "\u21e2 Kindle\n\n10.", "Estimated reading time: 24 minutes.", "Estimated reading time: 83 minutes.", "Estimated reading time: 132 minutes.", "Estimated reading time: 52 minutes.", "Number of pages: 67.", "Estimated reading time: 58 minutes.", "Estimated reading time: 170 minutes.", "Estimated reading time: 133 minutes.", "Number of pages: 27.", "Estimated reading time: 21 minutes.", "Number of pages: 26.", "\u21e2 Kindle\n\n43.", "Sherlock Holmes: The Ultimate Collection \u2013 Arthur Conan Doyle\n\nThis collection of works of the master of crime fiction, Sir Arthur Conan Doyle, includes 60 pieces featuring the iconic detective Sherlock Holmes.", "Estimated reading time: 130 minutes.", "Written in the cold war era, and published in 1953, it\u2019s set after the nuclear war between the Soviet Union and the West.", "In the list below you\u2019ll find 50 books we found most interesting.", "This short story is a part of Electric Literature\u2019s Recommended Reading series, and was published on Amazon as a Kindle Single.", "In the introduction to the first edition we read:\n\nThis book aims to give in brief space the principal requirements of plain English style.", "\u21e2 Print\n\n46.", "Estimated reading time: 22 minutes."], "title": "50 short books for busy people"}, {"url": "http://elijahmanor.com/javascript-smells/", "summary": ["So, I've come up with a new presentation called JavaScript Code Smells to review various common smelly snippets of code and discuss techniques on how we can eliminate and protect against their pungent odors.", "Fixing broken code is important, but have you ever gotten into the situation where your code works, but it doesn't feel quite right... maybe even smells?", "Your JavaScript may pass stardard JSHint rules, but that doesn't mean it's legit.", "All the content for the 60 minute version is contained in my slides if you are interested.", "The points introduced aren't necessarily specific to JavaScript, but are cross-cutting concepts that can apply to other languages as well.", "Most developers can smell brittle and fragile code a mile away, but it takes time and training to combat against these smells.", "In the past I've given presentations, recorded videos, and written blog posts about fixing common JavaScript and jQuery bugs.", "The names are a bit odd, but I have a weird compulsion to alliterate at times :)\n\nConvoluted Code Smell\n\nCopy Paste Code Smell\n\nSwitch Statement Smell\n\nThe This Abyss Smell\n\nCrisp Concatenation Smell\n\njQuery Inquiry Temperamental Timer Smell\n\nRepeat Reassign Smell\n\nInappropriate Intimacy Smell\n\nIncessant Interaction Smell\n\nAnonymous Algorithm Smell\n\nUnconfirmed Code Smell\n\nTwo-Way Data Binding Smell\n\nSlides\n\nYou can find the slides from the presentation online at elijahmanor.com/talks/js-smells", "\"A code smell is a surface indication that usually corresponds to a deeper problem in the system\" --CodeSmell by Martin Fowler\n\nAs we grow as developers we strive to write more maintainable code, but on our journey we often times don't know what that looks like yet.", "The full talk is 60 minutes, but I don't have a recording of that yet."], "title": "JavaScript Code Smells"}, {"url": "http://embeddedgurus.com/state-space/2014/09/fast-deterministic-and-portable-counting-leading-zeros/", "summary": ["The Internet offers a lot of various algorithms for counting leading zeros and the closely related binary logarithm (log-base-2(x) = 32 \u2013 1 \u2013 clz(x)).", "Here is a sample list of the most popular search results:\n\nhttp://en.wikipedia.org/wiki/Find_first_set\n\nhttp://aggregate.org/MAGIC/#Leading Zero Count\n\nhttp://www.hackersdelight.org/hdcodetxt/nlz.c.txt (from Hacker\u2019s Delight (2nd Edition), Section 5-3 \u201cCounting Leading 0\u2019s\u201d)\n\nhttp://www.codingforspeed.com/counting-the-number-of-leading-zeros-for-a-32-bit-integer-signed-or-unsigned/\n\nhttp://stackoverflow.com/questions/9041837/find-the-index-of-the-highest-bit-set-of-a-32-bit-number-without-loops-obviously\n\nhttp://stackoverflow.com/questions/671815/what-is-the-fastest-most-efficient-way-to-find-the-highest-set-bit-msb-in-an-i\n\nBut, unfortunately, most of the published algorithms are either incomplete, sub-optimal, or both.", "The CLZ1() function is deterministic in that it completes always in 13 instructions, when compiled with IAR EWARM compiler for ARM Cortex-M0 core with the highest level of optimization.", "For this reason, many modern processors provide the CLZ (count-leading zeros) instruction, sometimes also called LZCNT, BSF (bit scan forward), FF1L (find first one-bit from left) or FBCL (find bit change from left).", "Monday, September 8th, 2014 by Miro Samek\n\nCounting leading zeros in an integer number is a critical operation in many DSP algorithms, such as normalization of samples in sound or video processing, as well as in real-time schedulers to quickly find the highest-priority task ready-to-run.", "Here is the CLZ2() function that illustrates this tradeoff:\n\nstatic inline uint32_t CLZ2(uint32_t x) { static uint8_t const clz_lkup[] = { 32U, 31U, 30U, 30U, 29U, 29U, 29U, 29U, 28U, 28U, 28U, 28U, 28U, 28U, 28U, 28U }; uint32_t n; if (x >= (1U << 16)) { if (x >= (1U << 24)) { if (x >= (1 << 28)) { n = 28U; } else { n = 24U; } } else { if (x >= (1U << 20)) { n = 20U; } else { n = 16U; } } } else { if (x >= (1U << 8)) { if (x >= (1U << 12)) { n = 12U; } else { n = 8U; } } else { if (x >= (1U << 4)) { n = 4U; } else { n = 0U; } } } return (uint32_t)clz_lkup[x >> n] - n; }\n\nThe CLZ2() function completes always in 17 instructions, when compiled with IAR EWARM compiler for ARM Cortex-M0 core.", "So, I thought it could be useful to post here a complete and, as I believe, optimal CLZ(x) function, which is both deterministic and outperforms most of the published implementations, including all of the \u201cHacker\u2019s Delight\u201d algorithms.", "The CLZ2() implementation takes about 80 bytes for code plus 16 bytes of constant lookup table in ROM.", "If the ROM footprint is too high for your application, at the cost of running the bi-section for one more step, you can reduce the size of the lookup table to only 16 bytes.", "The CLZ1() implementation takes about 40 bytes for code plus 256 bytes of constant lookup table in ROM."], "title": "Fast, Deterministic, and Portable Counting Leading Zeros \u00ab State Space"}, {"url": "http://engineroom.teamwork.com/10-things-to-know-about-gulp/", "summary": ["This means that all of styles need to finish before templates can run, even though it might actually only depend on inline-above-fold-styles for example.", "Gulp also supports promises in tasks and that's the other way we can solve it;\n\nvar gulp = require('gulp'); var $ = require('gulp-load-plugins')(); var Promise = require('es6-promise').Promise; gulp.task('images', function(){ return new Promise(function(resolve, reject){ setTimeout(function(){ $.util.log(\"Tada!", "\"); done(); }, 3000); }); gulp.task('default', ['images'], function(){ $.util.log('Default is running...'); });\n\nNote, done can only be called once per task and it can also be called with an Error which will end the task appropriately.", "There are a lot of \"Gulp friendly\" modules out there on npm which support streams and Gulp's vinyl files.", "Quick side note: if you are using a gulpfile.coffee like mentioned about , CoffeeScript's implicit return (i.e.", "call the slush-something generator's slushfile).", ": critical : Extract & inline critical-path CSS in HTML pages.", "\"); }, 3000); }); gulp.task('default', ['images'], function(){ $.util.log('Default is running...'); });\n\nSo our default task does some logging but first has a dependency on an images task does some logging after three seconds.", "There are thousands of Yeoman generators out there for all sorts of apps, take a look.", "It accepts a \"condition\" in the form of a Boolean or a function which returns one (like gulp-filter ).", "One way to solve this is to use the task's callback argument like this:\n\nvar gulp = require('gulp'); var $ = require('gulp-load-plugins')(); gulp.task('images', function(done){ setTimeout(function(){ $.util.log(\"Tada!", "To use this generation is must be named something like slush-something and slush itself must also be installed globally.", "inquirer : The module for prompting the user for input, validating input, etc.", "#6: gulpfile.coffee\n\ngulp = require 'gulp' $ = require('gulp-load-plugins')() isProductionMode = $.util.argvs.mode is 'production' gulp.task 'default', -> gulp.src './*.png' .pipe $.if isProductionMode, $.imagemin() .pipe gulp.dest './output'\n\nGulp supports CoffeeScript since version 3.7.", "#8: Flatten task dependencies for concurrency\n\nDon't group task dependencies by purpose, even though that might make most sense initially.", ": Extract & inline critical-path CSS in HTML pages.", ": Generate executables from NW.js apps.", "Then running slush something will run your generator (i.e.", "nw-builder : Generate executables from NW.js apps.", "\"); resolve(); }, 3000); }); }); gulp.task('default', ['images'], function(){ $.util.log('Default is running...'); });\n\nNote: calling reject anywhere in the task with an Error would be just like calling the done callback with one.", "Take this gulpfile for example:\n\nvar gulp = require('gulp'); var $ = require('gulp-load-plugins')(); gulp.task('images', function(){ setTimeout(function(){ $.util.log(\"Tada!", "Since \"no one plugin should have all that power\" Gulp plugins do one thing and one thing well, it's easy to end up with an uncomfortable amount of require s at the top of your gulpfile.", ": The module for prompting the user for input, validating input, etc.", "\"\n\nIt's really easy to create a Slush generator.", "The output would now be something like the following:\n\n[22:31:19] Starting 'images'... [22:31:22] Tada!"], "title": "10 things to know about Gulp"}, {"url": "http://exploringjs.com/es6/ch_first-steps.html", "summary": ["Prefer const in new code for variables whose values never change.", "' + elem ); }\n\nMore information: section \u201cThe for-of loop\u201d.", "4.8 Handling named parameters\n\nA common way of naming parameters in JavaScript is via object literals (the so-called options object pattern):\n\nselectEntries ({ start : 0 , end : - 1 });\n\nTwo advantages of this approach are: Code becomes more self-descriptive and it is easier to omit arbitrary parameters.", "In ES5 object literals, methods are created like other properties.", "In ES5, you can implement selectEntries() as follows:\n\nfunction selectEntries ( options ) { var start = options .", "4.5.2 Multiple return values via objects\n\nThe method Object.getOwnPropertyDescriptor() returns a property descriptor, an object that holds multiple values in its properties.", "foo (); }, // trailing comma is legal in ES5 }\n\nES6 has method definitions, special syntax for creating methods:\n\nlet obj = { foo () { \u00b7\u00b7\u00b7 }, bar () { this .", "log ( diag ( 4 , 3 )); // 5\n\nThe syntax for importing modules as objects looks as follows (line A):\n\n//------ main2.js ------ import * as lib from 'lib' ; // (A) console .", "random (); return x ; } return x ; } func ( false ); // undefined\n\nIn ES6, you can additionally declare variables via let and const .", "4.5 Handling multiple return values\n\nSome functions or methods return multiple values via arrays or objects.", "handleClick = function () { \u00b7\u00b7\u00b7 };\n\nIn ES6, you can use arrow functions, which don\u2019t shadow this (line A):\n\nfunction UiComponent () { var button = document .", "diag ( 4 , 3 )); // 5\n\n4.18.2 Single exports\n\nNode.js extends CommonJS and lets you export single values from modules, via module.exports :\n\n//------ myFunc.js ------ module .", "set ( word , count + 1 ); }\n\nAnother benefit of Maps is that you can use arbitrary values as keys, not just strings.", "In ES5, you always need to create intermediate variables if you want to access those values.", "log ( arg ); } }\n\nRest parameters are even nicer if you are only interested in trailing parameters:\n\nfunction format ( pattern , ... args ) { \u00b7\u00b7\u00b7 }\n\nHandling this case in ES5 is clumsy:\n\nfunction format () { var pattern = arguments [ 0 ]; var args = [].", "4.1 From var to let / const\n\nIn ES5, you declare variables via var .", "4.13.1 Base classes\n\nIn ES5, you implement constructor functions directly:\n\nfunction Person ( name ) { this .", "4.6 From for to forEach() to for-of\n\nPrior to ES5, you iterated over Arrays as follows:\n\nvar arr = [ 'a' , 'b' , 'c' ]; for ( var i = 0 ; i < arr .", "startsWith ( 'x' )) {} // ES6\n\nFrom indexOf to endsWith :\n\nfunction endsWith ( str , suffix ) { // ES5 var index = str .", "log ( elem ); }\n\nIf you want both index and value of each array element, for-of has got you covered, too, via the new Array method entries() and destructuring:\n\nfor ( let [ index , elem ] of arr .", "diag ( 4 , 3 )); // 5\n\nIn ES6, multiple exports are called named exports and handled like this:\n\n//------ lib.js ------ export const sqrt = Math .", "call ( arguments ); // ES5 let arr2 = Array .", "call ( arguments , 1 ); \u00b7\u00b7\u00b7 }\n\nRest parameters make code easier to read: You can tell that a function has a variable number of parameters just by looking at its parameter definitions.", "title + ')' ; };\n\nES6 has built-in support for subclassing, via the extends clause:\n\nclass Employee extends Person { constructor ( name , title ) { super ( name ); this .", "apply ( null , new Array ( 2 )); // [undefined, undefined] let arr2 = new Array ( 2 ).", "4.17.1 From Array.prototype.indexOf to Array.prototype.findIndex\n\nThe latter can be used to find NaN , which the former can\u2019t detect:\n\nconst arr = [ 'a' , NaN ]; console .", "repeat ( 3 ) // ES6\n\nMore information: Chapter \u201cNew string features\u201d\n\n4.17 New Array methods\n\nThere are also several new Array methods in ES6.", "4.18.1 Multiple exports\n\nIn CommonJS, you export multiple entities as follows:\n\n//------ lib.js ------ var sqrt = Math .", "ES5 \u2013 concat() :\n\nvar arr1 = [ 'a' , 'b' ]; var arr2 = [ 'c' ]; var arr3 = [ 'd' , 'e' ]; console .", "The following ES5 code contains the function countWords that uses the object dict as a map:\n\nvar dict = Object .", "exports = { sqrt : sqrt , square : square , diag : diag , }; //------ main1.js ------ var square = require ( 'lib' ).", "getOwnPropertyDescriptor ( obj , 'foo' ); var writable = propDesc .", "4.5.1 Multiple return values via arrays\n\nexec() returns captured groups via an Array-like object.", "log ( arguments [ i ]); } }\n\nIn ES6, you can declare a rest parameter ( args in the example below) via the ... operator:\n\nfunction logAllArguments (... args ) { for ( let arg of args ) { console .", "4.12 From function expressions in object literals to method definitions\n\nIn JavaScript, methods are properties whose values are functions.", "More information:\n\n4.16 New string methods\n\nThe ECMAScript 6 standard library provides several new methods for strings.", "push (... arr2 ); // arr1 is now ['a', 'b', 'c', 'd']\n\nMore information: section \u201cThe spread operator ( ... )\u201d.", "In ES6, the for-of loop combines both advantages:\n\nlet arr = [ 'a' , 'b' , 'c' ]; for ( let elem of arr ) { console .", "includes ( 'x' )) {} // ES6\n\nFrom join to repeat (the former way of repeating a string is more of a hack):\n\nnew Array ( 3 + 1 ).", "square ; var diag = require ( 'lib' ).", "const works like let , but creates variables whose values can\u2019t be changed.", "map ( function ( x ) { return x * x });\n\nIn ES6, arrow functions are much more concise:\n\nlet arr = [ 1 , 2 , 3 ]; let squares = arr .", "log ( diag ( 4 , 3 )); // 5\n\nAlternatively, you can import the whole module as an object and access square and diag via it:\n\n//------ main2.js ------ var lib = require ( 'lib' ); console .", "indexOf ( suffix ); return index >= 0 && index === str .", "In ES5, even if you are only interested in the properties of an object, you still need an intermediate variable ( propDesc in the example below):\n\nvar obj = { foo : 123 }; var propDesc = Object .", "Use let in new code for variables whose values change.", "log ( '(' + x + ', ' + y + ')' ); }\n\nIn ES6 you can use string interpolation via template literals:\n\nfunction printCoord ( x , y ) { console .", "writable ; var configurable = propDesc .", "in new code for variables whose values never change.", "start || 0 ; var end = options .", "log ([... arr1 , ... arr2 , ... arr3 ]); // [ 'a', 'b', 'c', 'd', 'e' ]\n\nMore information: section \u201cThe spread operator ( ... )\u201d.", "4.3.1 String interpolation\n\nIn ES5, you put values into strings by concatenating those values and string fragments:\n\nfunction printCoord ( x , y ) { console .", "4.9 From arguments to rest parameters\n\nIn ES5, if you want a function (or method) to accept an arbitrary number of arguments, you must use the special variable arguments :\n\nfunction logAllArguments () { for ( var i = 0 ; i < arguments .", "describe = function () { return 'Person called ' + this .", "map ( function ( x ) { return 'x' }); // ['x', 'x'] let arr3 = new Array ( 2 ).", "log ( tmp ); // ReferenceError\n\nIn ECMAScript 6, you can simply use a block and a let declaration (or a const declaration):\n\n{ // open block let tmp = \u00b7\u00b7\u00b7 ; \u00b7\u00b7\u00b7 } // close block console .", "end || - 1 ; var step = options .", "// ES5: same as Array(undefined, undefined) var arr1 = Array .", "constructor = MyError ;\n\nIn ES6, all built-in constructors can be subclassed, which is why the following code achieves what the ES5 code can only simulate:\n\nclass MyError extends Error { }\n\nMore information: section \u201cSubclassing built-in constructors\u201d.", "name ; };\n\nIn ES6, classes provide slightly more convenient syntax for constructor functions (note especially the compact syntax for method definitions \u2013 no keyword function needed):\n\nclass Person { constructor ( name ) { this .", "In ES6, you have Array.from() :\n\nvar arr1 = Array .", "In ES5, you need an intermediate variable ( matchObj in the example below), even if you are only interested in the groups:\n\nvar matchObj = /^(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)$/ .", "4.3 From concatenating strings to template literals\n\nWith ES6, JavaScript finally gets literals for string interpolation and multi-line strings."], "title": "4. First steps with ECMAScript 6"}, {"url": "http://futurice.com/blog/combining-react-flux-and-web-components", "summary": ["The Flux architecture proposes to simplify complex Single-Page Applications through an unidirectional data flow.", "In the wake of React comes another important part of the immediate future of frontend development: the Flux architecture and its kin.", "As long as the new implementation exposes the same standard DOM interfaces, swapping in an Angular implementation would be as simple as changing the HTML Import for the <chat-box> element.", "What makes this simple - and crucially different from traditional DOM wrangling in the browser - is you don\u2019t have to care about any existing state in the DOM, you just overwrite everything with a new one.", ") state is neatly packaged away behind a standard DOM element.", "The opposite seems likely, in fact, as making sure the state of the world remains consistent across a distributed system is far from trivial.", "Web Components (through the related HTML Imports spec) proposes a solution: a standard browser mechanism for pulling in a component - with all its dependencies and assets - and using it as simply as adding a <div> into the DOM.", "Web Components allows you to do just this: break your large app into a bunch of independent mini-apps, making the complexity of the whole more manageable.", "It should also be noted Flux itself proposes striking a balance between the simplicity of a single, unidirectional flow of data (with a singular state of the world) and breaking a large application into smaller, more manageable sub-applications (with their own internal states).", "If our custom element contains internal state, it will likely end up either lost or corrupted as a result.", "If you\u2019re able to identify a loosely connected sub-domain in your frontend application - the chat-box for example - you can use all the simplifying power of Flux within that domain.", "With the current state of affairs in frontend development, being able to reuse UI elements within and across projects is quite painful.", "It allows us to simply not care how React manages the DOM, as long as the end result has the content and attributes we specify.", "Closing thoughts\n\nI hope this helped clarify how the two futures of frontend architecture - Flux and Web Components - are fundamentally different, and yet still composable in interesting ways.", "The Short-term Future\n\nReact is currently the \u201cnew hotness\u201d and seems like the immediate future of the web frontend, and along with it come a breadth of projects that either build on top of the framework itself, or on the ideas it has recently popularized.", "If we have a \u201cmini-app\u201d with encapsulated internal state, we can\u2019t just re-render the whole DOM whenever we feel like it, as we\u2019ll potentially lose that important state.", "Giving this domain the \u201cmini-app\u201d treatment, and breaking it apart into smaller chunks might not reduce the overall complexity of the system at all.", "Let us assume Angular 2.0 comes out and you find it solves the real-time chat domain problems with a lot more elegance than with Flux.", "Implementing a real-time chat application in the browser is certainly easier than it used to be, but it isn\u2019t trivial, either.", "Since a Virtual DOM implementation essentially allows you to create lightweight DOM elements (which are realized into their heavyweight counterparts only as necessary), there\u2019s no reason why custom elements can\u2019t receive the same treatment.", "But I digress; what does any of this have to do with marrying React, Flux & Web Components?", "Another important implication of being able to abstract these mini-apps behind a standard DOM element is interoperability.", "But even though the chat-box contains an interesting domain of engineering challenges, it\u2019s only loosely connected to the domain of the main application.", "The Long-term Future\n\nFlux et al are still fully present-generation frontend architectures - that is, they\u2019re working off of the same technical platform which has existed in browsers for a long time.", "Managing Web Components within Flux\n\nThe pairing also works the other way around.", "Indeed, exactly as you\u2019re able to create a virtualized <div> which will later be turned into an actual DOM <div> , we can let React manage the life and death of our custom <chat-box> element.", "However, these short- and long-term futures seem incompatible at face value: aren\u2019t the intricacies of maintaining stateful DOM components exactly what Flux et al attempt to rid us of?", "While the problem can be somewhat worked around with keyed children, we still need to be careful to not lose important internal state along with the comings and goings of custom elements.", "Again, what makes this possible is the fact that custom elements are integrated through standard DOM API\u2019s, which DOM libraries (like React or jQuery) already know well.", "If we forget Flux, state management and our beloved \u201cmini-apps\u201d for a bit, however, we\u2019re still left with an interesting case to consider: Web Components without any internal state.", "It also allows us to fall back to the simple, unidirectional data flow of Flux, while still enjoying many delicious properties of Web Components, such as their isolation semantics, and delivery through simple HTML Imports."], "title": "Combining React, Flux & Web Components \u2014 Futurice"}, {"url": "http://javascript.crockford.com/javascript.html", "summary": ["They lacked exception handling, inner functions, and inheritance.", "JavaScript is well suited to a large class of non-Web-related applications\n\nMoving Target\n\nThe first versions of JavaScript were quite weak.", "It was originally called LiveScript, but that name wasn't confusing enough.", "Important features of the language are often explained poorly, or left out entirely.", "These mistakes have led to programming errors, and called the design of the language as a whole into question.", "Its success there led to it becoming standard equipment in virtually all web browsers.", "Compounding that, those implementations were embedded in horribly buggy web browsers.", "Despite its popularity, few know that JavaScript is a very nice dynamic object-oriented general-purpose programming language.", "Virtually every personal computer in the world has at least one JavaScript interpreter installed on it and in active use.", ") Of course, few understand this because JavaScript is the world's most misunderstood programming language.", "The ECMA committee that has stewardship over the language is developing extensions which, while well intentioned, will aggravate one of the language's biggest problems: There are already too many versions.", "Copyright 2001 Douglas Crockford.", "Compared to C, JavaScript trades performance for expressive power and dynamism.", "Lisp in C's Clothing\n\nJavaScript's C-like syntax, including curly braces and the clunky for statement, makes it appear to be an ordinary procedural language.", "JavaScript:\n\nThe World's Most Misunderstood Programming Language\n\nDouglas Crockford\n\nwww.crockford.com\n\nJavaScript, aka Mocha, aka LiveScript, aka JScript, aka ECMAScript, is one of the world's most popular programming languages.", "Some argue that JavaScript is not truly object oriented because it does not provide information hiding.", "I have reviewed dozens of JavaScript books, and I can only recommend one: JavaScript: The Definitive Guide (5th Edition) by David Flanagan.", "This is misleading because JavaScript has more in common with functional languages like Lisp or Scheme than with C or Java.", "JavaScript has its share of design errors, such as the overloading of + to mean both addition and concatenation with type coercion, and the error-prone with statement should be avoided."], "title": "The World's Most Misunderstood Programming Language"}, {"url": "http://javascriptplayground.com/blog/2015/02/promises/", "summary": ["We won't go into the underlying specifics of how the code works, but I wanted to look at a high level how we used Promises to build a robust solution that handles errors too.", "Conclusion\n\nPromises are not going anywhere, and are going to become the standard approach for dealing with large amounts of asynchronous operations.", "log ( 'everything is great' ); });\n\nYou might expect an error to be thrown, because x does not exist.", "With the above change, the new code looks like so:\n\nprepareDataForCsv ( fetchData ).", "However, running this code gives you absolutely nothing.", "log ( 'your csv has been saved' ); });\n\nThat's pretty succinct, and I think reads really well.", "If you were to add another catch onto the end, that catch function would run, because when a callback function throws, the next catch in the chain is called.", "log ( 'oh no' , error ); });\n\nNow we get oh no something went wrong .", "Therefore to fetch all the data needed, we need to make two API calls.", "var count = 0 ; var http = function () { if ( count === 0 ) { count ++ ; return Promise .", "Recursion in Promises\n\nOne of the problems we had to deal with was that sometimes to fetch the data from our API, you might have to make multiple requests.", "This is something I've come to really appreciate with promises, once you get used to writing them and working with them, you can end up with some really nice looking code that's easy to follow.", "If it's true, it calls itself again, passing in the new array of users.", "Once it clicks in your mind, you'll find promises really nice to work with and even nicer to handle errors with.", "The chaining of promises is something that really makes them shine in my opinion, but it does take some getting used to - the way they work can be a little odd at first.", "When a promise rejects, the first catch in the chain following that is called.", "resolve ({ more : true , user : { name : 'jack' , age : 22 } }); } else { return Promise .", "log ( 'oh no' , error ); // y is not a thing!", "log ( 'something went wrong' , error ); });\n\nBecause of how the chaining of promises and errors work, as discussed earlier, it means that just one catch at the end of the chain is guaranteed to catch any errors thrown along the way.", "If you have a function that just takes one argument, you can pass that directly to then rather than calling it from a callback function:\n\nfetchData ().", "Chaining and Passing around Promises\n\nThis part is inspired by some work I did recently to add CSV exporting to our client-side application.", "In a complex operation like this, errors could easily occur at any stage of the process (the API might be down, or the code parsing the data might throw an error, or the CSV might not save properly) and we found that with promises we could handle this really nicely, using a sensible combination of then and catch .", "Let's write a function fetchData that can deal with this:\n\nvar fetchData = function () { var goFetch = function ( users ) { return http ().", "Else, you have to deal with error handling through promises in one area, but through good old try {} catch in another.", "then ( function ( data ) { return data ; }); };\n\nWe've found this to be quite a nice pattern for tidying up code and keeping it more generic - it's often easier in an application where most of the work is async to pass promises around rather than waiting for them to resolve and pass the data.", "Let's take prepareDataForCsv as the example:\n\nvar prepareDataForCsv = function ( dataPromise ) { return dataPromise ().", "However, if you return something promise-like, the next \"then\" waits on it, and is only called when that promise settles (succeeds/fails)\n\nAgain, for a real in-depth look at promises, I can't recommend this blog post highly enough.", ") puts this best:\n\nWhen you return something from a \"then\" callback, it's a bit magic.", "log ( 'your csv has been saved' ); });\n\nBearing in mind how complex the underlying code is (at least, in the real application), the high level API reads really nicely.", "That's pretty awesome - prepareDataForCsv is right in the middle of our promise chain but we didn't have to do any extra work or trickery to deal with the error.", "However, right now we don't have any error handling, but we can add it all with one extra piece of code:\n\nfetchData ().", "Of course, if the code within the catch throws an error, that is not the case:\n\nsomeAsyncThing ().", "log ( 'something went wrong' , error ); });\n\nThe beauty of this is that the error handling hasn't changed.", "As you'll see we also end up chaining promises heavily.", "But when a function exists as part of a larger chain, I've found it really beneficial to wrap it in a promise, because it means all your error handling can be done through promises.", "Whenever in the code you see Promise , this will be using the above polyfill, but if you're reading this in a world where promises are widely implemented in browsers, you should still find everything here works exactly the same.", "log ( 'oh no' , error ); });\n\nHere we will still get oh no [ReferenceError: x is not defined] , because someAsyncThing rejected.", "log ( 'oh no' , error ); });\n\nNow, running this gives:\n\noh no [ ReferenceError : x is not defined ]\n\nYou also need to be comfortable with how errors are caught in a chain of promises."], "title": "Embracing Promises in JavaScript"}, {"url": "http://jlongster.com/Using-Immutable-Data-Structures-in-JavaScript", "summary": ["Even if you create every single object/array/etc as immutable, you're going to have to work with 3rd party libraries which use normal JavaScript objects/arrays/etc.", "The reason this makes things complicated is that unless you're really hardcore and are starting a project from scratch, you can't use Immutable objects everywhere.", "You can't mutate it still, but that's something you actually want to enforce.", "If the app state is an Immutable.js object, don't force React components to use Immutable.js' API directly.", "If you're using custom data types, JSON.stringify is no longer an option.", "While Immutable.js goes to great lengths to provide JavaScript-compatible APIs, even they are different ( push must return a new array instead of mutating the existing instance).", "Forcing all React components to depend on the data layout means you can never change the actual structure of the app state, which you'll probably want to do over time.", "There are other libraries, but the choice is conceptually between truly persistent data structures or copying native JavaScript objects, and comparing these two highlights the tradeoffs, no matter what specific library you choose [1].", "If you really want to combine them into a single Immutable.js object, for example, you would need to write your own combineReducers that does so.", "Reference & Value Equality\n\nLet's say you internally stored a reference to an object, and called it obj1 .", "Provide a way to query the app state structure instead, at least just by abstracting out data accesses with functions.", "Today I'm going to talk about immutable data structures in JavaScript, specifically two libraries immutable.js and seamless-immutable.", "The only problem is that I might still return an immutable object, so I might need to coerce that into a JavaScript object first or use a record type as described above.", "Finally, if you're using Redux, don't force everything to depend on the app state structure, as you'll want to change it later.", "That's called \"reference equality,\" where you can simply just compare pointers.", "seamless-immutable is a tiny libary with big wins, but also loses out on some fundamental advantages of immutable data structures like value equality.", "But there's also the concept of \"value equality,\" where you can check if two objects are identical by doing obj1.equals(obj2) .", "Later on, if something runs the same query, I'll get back the cached results even if the query object isn't the same instance.", "It's the real deal; it implements fully persistent data structures from scratch using advanced things like tries to implement structural sharing.", "It does not implement new data structures, so there is no structural sharing, which means you will copy objects as you update them (however, you only need a shallow copy).", "If you are using Immutable.js in a specific part of your system, don't make anything outside of it access the data structures directly.", "I'll also talk a little about transit-js, which is a great way to serialize anything.", "Apps which read and copy data structures heavily (to avoid being mutated from someone else) will easily benefit from immutable data structures (simply copying a large array once will diminish your performance wins from mutability).", "When components are immutable, you don't even have to generate the virtual DOM; a simple === equality check tells you if it needs to update or not.", "You can extend transit to serialize anything, like Date instances or any custom types.", "Generally I would recommend hiding the data structure details, especially if you use Immutable.js, to the outside world.", "It's missing a few common methods for updating immutable data structures, like Immutable.js' setIn and mergeIn methods which makes it easy to update a deeply nested object.", "I also discovered that while using === with Immutable.js does not perform a value equality check (obviously, you can't override JavaScript's semantics), Immutable.js uses value equality for identities of objects.", "This doesn't work in general, but it works really well in the case of Redux because we have a single app state object, and you want to hide the data layout anyway.", "Space and GC Efficiency\n\nI already explained why structural sharing makes immutable data structures efficient.", "In fact, the full code for serializing and deserializing the entire set of Immutable.js types is less than 150 lines long.", "A good example is Redux and it's single atom app state.", "But JSON.stringify was never very good anyway, you can't even serialize ES6 Map or Set instances.", "If you never mutate objects, and obj1 === obj2 is true, you know absolutely nothing has changed.", "It would be easy to serialize ES6 Map types as well, but if you have complex keys I'm not sure how you would use the unserialized instance without value equality.", "If you need to avoid mutations, they are going to beat copying objects hands-down.", "[1] mori is another persistent data structure implementation (pulled out from ClojureScript), and React's immutability helpers is another library that simply shallow copies native JavaScript objects\n\n[2] I made a gist of all the existing libraries I know of that help with immutability.", "Conclusion\n\nImmutability provides a lot of benefits, but whether or not you need to use full-blown persistent data structures provided by Immutable.js depends on the app.", "I talk about using immutable data structures generally, but provide pointers for using it specifically in Redux."], "title": "Immutable Data Structures and JavaScript"}, {"url": "http://khanlou.com/2015/11/zero-dependencies/", "summary": ["I've heard that John Carmack begins every new game he works on by writing the simple functions he needs and building everything up from little pieces.", "When I started out writing Backchannel's SDK, I had just come off the heels of releasing Instant Cocoa, which is a library I created for reducing the intense amount of boilerplate we have to deal with as iOS developers.", "(In a future blog post, I'm hoping to go into GenericKeychain as a case study of how not to write classes.", "I'll almost definitely be bringing the new networking concepts to Instant Cocoa and removing its dependency on AFNetworking .", "Making a hard rule like \"no dependencies\" is a great way to test the limits of your code writing ability and forces you to get creative and make some awesome stuff.", ") I spent about a day understanding how Apple's code worked, and wrote my own wrapper around the Keychain API, with exactly the API I wanted and the features I needed, and thus BAKKeychain was born.", "It includes abstractions like data sources, which map index paths to objects, or resource gateways, which provide a clean interface for touching REST APIs through model objects.", "Backchannel lets both developers and their beta testers comment on and discuss feature requests, bug reports, and general feedback about the app.", "This week, I'd like to discuss the experience of writing a significant application with zero dependencies.", "Zero Dependencies\n\nBackchannel is streamlined way for app developers to gather feedback from beta testers, right within their apps.", "I had to rewrite a few of the Instant Cocoa features, like data sources.", "Data sources in Instant Cocoa are a lot more generic, allowing you to mix, match, and combine them in interesting ways.", "It wouldn't have been fair of me to expect other developers to import an enormous library of mine into their app just so that my development experience could be nicer.", "You can't offload networking, persistence, object mapping, or any other component to someone else's code."], "title": "Zero Dependencies"}, {"url": "http://krasimirtsonev.com/blog/article/distributing-react-components-babel-browserify-webpack-uglifyjs", "summary": ["Let\u2019s say that I want an already generated JavaScript file add it to my page with a <script> tag.", "Any bundling tool like webpack or Browserify will resolve the needed dependencies.", "It gets everything from the src directory, converts the JSX to pure JavaScript calls and ES6 to ES5.", "This is the transform plugin that excludes React but imports the autocomplete widget.", "In theory, from within a ES5 code we should be able to require('Location.js') and get the component working.", "Overall, we have a communication with an external API (Google maps) and a hard dependency involved (autocomplete widget).", "Here is why:\n\nIf I publish the component as a NPM package I\u2019ll need an entry point.", "I continued with the following:\n\n// package.json \"scripts\": { \"prepublish\": \"babel ./src --out-dir ./lib --source-maps --presets es2015,react\" ... }\n\nNo webpack, just Babel.", "I mentioned Browserify above so let\u2019s go with it:\n\nbrowserify ./lib/Location.js -o ./build/react-place.js --transform browserify-global-shim --standalone ReactPlace\n\n-o option is used to specify the output file.", "It gets JSX file as an input and using Babel generates ES5 file.", "I assume that React is already loaded on the page and I need only the component with its autocomplete widget included.", "Here are the NPM scripts that I was able to run in the beginning:\n\n// in package.json \"scripts\": { \"dev\": \"webpack --watch --inline\", \"test\": \"karma start\", \"test:ci\": \"watch 'npm run test' src/\" }\n\nnpm run dev\n\n| +-- example-es6 | +-- build | | +-- app.js | | +-- app.js.map | +-- src | | +-- index.js | +-- index.html +-- src +-- vendor | +-- google.js + -- Location.jsx\n\nThe component that I want to publish is placed in Location.jsx .", "I changed the script to:\n\nbabel ./src --out-dir ./lib --source-maps --presets es2015,react --plugins babel-plugin-add-module-exports\n\nGenerating browser bundle\n\nThe result of the previous section was a file which may be imported/required by any JavaScript project."], "title": "Distributing React components"}, {"url": "http://leastprivilege.com/2015/10/12/the-state-of-security-in-asp-net-5-and-mvc-6-authorization/", "summary": ["The new Authorize Attribute\n\nMy main gripe with the old attribute is that it pushes developers towards hard-coding roles (or even worse \u2013 names) into their controller code.", "To make things worse, ASP.NET and MVC traditionally had not much more built-in to offer than boring role checks.", "The only thing I don\u2019t like about this approach is, that it pushes you towards using the claims collection as the sole data source for authorization decisions.", "The more recommended pattern is to use so called authorization policies instead:\n\n[ Authorize ( \"SalesOnly\" )] public IActionResult DoSalesyStuff() { /* .. */ }\n\nLet\u2019s have a look at policies next.", "Remark 2 Since views in MVC 6 also support DI, you can inject the authorization service there as well.", "This lead to either unmaintainable code (hard coded role names and Authorize attributes) or complete custom implementations \u2013 or both.", "It would be nice if one could use the DI system of ASP.NET to make further data source accessible in custom requirement.", "The requirements are always so app-specific that for 10 applications you often see 12 different implementations.", "a controller constructor:\n\npublic class TestController : Controller { private readonly IAuthorizationService _authz; public TestController( IAuthorizationService authz) { _authz = authz; } }\n\n..and then use it in an action:\n\npublic async Task < IActionResult > SalesSeniorImperative() { if ( await _authz.AuthorizeAsync(User, \"SalesSenior\" )) { return View( \"success\" ); } return new ChallengeResult (); }\n\nScott used a slightly different approach, but using the same underlying infrastructure.", ":\n\npublic class CustomerAuthorizationHandler : AuthorizationHandler < OperationAuthorizationRequirement , Customer > { protected override void Handle( AuthorizationContext context, OperationAuthorizationRequirement requirement, Customer resource) { // implement authorization policy for customer resource } }\n\nOperation requirements are built-in and can be used to model simple string-based actions \u2013 but you can also write your own, or derive from OperationAuthorizationRequirement.", "The new Authorize attribute can still do role checks like this:\n\n[ Authorize (Roles = \"Sales\" )] public IActionResult DoSalesyStuff() { /* .. */ }\n\nBut this is mainly for backwards compatibility (the ability to check for names is gone)."], "title": "The State of Security in ASP.NET 5 and MVC 6: Authorization"}, {"url": "http://matt.might.net/articles/programmers-resolutions/", "summary": ["I estimate I'm burning an extra 360 calories a day from standing, but since standing has increased my overall activity, I suspect it's more than that, and I find I have much higher focus when I stand than when I sit.", "2016 update: For the past several months, I've been trying out a standing desk attachment , and it's been refreshing both mentally and physically.", ")\n\nTrack your weight, caloric intake and caloric burn.", "If you're out of programming languages to learn, implement one.", "Set up digital security cameras.", "Turn your cellphone off for one day a week.", "Learn a new programming language\n\nProgramming languages rise and fall.", "Take a month to invest in an automation project:\n\nTune your mail filters or set up procmail.", "But, technology advances, and those that stay in their comfort zone never realize the gains from these advances.", "For at least one month per year, learn more about topics like the following:\n\nIndustrial design.", "It's hard to spot bad practice in your own work, but easy to spot in others'.", "Go to a clinic each year to get your blood pressure, cholesterol and blood sugar checked.", "Focus on security\n\nFew programmers practice good security habits.", "Listen to a kind of music you don't like for a month.", "For instance, if you've never used 3D modeling software, try Blender.", ") (Yes, it works for men too.", "If you don't want to continue after 15 minutes, drop it.", "Update: Reader Shae Erisson wrote to relay the \"rule of 3\" for embracing the uncomfortable: when a third person recommends you try something, you must try it.", "After a month of doing something different, decide whether you want to keep doing things differently or whether there are ways to blend the best of the new and the old.", "Go analog\n\nProgrammers obsess over the discrete and the digital well past the point of diminishing returns.", "Learn more mathematics\n\nAt its heart, computer science is a mathematical discipline.", "Spend a full month each year tuning your exercise, diet and environment to promote durable healthy habits.", "]\n\nOpt for defense in depth by assigning an individual hard drive to each computer and enabling automatic backups with tools like Time Machine.", "Eat a food you don't like every day.", "Learn to drive stick.", "Back up your data\n\nEach year, spend time reviewing your backup strategy.", "We find a system that works for us, and we stick with it.", "Spend a month each year on topics like the following:\n\nFormal languages.", "Here's a list of things that might make you uncomfortable at first:\n\nSwitch to Dvorak.", "If you're feeling particularly brave, take a crack at dependently-typed programming languages / theorem-proving systems:\n\nAgda.", "Try a different version control system on a small project.", "If you're conscious of your own digital security, you'll be more conscious of the security of the code you write.", "Comfort breeds technical fossilization.", "For starters, you might want to take a look at these posts:\n\nEngage the arts and humanities\n\nEngineers tend to look down on the arts.", "Try out that \"popular new piece of crap\" for the full month.", "Check that you're using unique, strong passwords for every site.", "Stay healthy\n\nProgrammers tend to live sedentary lives, and we face unique health challenges from our occupation.", "What engineers fail to realize is that the arts and humanities augment technical excellence.", "Travel to a country with a different language and/or culture.", "I use a posture corrective brace to help:\n\n\n\n(Yes, it works for men too.", "Consider an annual one-month brush-up on one of these topics:\n\nLogic.", "Create shell scripts to help your writing.", "Spend a full month absorbing a new language or a new language paradigm.", "Here are other security tasks you can try out:\n\nLearn the other stuff SSH can do.", "Home automation technology has advanced considerably, and much is possible with DIY systems like Insteon.", "If you've never built a robot, build a robot.", "Complete a personal project\n\nIf you spend all day writing code for someone else, remember why you became a programmer by writing a program for yourself.", ")\n\nEach year, study the top ten vulnerabilities for the past 12 months.", "If you don't already practice whole-disk encryption, set aside time to do it."], "title": "12 resolutions for programmers"}, {"url": "http://natpryce.com/articles/000814.html", "summary": ["For example, I may have several components that display the eventual value of a promise, or display changing values of an Rx event stream, or are sources or targets for drag-and-drop interactions, and so on.", "It sounds like a job for mixins, but React\u2019s mixins don\u2019t work with ES6 classes and are going to be dropped from the API.", "The site uses the user\u2019s country to determine the currency in which to display prices, calculate shipping costs, etc.", "Both the country associated with the user\u2019s session and the list of all countries supported by the application are fetched by HTTP from the server in JSON format and displayed by React components.", "We can\u2019t achieve what we want with parent/child relationships between components, where a parent component handles the promise events and child components render the promised value.", "These are not the only React components in the application that need to display data loaded asynchronously from the server, so addressing that duplication will shrink the code significantly.", "When the promise is resolved successfully, the component displays the country information as a flag icon and name.", "An Example Use Case for Higher-Order Components\n\nImagine we\u2019re writing an international e-commerce site.", "But JavaScript only supports single inheritance, so if our components inherit event handling for promises, they cannot inherit base classes that provide event handling for other things, such as user interaction .", "When writing user interfaces with the React framework, I often find that several of my components have similar behaviour.", "They duplicate the state machine required to receive and render data obtained asynchronously from a promise."], "title": "Higher Order React Components"}, {"url": "http://odetocode.com/blogs/scott/archive/2015/10/07/modules-in-javascript-circa-2015.aspx", "summary": ["For example, if the humans module also exported the work function, the test code could have access to both exports with the following code.", "In the last few posts we'll look at new APIs the standard brings to life.", "Avoiding global scope has been a primary architectural goal of nearly every library and framework authored over the last ten years.", "Avoiding global scope in the browser has meant we\u2019ve relied heavily on closures and syntactical oddities like the immediately invoked function expression (IIFE) to provide encapsulation.", "import {Person} from \"./lib/humans\" describe(\"The humans module\", function () { it(\"should have a person class\", function () { var person = new Person(\"Scott\"); expect(person.doWork()).toBe(\"Scott is working\"); }); });\n\nModules can also export a list of symbols using curly braces, instead of using the export keyword on individual declarations.", "export class Animal { constructor(name) { this.name = name; } }\n\nAn index.js file in the lib folder can now combine the humans and creatures module into a single module.", "In CommonJS this scenario typically uses a file named index.js, and many of the existing module loader polyfills support using an index.js file when importing a directory.", "import {person, work} from \"./lib/humans\"\n\nYou also have the ability to alias an import to a different name.", "Let\u2019s change the humans module once again to export the Person class both as a named export and as a default export, and also export the work function.", "(function() { // code goes here, inside an IIFE }());\n\nAvoiding global scope also meant nearly every library and framework for the browser would expose functionality through a single global variable.", "Module Syntax\n\nImagine you want to use an object that represents a person, and in a file named humans.js you place the following code.", "Finally, curly braces enclose the imports list from the humans module.", "The ability to spread code across multiple files and directories while still being able to access the functionality exposed by any other file without going through a global mediator makes modules an important addition to the JavaScript language.", "This module standard uses a different syntax than both CommonJS and AMD, but tools like WebPack and polyfills like the ES6 module loader make all of the module standards mostly interoperable.", "Modules give us an implicit scope to hide implementation details.", "import \"./lib\"\n\nSummary\n\nWe're coming to the close on this long series of posts covering ES2015.", "For example, let\u2019s add a file named creatures.js to the lib folder.", "export * from \"./creatures\" export * from \"./humans\"\n\nThe test code can now import the lib directory and access features of both underlying modules.", "function work(name) { return `${name} is working`; } export let person = { name: \"Scott\", doWork() { return work(this.name); } }\n\nSince we are working with modules, the work function remains hidden in the module scope, and no code outside of the module will have access to the work function.", "Shortly afterward, another community standard, the Asynchronous Module Definition standard (AMD), appeared for browser programming."], "title": "Modules in JavaScript Circa 2015"}, {"url": "http://pouchdb.com/2015/05/18/we-have-a-problem-with-promises.html", "summary": ["Clarification: for these examples, I\u2019m assuming that both doSomething() and doSomethingElse() return promises, and that those promises represent something done outside of the JavaScript event loop (e.g.", "Advanced mistake #3: promises vs promise factories\n\nLet's say you want to execute a series of promises one after the other, in a sequence.", "So they write something like this:\n\n// I want to remove() all docs db .", ":( });\n\nAs it turns out, when you use the then(resolveHandler, rejectHandler) format, the rejectHandler won't actually catch an error if it's thrown by the resolveHandler itself.", "And if you don't believe me, here's proof: a refactor of PouchDB's map/reduce module to replace callbacks with promises.", "Unfortunately this means that any thrown errors will be swallowed, and you won't even see them in your console.", "If I didn't say return , then the getUserAccountById() would actually be a side effect, and the next function would receive undefined instead of the userAccount .", "Rookie mistake #5: using side effects instead of returning\n\nWhat's wrong with this code?", "reject ( new Error ( 'some awful error' ));\n\nAdvanced mistake #2: catch() isn't exactly like then(null, ...)\n\nI said above that catch() is just sugar.", "Instead, our program's entire flow is based on side effects: one function incidentally calling another one.", "For instance:\n\ngetUserByName ( 'nolan' ).", "Throw a synchronous error\n\nSpeaking of throw , this is where promises can get even more awesome.", "Return a synchronous value (or undefined)\n\nReturning undefined is often a mistake, but returning a synchronous value is actually an awesome way to convert synchronous code into promisey code.", "So while I recognize that, like JavaScript: The Good Parts, this blog post can only have a limited impact, it's hopefully something you can point people to when you see them making these same mistakes.", "For this reason, I've made it a personal habit to never use the second argument to then() , and to always prefer catch() .", "The second function doesn't care whether the userAccount was fetched synchronously or asynchronously, and the first function is free to return either a synchronous or asynchronous value.", "Advanced mistake #4: okay, what if I want the result of two promises?", "Return another promise\n\nThis is a common pattern you see in the promise literature, as in the \"composing promises\" example above:\n\ngetUserByName ( 'nolan' ).", "Awaiting async/await\n\nThat's the point I made in \"Taming the asynchronous beast with ES7\", where I explored the ES7 async / await keywords, and how they integrate promises more deeply into the language.", "Rookie mistakes\n\nSome people try to explain promises as a cartoon, or in a very noun-oriented way: \"Oh, it's this thing you can pass around that represents an asynchronous value.", "While superior to callbacks, promises are still difficult to understand and error-prone, as evidenced by the fact that I felt compelled to write this blog post.", "That is, you want something like Promise.all() , but which doesn't execute the promises in parallel.", "then ( function () { throw new Error ( 'oh noes' ); }, function ( err ) { // I didn't catch your error!", "Instead of having to write pseudo-synchronous code (with a fake catch() method that's kinda like catch , but not really), ES7 will allow us to use the real try / catch / return keywords, just like we learned in CS 101.", "It's so useful, that I've gotten in the habit of beginning nearly all of my promise-returning API methods like this:\n\nfunction somePromiseAPI () { return Promise .", "The whole point of promises is to give us back the language fundamentals we lost when we went async: return , throw , and the stack.", "There are three things:\n\nreturn another promise return a synchronous value (or undefined ) throw a synchronous error\n\nThat's it.", "catch ( function ( err ) { // handle error }); somePromise ().", "Let's say we want to throw a synchronous error in case the user is logged out.", "With callbacks, that error would get swallowed, but with promises, we can simply handle it inside our catch() function.", "Rookie mistake #1: the promisey pyramid of doom\n\nLooking at how people use PouchDB, which has a largely promise-based API, I see a lot of poor promise patterns.", "then ( function ( response ) { alert ( \"Pulled doc with id \" + element .", "If you find that hard to believe, consider this puzzle I recently posted to Twitter:\n\nQ: What is the difference between these four promises?", "To avoid this nasty scenario, I've gotten into the habit of simply adding the following code to my promise chains:\n\nsomePromise ().", "Writing code without a stack is a lot like driving a car without a brake pedal: you don't realize how badly you need it, until you reach for it and it's not there.", "So let's go through each point one at a time.", "Again, the function doesn't care whether the error it gets is synchronous or asynchronous.", "Blissfully confident that their promises could never possibly throw an error, many developers forget to add a .catch() anywhere in their code.", "bind ( console )); // <-- this is badass\n\nEven if you never expect an error, it's always prudent to add a catch() .", "Often times, one promise will depend on another, but we'll want the output of both promises.", "I'm also going to offer what I consider to be the singular insight, the one weird trick, that makes promises a cinch to understand.", "catch ( function ( err ) { // Boo, I got an error!", "_id , resp .", "});\n\nOkay, this is a good point to talk about everything you ever need to know about promises.", "So what you really want is an array of promise factories:\n\nfunction executeSequentially ( promiseFactories ) { var result = Promise .", "Rookie mistake #3: forgetting to add .catch()\n\nThis is another common mistake.", "First off, most promise libraries give you a way to \"import\" promises from third-party libraries.", "The big problem, which has revealed itself to me over the course of the past year, as I've watched numerous programmers struggle with the PouchDB API and other promise-heavy APIs, is this:\n\nMany of us are using promises without really understanding them.", "For this reason, I make it a personal habit to always return or throw from inside a then() function.", "The exception is when I'm writing asynchronous Mocha tests, where I might write a test to ensure that an error is thrown:\n\nit ( 'should throw an error' , function () { return doSomethingThatThrows ().", "But to start with, let's challenge some common assumptions about promises.", "You might na\u00efvely write something like this:\n\nfunction executeSequentially ( promises ) { var result = Promise .", "For instance, to wrap a callback-based API like Node's fs.readFile() , you can simply do:\n\nnew Promise ( function ( resolve , reject ) { fs .", "These mistakes I'd classify as \"advanced,\" because I've only seen them made by programmers who are already fairly adept with promises.", "then ( function () { // at this point, doSomething() is done, and we are back to indentation 0 });\n\nAs your promise code starts to get more complex, you may find yourself extracting more and more functions into named functions.", "id ]; // returning a synchronous value!", "As I said before, the magic of promises is that they give us back our precious return and throw .", "then ( function ( userAccount ) { // dangit, I need the \"user\" object too!", "But we're going to need to discuss them, if we want to be able to solve the puzzle I posed at the beginning of this post.", "then ( /* ... */ ); }\n\nJust remember: any code that might throw synchronously is a good candidate for a nearly-impossible-to-debug swallowed error somewhere down the line.", "});\n\nOur catch() will receive a synchronous error if the user is logged out, and it will receive an asynchronous error if any of the promises are rejected.", "The problem is that the first function is actually returning undefined , meaning that the second function isn't waiting for db.remove() to be called on all the documents.", "Rookie mistake #2: WTF, how do I use forEach() with promises?", "Advanced mistake #1: not knowing about Promise.resolve()\n\nAs I showed above, promises are very useful for wrapping synchronous code as asynchronous code.", "});\n\nWanting to be good JavaScript developers and avoid the pyramid of doom, we might just store the user object in a higher-scoped variable:\n\nvar user ; getUserByName ( 'nolan' ).", "Because in the end, these promise anti-patterns will still keep cropping up, as long as our tools don't tell us when we're making a mistake.", "As explained in the brilliant talk \"Redemption from Callback Hell\", the real problem with callbacks it that they deprive us of keywords like return and throw .", "Because there are still way too many of us who just need to admit: \"I have a problem with promises!", "then ( null , function ( err ) { // handle error });\n\nHowever, that doesn't mean that the following two snippets are equivalent:\n\nsomePromise ().", "Advanced mistakes\n\nOkay, now that you've learned the single trick that makes promises dead-easy, let's talk about the edge cases.", "then ( function () { return someOtherPromise (); }, function ( err ) { // handle error });\n\nIf you're wondering why they're not equivalent, consider what happens if the first function throws an error:\n\nsomePromise ().", "then ( /* ... */ ); // <-- this is all the code you need\n\nAnother strategy is to use the revealing constructor pattern, which is useful for wrapping non-promise APIs.", "then ( /* ... */ );\n\nThis is also incredibly useful for catching any synchronous errors.", "then ( /* ... */ )\n\nDone!", "This actually circles back to the previous point I made about promises vs promise factories.", "then ( function ( userAccount ) { // I got a user account!", "So Angular users can wrap PouchDB promises this way:\n\n$q .", "For instance, Angular's $q module allows you to wrap non- $q promises using $q.when() ."], "title": "We have a problem with promises"}, {"url": "http://raganwald.com/2014/04/26/what-does-javascript-value.html", "summary": ["push ( value ); }, pop : function () { var popped = this .", "\" } else if ( aType === 'undefined' ) { if ( bType === 'function' || bType === 'undefined' ) { result [ methodName ] = bDefinition ; } else if ( bType === 'object' ) { bResolverKey = Object .", "forEach ( function ( methodName ) { baseObject [ methodName ] = function () { var context = this [ safekeepingName ], result ; if ( context == null ) { context = partialProxy ( this , definedMethods .", "filter ( function ( methodName ) { return typeof ( temporaryMetaobject [ methodName ]) === 'function' ; }); } methods .", "defineProperty ( this , safekeepingName , { enumerable : false , writable : false , value : context }); } result = behaviour [ methodName ].", "apply ( this , argArray ); } } }; // helper for writing resolvable mixins function resolve ( mixin , policySpecification ) { var result = extend ( Object .", "The true state of the object is implicit in the object\u2019s behaviour, not explicit in the value of the .state property.", "slice ; // extend function extend () { var consumer = arguments [ 0 ], providers = __slice .", "call ( 0 , arguments )); } } else result [ methodName ] = bDefinition ; } else bType + \" cannot be used for '\" + methodName + \"'\" ; return result ; }, acc1 ); }, {}); }\n\nExamples:\n\n// composing compatible mixins composeBehaviour ( HasName , HasCareer ); // rejects incompatible mixins var HasEmployer = { // private property, initialized to null _name : null , // methods employer : function () { return this .", "Functions can compose objects as well, here\u2019s one of the simplest examples:\n\nvar __slice = [].", "this : result ; }; }); return baseObject ; }\n\nThe Prototype function builds prototypes out of an optional super-prototype (or null ) and one or more behaviours, objects with functions to mix in.", "career (); } }; var NameAndCareer = composeBehaviour ( HasName , HasCareer , IsSelfDescribing ); var Careerist = Prototype ( null , NameAndCareer ); var adolphe = Object .", "create ( optionalPrototype || null ), methodName ; for ( methodName in baseObject ) { if ( typeof ( baseObject [ methodName ]) === 'function' ) { ( function ( methodName ) { proxyObject [ methodName ] = function () { var result = baseObject [ methodName ].", "hasOwnProperty ( methodName )) { aDefinition = result [ methodName ]; aType = typeof ( aDefinition ); if ( aDefinition === null && bDefinition === null ) { throw \"'\" + methodName + \"' cannot be private to multiple mixins.", "function composeBehaviour () { var mixins = __slice .", "call ( arguments , 1 ); return behaviours .", "reduce ( function ( result , methodName ) { var bDefinition = mixin [ methodName ], bType = typeof ( bDefinition ), aDefinition , aType , bResolverKey , bDefinition ; if ( result .", "appendix 1: a function for composing prototypes out of mixins\n\nFirst, some helper functions:\n\nvar __slice = [].", "// stacking mixins var IsSelfDescribing = { name : undefined , career : undefined , description : function () { return this .", "Not a string that is used implicitly in some other code, but all of \u201cThe stuff that matters about aliveness and deadness.\u201d\n\nThis is not different than the example of passing functions around: They\u2019re both the same thing, taking something would be implicit in another design and/or another language, and making it explicit, making it a value.", "This example is the same thing as the example of a stack that handles undo with a stack of functions: Behaviour is treated as a first-class value, whether it be a single function or an object with multiple methods.", "slice ; function begin1 () { var fns = __slice .", "length > 0 ) { return concretes [ 0 ]; } } } function begin () { var fns = __slice .", "reduce ( function ( prototype , behaviour ) { return extendWithProxy ( prototype , behaviour ); }, baseObject ); }\n\nExamples:\n\nvar HasName = { // private property, initialized to null _name : null , // methods name : function () { return this .", "function Prototype () { var superPrototype = arguments [ 0 ], baseObject = Object .", "call ( arguments , 0 ); return function () { var args = arguments , values = fns .", "reduce ( function ( acc1 , mixin ) { return Object .", "keys ( bDefinition )[ 0 ]; bDefinition = bDefinition [ bResolverKey ]; if ( bResolverKey === 'around' ) { result [ methodName ] = function () { return bDefinition .", "push ( propertyName ); } } return properties ; } function extendWithProxy ( baseObject , behaviour ) { var safekeepingName = \"__\" + ++ number + \"__\" , definedMethods = methodsOfType ( behaviour , 'function' ), dependencies = methodsOfType ( behaviour , 'undefined' ), properties = propertyFlags ( behaviour ), methodName ; definedMethods .", "length - 1 ]; } } }\n\nBoth begin1 and begin take one or more functions, and turn them into a third function.", "slice ; function meld () { var melded = {}, providers = __slice .", "slice ; function extend () { var consumer = arguments [ 0 ], providers = __slice .", "Here\u2019s a function that transforms an object into a proxy for that object:\n\nfunction proxy ( baseObject , optionalPrototype ) { var proxyObject = Object .", "apply ( this , arguments ); } }, around : function around ( fn1 , fn2 ) { return function () { var argArray = [ fn1 .", "Alive : Dead ; } }; var Cell = { numberOfNeighbours : function () { return thisGame .", "Here\u2019s a design where we make the state explicit instead of implicit:\n\nfunction delegateToOwn ( receiver , propertyName , methods ) { var temporaryMetaobject ; if ( methods == null ) { temporaryMetaobject = receiver [ propertyName ]; methods = Object .", "call ( arguments , 0 ), dummy = function () {}; return mixins .", "hasOwnProperty ( key )) { consumer [ key ] = provider [ key ]; }; }; }; return consumer ; }; // partialProxy is like \"proxy,\" but it proxies a subset of an // object's methods and it also has a fixed set of mutable properties function partialProxy ( baseObject , methods , mutableProperties ) { var proxyObject = Object .", "_name = name ; return this ; } }; var HasCareer = { // private property, initialized to null _career : null , // methods career : function () { return this .", "We would be forgiven for thinking that there\u2019s nothing special about functions, they\u2019re values representing behaviour.", "They\u2019re handy for writing function advice, for creating sequences of functions to be evaluated for side effects, and for resolving method conflicts when composing mixins:\n\nvar __slice = [].", "And the power arising from this is the ability to write functions that transform and compose first-class values, creating an algebra of values.", "\" } else if ( aDefinition === null || bDefinition === null ) { throw \"'\" + methodName + \"' cannot be a method and a property.", "_name = name ; return this ; } }; composeBehaviour ( HasName , HasEmployer , HasCareer ); //=> '_name' cannot be private to multiple mixins.", "_songs ; } }; var HasAwards = { _awards : null , initialize : function () { this .", "location ); } } delegateToOwn ( Cell , 'state' , [ 'alive' , 'aliveInNextGeneration' ]); var someCell = extend ({ state : Alive , location : { x : - 15 , y : 12 } }, Cell );\n\nIn this design, delegateToOwn delegates the methods .alive and .stateInNextGeneration to whatever object is the value of a Cell \u2019s state property.", "career (); } }; // the prototype var Careerist = Prototype ( HasName , HasCareer , IsSelfDescribing ); // create objects with it var michael = Object .", "create ( Careerist ), bewitched = Object .", "description () //=> 'Adolphe Samuel is a Composer' // resolving method conflict var SingsSongs = { _songs : null , initialize : function () { this .", "_career = career ; return this ; } }; var IsSelfDescribing = { // dependencies, \"undefined in this mixin\" name : undefined , career : undefined , // method description : function () { return this ."], "title": "JavaScript Values Algebra"}, {"url": "http://raganwald.com/2014/05/13/how-to-trick-the-gullible-into-learning-a-new-language.html", "summary": ["And especially, design your new idea or language around something so insanely different that it weeds out the dilettantes at a glance.", "in closing\n\nMy thesis is that in early days, you need to select for people willing to invest in a new point of view, and having a glaringly self-indulgent features\u2013like funny syntax or a completely new model for managing asynchronicity\u2013is helpful to keeping the concentration of early \u201cwows\u201d to early \u201cmeh\u2019s\u201d high.", "why a new language is like ten million dollars in a nigerian bank\n\nWhen you\u2019re promoting a new idea, early adopters are gold.", "Think about people complaining that JavaScript promises are more \u201ccomplicated\u201d than callbacks, or that immutable data structures in ClojureScript are harder to understand than programming with mutable state.", "The ridiculously obvious letters help: Only the most trusting, greedy, and gullible people will respond to such insanely obvious letters, and there is a good chance of extracting money from such people.", "I wasn\u2019t entirely fascinated by the stories about plunging arms into boiling water, or of brown M&Ms and concert venues.", "But then the author revealed why Nigerian 419 scammers use such blatantly ridiculous letters to troll for victims:\n\nIf the Nigerian scam is so famous, why would a Nigerian scammer ever admit he is from Nigeria?", "You\u2019re looking for people who are a little like the Nigerian 419 victims.", "What the language needs is people using ClojureScript to write Clojure in the browser, and having a \u201cfunny\u201d syntax selects for people willing to invest in a new idea.", "Those people would go ahead and write books about it, and explore wild things like using do to create block scoping.", "An apathetic user won\u2019t write such vituperative blog posts, but they also won\u2019t take the trouble to really understand your language\u2019s \u201cbig idea,\u201d and they will complain that your new language isn\u2019t very good at doing the thing they\u2019ve always done, the way they\u2019ve always done it.", "You know\u2026 programmers too lazy to keep struggling with the old tech and with the hubris to believe they can adopt entirely new tech.", "I don\u2019t think CoffeeScript would have gotten anywhere without significant whitespace.", "You don\u2019t want people trying to save themselves from extinction, you don\u2019t want people trying to be 1% better, you want people greedy enough to hope your idea makes them an order of magnitude better.", "The very best thing is that the first few folks to try your idea have a very high willingness to adopt a new point of view."], "title": "How to Trick the Gullible into Learning a New Programming Language"}, {"url": "http://raganwald.com/2014/06/15/immutable-structs.html", "summary": ["amount ); moneyOrder = { amount : { dollars : 100 , cents : 0 }, fee : 1.50 } deposit ( currentAccount , moneyOrder .", "This version abandons that convention in favour of making Depositable a prototype check, and adds an explicit assertion method:\n\nfunction Struct () { var name = arguments [ 0 ], keys = [].", "constructor ; //=> [Function: Depositiable] cheque instanceof Depositable ; //=> true cheque instanceof RecordOfPayment ; //=> false\n\nAlthough Depositable and RecordOfPayment have the same structural type, they are different semantic types, and we can detect the difference with instanceof (and Object.isPrototypeOf ).", "defineProperty ( rentAmount , 'cents' , { enumerable : true , writable : false , value : 0 }); rentAmount .", "One thing to consider is the proposition that with few exceptions, a programming system cannot be improved solely by removing features that can be subject to abuse.", "' ] }\n\nImmutable properties make an object closed for modification.", "dollars //=> 420 // Strict Mode: !", "It also makes it easy to refactor to small, independent pieces.", "When we make it writable, assignments to the property change its value.", "currency = currency ; return currency ; } addCurrency ( rentAmount , \"CAD\" ) //=> TypeError: Can't add property currency, object is not extensible\n\nstructs\n\nMany other languages have a formal data structure that has one or more named properties that are open for modification, but closed for extension.", "With few exceptions, a programming system cannot be improved solely by removing features that can be subject to abuse.", "When we want to define multiple properties, we can also write:\n\nvar rentAmount = {}; Object .", "prototype = new Struct ({}); function copyAmount ( to , from ) { \"use strict\" to .", "preventExtensions ( struct ); } else return new Struct ( template ); } var rentAmount2 = Struct ({ dollars : 420 , cents : 0 }); addCurrency ( rentAmount2 , \"ISK\" ); //=> TypeError: Can't add property currency, object is not extensible\n\nAnd when you need an ImmutableStruct :\n\nfunction ImmutableStruct ( template ) { if ( ImmutableStruct .", "The code above could easily be changed to something like this:\n\ncheque = { amount : { dollars : 100 , cents : 0 }, number : 6 } deposit ( currentAccount , cheque .", "dollars //=> 420\n\nWe can make properties immutable, but that doesn\u2019t prevent us from adding properties to an object:\n\nrentAmount .", "So if we write:\n\nfunction deposit ( account , instrument ) { account .", "assertIsPrototypeOf ( cheque ); //=> Type Error: [object Object] is not a RecordOfPayment\n\nWe can use these \u201csemantic\u201d structs by adding assertions to critical functions:\n\nfunction deposit ( account , instrument ) { Depositable .", "\" ) rentAmount //=> { dollars : 420 , cents : 0 , feedbackComments : [ 'The rent is too damn high.", "JavaScript provides a way to make properties immutable:\n\nvar rentAmount = {}; Object .", "dollars = 600 ; }(); //=> TypeError: Cannot assign to read only property 'dollars' of #<Object> // Beware: Non-Strict Mode rentAmount .", "There is no checking of this in advance, like some other languages, but there also isn\u2019t any explicit declaration of these types.", "preventExtensions ( rentAmount ); function addCurrency ( amount , currency ) { \"use strict\" ; amount .", "defineProperty ( rentAmount , 'dollars' , { enumerable : true , writable : false , value : 420 }); Object .", "call ( arguments , 1 ), constructor = eval ( \"(function \" + name + \"(argument) { return initialize.call(this, argument); })\" ); function initialize ( argument ) { if ( constructor .", "But it can be extended to incorporate the notion of semantic types by turning it from and object factory into a \u201cfactory-factory.\u201d Here\u2019s a completely new version of Struct , we give it a name and the keys we want, and it gives us a JavaScript constructor function:\n\nfunction Struct () { var name = arguments [ 0 ], keys = []."], "title": "Structs and ImmutableStructs"}, {"url": "http://raganwald.com/2014/06/23/multiple-dispatch.html", "summary": ["For example, if a fighter\u2019s .crashInto(otherObject) method can handle crashing into meteors, we\u2019re imbuing fighters with knowledge about meteors.", "They work just fine for creating multiply dispatched methods:\n\nvar FighterPrototype = {}, MeteorPrototype = {}; FighterPrototype .", "isStruckByAMeteor ( this ) }, isStruckByAFighter : function ( fighter ) { // handle meteor-fighter collisions }, isStruckByAMeteor : function ( meteor ) { // handle meteor-meteor collisions } } var someFighter = Object .", "As long as they implement .hitsGround() , we\u2019re good.", "create ( FighterPrototype ), someMeteor = Object .", "radius = radius ; }, circumference : function () { return Math .", "isStruckByAFighter ( this ) }, isStruckByAFighter : function ( fighter ) { // handle fighter-fighter collisions }, isStruckByAMeteor : function ( meteor ) { // handle fighter-meteor collisions } } var MeteorPrototype = { crashInto : function ( objectThatCrashesIntoMeteors ) { return objectThatCrashesIntoMeteors .", "radius ; }, area : function () { return Math .", "They cannot return undefined (which in JavaScript, also includes not explicitly returning something).", "Fighters and meteors both have the same structural type, but different semantic types and different behaviour.", "Java may have type signatures to specialize methods, but it is still single dispatch, just like JavaScript.", "The function solution makes operations first-class, and shapes second-class.", "We could write this using metaobjects:\n\nvar Square = encapsulate ({ constructor : function ( length ) { this .", "Java\u2019s system uses dynamic dispatch for the receiver of a method: The class of the receiver is determined at run time and the appropriate method is determined based on that class.", "length != matchers .", "The object solution makes shapes first-class, and operations second-class.", "prelude: return values\n\nLet\u2019s start with a convention: Methods and functions must return something if they successfully handle a method invocation, or raise an exception if they catastrophically fail.", "Recall that this allowed us to write the Match function that took a serious of guards, functions that checked to see if the value of arguments was correct for each case.", "The mechanism is known as single dispatch because given an expression like a.b(c,d) , The choice of method to invoke given the method b is made based on a single receiver, a .", "But it\u2019s hard with the object solution: We have to make sure that we add a new method to each object.", "call ( this , arg )) return ; } value = body .", "apply ( this , arguments ); }; } return optionalFn == null ?", "apply ( this , arguments ); return value === undefined ?", "The Expression Problem is a programming design challenge: Given two orthogonal concerns of equal importance, how do we express our programming solution in such a way that neither concern becomes secondary?", "We have an established way of handling a meteors hitting the Earth or a fighter flying into the ground and crashing: We write a .hitsGround() method for meteors and for fighters.", "In languages with no other option, we\u2019re forced to do things like have one object\u2019s method know an extraordinary amount of information about another object.", "Manifestly typed OO languages like Java appear to support multiple dispatch.", "length - 1 ), body = arguments [ arguments .", "length = length ; }, circumference : function () { return this .", "Here\u2019s how we could implement collisions with special cases:\n\nvar FighterPrototype = { crashInto : function ( objectThatCrashesIntoFighters ) { return objectThatCrashesIntoFighters .", "crashInto = function ( q ) { // black box }; var ArmoredFighterPrototype = Object .", "Since more than one argument is checked dynamically, we say that Common Lisp has multiple dispatch.", "As far as JavaScript is concerned, we\u2019ve written:\n\nvar FighterPrototype = {}; FighterPrototype .", "And it\u2019s easy to add new kinds of things that can hit the ground.", "The compiler can figure out that thingOne is a Collidable and that it has two different signatures for the crashInto method, but all it knows about thingTwo is that it\u2019s a Collidable , the compiler doesn\u2019t know if it should be compiling an invocation of crashInto(Meteor meteor) or crashInto(Fighter fighter) , so it refuses to compile this code.", "So we\u2019ll write whenArgsAre , a guard that takes predicates for each argument as well as the body of the function case:\n\nfunction whenArgsAre () { var matchers = [].", "With multiple dispatch, generic functions can be specialized depending upon any of their arguments.", "We start with the same convention: Methods and functions must return something if they successfully hand a method invocation, or raise an exception if they catastrophically fail.", "length - 1 ]; return function () { var i , arg , value ; if ( arguments .", "crashInto = function ( q ) { // black box };\n\nWe\u2019ve written code that composes, but it doesn\u2019t decompose.", "Our example was modeling collisions between fighters and meteors, where we want to have different outcomes depending upon whether a fighter or a meteor collided with another fighter or a meteor.", "apply ( null , arguments ); }\n\nguarded functions\n\nWe can write ourself a simple method decorator that guards a function or method, and fails if the guard function fails on the arguments provided.", "Thus, if we write something like this pseudo-Java:\n\nCollidable thingOne = Math .", "In a simple (two objects and two methods) example, the expression problem does not seem like much of a stumbling block.", "Although we can specialize crashInto by the type of its argument, the Java compiler resolves this specialization at compile time, not run time.", "boundingBox returns the smallest square that encloses the shape), it\u2019s easy with the function solution: we add a new function and make sure it has a case for each kind of shape.", "var ArmoredFighterPrototype = Object .", "crashInto ( someMeteor ); //=> 'fighter(meteor)'\n\nWe now have usable dynamic multiple dispatch for generic functions and for methods.", "We can see this by adding new functionality:\n\nIf we add a new shape (e.f. Triangle ), it\u2019s easy with the object solution: Everything you need to know about a triangle goes in one place.", "For example:\n\nvar FighterPrototype = { crashInto : function ( otherObject ) { this .", "length * 4 ; }, area : function () { return this .", "length ; } }); var Circle = encapsulate ({ constructor : function ( radius ) { this .", "But it uses static dispatch for the specialization based on arguments: The compiler sorts out which specialization to invoke based on the declared type of the argument at compile time.", "new Meteor () : new Fighter (), Collidable thingTwo = Math ."], "title": "Greenspunning Predicate and Multiple Dispatch in JavaScript"}, {"url": "http://raganwald.com/2014/07/09/javascript-constructor-problem.html", "summary": ["Actually, it\u2019s worse than that:\n\n_foo //=> 'Fsked Up'\n\nJavaScript sets this to the global environment by default for calling an ordinary function, so we\u2019ve just blundered about in the global environment.", "Olivier Scherrer suggests the following pattern:\n\nfunction Fubar ( foo , bar ) { \"use strict\" if ( !", "But if we use the auto-instantiating version of Fubar :\n\nfunction Fubar ( foo , bar ) { \"use strict\" var obj , ret ; if ( this instanceof Fubar ) { this .", "_bar = bar ; } Fubar ( \"Situation Normal\" , \"All Fsked Up\" ); //=> Error: Fubar needs to be called with the new keyword\n\nSimple and safer than only relying on \"use strict\" .", "filter ( Fubar );\n\nsolution: kill it with fire\n\nIf we don\u2019t have some pressing need for auto-instantiation, and if we care not for overloaded functions, we may wish to avoid accidentally calling a constructor without using new .", "It\u2019s doesn\u2019t \u201cjust work,\u201d but it can make certain things possible (like decorating constructors) that are otherwise even more awkward to implement.", "_bar = bar ; } else return new Fubar ( foo , bar ); } Fubar ( \"Situation Normal\" , \"All Fsked Up\" ); //=> { _foo : 'Situation Normal' , _bar : 'All Fsked Up' }\n\nWhy bother making it work without new ?", "_bar = bar ; } var snafu = new Fubar ( \"Situation Normal\" , \"All Fsked Up\" );\n\nWhen you \u201ccall\u201d the constructor with the new keyword, you get a new object allocated, and the constructor is called with the new object as the current context.", "concatenated () //=> 'Situation Normal All Fsked Up'\n\nThanks to the internal mechanics of JavaScript\u2019s instanceof operator, we can use it to test whether an object is likely to have been created with a particular constructor:\n\nsnafu instanceof Fubar //=> true\n\n(It\u2019s possible to \u201cfool\u201d instanceof when working with more advanced idioms, or if you\u2019re the kind of malicious troglodyte who collects language corner cases and enjoys inflicting them on candidates in job interviews.", "If we can stomach the idea of one function doing two different things, we can make the constructor its own instanceof test:\n\nfunction Fubar ( foo , bar ) { \"use strict\" if ( this instanceof Fubar ) { this .", "preamble\n\nAs you know, you can create new objects in JavaScript using a Constructor Function, like this:\n\nfunction Fubar ( foo , bar ) { this .", "concatenated () //=> TypeError: Object [object Object] has no method 'concatenated'\n\nThis doesn\u2019t work because snafu is actually an instance of LoggingFubar , not of Fubar .", "_bar = bar ; } Fubar ( \"Situation Normal\" , \"All Fsked Up\" ); //=> TypeError: Cannot set property '_foo' of undefined\n\nAlthough \"use strict\" might be omitted from code in blog posts and books (mea culpa!", "solution: auto-instantiation\n\nIn Effective JavaScript, David Herman describes auto-instantiation.", "We can fix that somewhat:\n\nfunction Fubar ( foo , bar ) { \"use strict\" this .", "We can use this to detect whether our constructor has been called with new :\n\nfunction Fubar ( foo , bar ) { \"use strict\" var obj , ret ; if ( this instanceof Fubar ) { this ."], "title": "A JavaScript Constructor Problem, and Three Solutions"}, {"url": "http://raganwald.com/2015/02/02/destructuring.html", "summary": ["When working with a self-similar data structure, a recursive algorithm parallels the data\u2019s self-similarity.", "mapping\n\nAnother common problem is applying a function to every element of an array.", "Linear recursion is a basic building block of algorithms.", "Although that seems like something nobody would ever construct, many students have worked with almost the exact same thing when they explored various means of constructing arithmetic from Set Theory.", "const length = ([ first , ... rest ]) => first === undefined ?", "Let\u2019s take another example.", "We say that using ... to destructure is gathering, and using it in a literal to insert elements is called \u201cspreading.\u201d\n\ndestructuring parameters\n\nConsider the way we pass arguments to parameters:\n\nfoo () bar ( \"smaug\" ) baz ( 1 , 2 , 3 )\n\nIt is very much like an array literal.", "A function to compute the sum of the squares of a list of numbers might look like this:\n\nconst sumSquares = ([ first , ... rest ]) => first === undefined ?", "Given the signature:\n\nconst mapWith = ( fn , array ) => // ...\n\nWe can write it out using a ternary operator.", "Whereas if an element is an array, we\u2019ll flatten it and put it together with the rest of our solution.", "If we want to square each number in a list, we could write:\n\nconst squareAll = ([ first , ... rest ]) => first === undefined ?", "JavaScript has a built-in function for this, but let\u2019s write our own using linear recursion.", "Functions can take functions as arguments, so let\u2019s \u201cextract\u201d the thing to do to each element and separate it from the business of taking an array apart, doing the thing, and putting the array back together.", "So let\u2019s start our function with the observation that if an array is empty, the length is 0 :\n\nconst length = ([ first , ... rest ]) => first === undefined ?", "Self-Similarity\n\nRecursion is the root of computation since it trades description for time.\u2014Alan Perlis, Epigrams in Programming\n\nWe saw that the basic idea that putting an array together with a literal array expression was the reverse or opposite of taking it apart with a destructuring assignment.", "Its basic form parallels the way linear data structures like lists are constructed: This helps make it understandable.", "const mapWith = ( fn , [ first , ... rest ]) => first === undefined ?", "terminalValue : fn ( first , foldWith ( fn , terminalValue , rest ));\n\nAnd now we supply a function that does slightly more than our mapping functions:\n\nfoldWith (( number , rest ) => number * number + rest , 0 , [ 1 , 2 , 3 , 4 , 5 ]) //=> 55\n\nOur foldWith function is a generalization of our mapWith function.", "0 : 1 + length ( rest );\n\nLet\u2019s try it!", "isArray ( \"foo\" ) //=> false Array .", "So our first cut at a flatten function will look like this:\n\nconst flatten = ([ first , ... rest ]) => { if ( first === undefined ) { return []; } else if ( !", "We know that:\n\nconst [ car , ... cdr ] = [ 1 , 2 , 3 , 4 , 5 ];\n\nWhat is the reverse?", "We already know how to divide arrays into smaller pieces.", "The next terminal case is that if an element isn\u2019t an array, we don\u2019t flatten it, and can put it together with the rest of our solution directly.", "This simpler form of \u201cdivide and conquer\u201d is called linear recursion.", "const foldWith = ( fn , terminalValue , [ first , ... rest ]) => first === undefined ?", "[] : [ fn ( first ), ... mapWith ( fn , rest )]; mapWith (( x ) => x * x , [ 1 , 2 , 3 , 4 , 5 ]) //=> [1,4,9,16,25] mapWith (( x ) => !!"], "title": "Destructuring and Recursion in ES-6"}, {"url": "http://raganwald.com/2015/02/07/tail-calls-defult-arguments-recycling.html", "summary": ["= 5 x 4 x 3 x 2 x 1 = 120 .", "The right tool to discover why it\u2019s still slow is a memory profiler, but a simple inspection of the program will reveal the following:\n\nEvery time we call mapWith , we\u2019re calling [...prepend, fn(first)] .", "Here\u2019s our extremely simple mapWith function again:\n\nconst mapWith = ( fn , [ first , ... rest ]) => first === undefined ?", "Consider this implementation of length :\n\nconst length = ([ first , ... rest ]) => first === undefined ?", "But it works the same way: If we want the head of a list, we call car on it:\n\ncar ( oneToFive ) //=> 1\n\ncar is very fast, it simply extracts the first element of the cons cell.", "prepend : mapWith ( fn , rest , [... prepend , fn ( first )]); mapWith (( x ) => x * x , [ 1 , 2 , 3 , 4 , 5 ]) //=> [1,4,9,16,25]\n\nNow we don\u2019t need to use two functions.", "prepend : mapWith ( fn , rest , [... prepend , fn ( first )]); mapWith (( x ) => x * x , [ 1 , 2 , 3 , 4 , 5 ]) //=> [1,4,9,16,25]\n\nBut when we try it on very large arrays, we discover that it is still very slow.", "Garbage, Garbage Everywhere\n\nWe have now seen how to use Tail Calls to execute mapWith in constant space:\n\nconst mapWith = ( fn , [ first , ... rest ], prepend = []) => first === undefined ?", "[] : [ fn ( first ), ... mapWith ( fn , rest )]; mapWith (( x ) => x * x , [ 1 , 2 , 3 , 4 , 5 ]) //=> [1,4,9,16,25]\n\nLet\u2019s step through its execution.", "This keeps on happening, so that JavaScript collects the values 1 , 2 , 3 , 4 , and 5 plus housekeeping information by the time it calls mapWith((x) => x * x, []) .", "Here\u2019s our first cut:\n\nconst lengthDelaysWork = ([ first , ... rest ], numberToBeAdded ) => first === undefined ?", "0 + numberToBeAdded : lengthDelaysWork ( rest , 1 + numberToBeAdded ) lengthDelaysWork ([ \"foo\" , \"bar\" , \"baz\" ], 0 ) //=> 3\n\nThis lengthDelaysWork function calls itself in tail position.", "JavaScript provides this exact syntax, it\u2019s called a default argument, and it looks like this:\n\nconst factorial = ( n , work = 1 ) => n === 1 ?", "prepend : mapWithDelaysWork ( fn , rest , [... prepend , fn ( first )]); const mapWith = callLast ( mapWithDelaysWork , []); mapWith (( x ) => x * x , [ 1 , 2 , 3 , 4 , 5 ]) //=> [1,4,9,16,25]\n\nWe can use it with ridiculously large arrays:\n\nmapWith (( x ) => x * x , [ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 , 37 , 38 , 39 , 40 , 41 , 42 , 43 , 44 , 45 , 46 , 47 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 63 , 64 , 65 , 66 , 67 , 68 , 69 , 70 , 71 , 72 , 73 , 74 , 75 , 76 , 77 , 78 , 79 , 80 , 81 , 82 , 83 , 84 , 85 , 86 , 87 , 88 , 89 , 90 , 91 , 92 , 93 , 94 , 95 , 96 , 97 , 98 , 99 , // ... 2980 , 2981 , 2982 , 2983 , 2984 , 2985 , 2986 , 2987 , 2988 , 2989 , 2990 , 2991 , 2992 , 2993 , 2994 , 2995 , 2996 , 2997 , 2998 , 2999 ]) //=> [0,1,4,9,16,25,36,49,64,81,100,121,144,169,196, ...", "Let\u2019s fix that:\n\nconst lengthDelaysWork = ([ first , ... rest ], numberToBeAdded ) => first === undefined ?", "We can do similar thngs with our other tail-recursive functions:\n\nconst length = ([ first , ... rest ], numberToBeAdded = 0 ) => first === undefined ?", "We can use this technique with mapWith :\n\nconst mapWithDelaysWork = ( fn , [ first , ... rest ], prepend ) => first === undefined ?", "default arguments\n\nOur problem is that we can directly write:\n\nconst factorial = ( n , work ) => n === 1 ?", "numberToBeAdded : length ( rest , 1 + numberToBeAdded ) length ([ \"foo\" , \"bar\" , \"baz\" ]) //=> 3 const mapWith = ( fn , [ first , ... rest ], prepend = []) => first === undefined ?"], "title": "Tail Calls, Default Arguments, and Excessive Recycling in ES-6"}, {"url": "http://raganwald.com/2015/02/13/functional-quantum-electrodynamics.html", "summary": ["For example, (x) => 42 is a constant function that always evaluates to 42.", "lists with functions as data\n\nHere\u2019s another look at linked lists using POJOs.", "const node = ( x ) => ( y ) => ( whenEmpty , unlessEmpty ) => unlessEmpty ( pair ( x )( y ));\n\nLet\u2019s try it:\n\nconst l123 = node ( 1 )( node ( 2 )( node ( 3 )( EMPTYLIST ))); print ( l123 ) //=> 1 2 3\n\nWe can write reverse and mapWith as well.", "rest , delayed + 1 ); length ( OneTwoThree ) //=> 3\n\nA very long time ago, mathematicians like Alonzo Church, Moses Sch\u00f6nfinkel, Alan Turing, and Haskell Curry and asked themselves if we really needed all these features to perform computations.", "The superficial conclusion reads something like this:\n\nFunctions are a fundamental building block of computation.", "0 : 1 + length ( rest ( aPair )); length ( l123 ) //=> 3 const reverse = ( aPair , delayed = EMPTY ) => aPair === EMPTY ?", "the vireo\n\nGiven that our latin data is represented as the function (selector) => selector(\"primus\")(\"secundus\") , our obvious next step is to make a function that makes data.", "Now we\u2019ll take it one more step forward: Passing a value to K gets a function back, and passing a value to that function gets us a value.", "Given two values, K(I) always returns the second value.", "In our code so far (Destructuring and Recursion in ES-6 and Tail Calls, Default Arguments, and Excessive Recycling in ES-6), we have used arrays and objects to represent the structure of data, and we have extensively used the ternary operator to write algorithms that terminate when we reach a base case.", "Here\u2019s length again:\n\nconst length = ( aPair ) => aPair === EMPTY ?", "The kestrel, or K , is a function that makes constant functions.", "This is fundamentally not the same thing as this code for the length of a linked list:\n\nconst length = ( node , delayed = 0 ) => node === EMPTY ?", "0 : 1 + length ( aPair ( rest )); length ( l123 ) //=> 3\n\nAnd mapWith ?", "It is a tenet of Object-Oriented Programming, but it is not exclusive to OOP: We can and should design data structures to hide implementation information from the code that use them, whether we are working with functions, objects, or both.", "For example, this length function uses a functions to bind values to names, POJOs to structure nodes, and the ternary function to detect the base case, the empty list.", "There are many tools for hiding implementation information, and we have now seen two particularly powerful patterns:\n\nInstead of directly manipulating part of an entity, pass it a function and have it call our function with the part we want.", "Given two values, we can say that K always returns the first value: K(x)(y) => x (that\u2019s not valid JavaScript, but it\u2019s essentially how it works).", "const reverse = ( aPair , delayed = EMPTY ) => aPair === EMPTY ?", "a return to backward thinking\n\nTo make pairs work, we did things backwards, we passed the first and rest functions to the pair, and the pair called our function.", "delayed : reverse ( aPair ( rest ), pair ( aPair ( first ))( delayed )); const mapWith = ( fn , aPair , delayed = EMPTY ) => aPair === EMPTY ?", "We used functions to replace arrays and POJOs, but we still use JavaScript\u2019s built-in operators to test for equality ( === ) and to branch ?", "And with care, we can do amazing things like use functions to represent numbers, build more complex data structures like trees, and in fact, anything that can be computed can be computed using just functions and nothing else.", "0 : 1 + length ( aPair ( rest ));\n\nLet\u2019s presume we are working with a slightly higher abstraction, we\u2019ll call it a list .", "For example:\n\nconst K = ( x ) => ( y ) => x ; const fortyTwo = K ( 42 ); fortyTwo ( 6 ) //=> 42 fortyTwo ( \"Hello\" ) //=> 42\n\nThe identity function is a function that evaluates to whatever parameter you pass it.", "So we can write:\n\nconst first = K , second = K ( I ), pair = V ; const latin = pair ( \"primus\" )( \"secundus\" ); latin ( first ) //=> \"primus\" latin ( second ) //=> \"secundus\"\n\nAs an aside, the Vireo is a little like JavaScript\u2019s .apply function.", "first //=> 3 const length = ( node , delayed = 0 ) => node === EMPTY ?", "Having a list know itself whether it is empty hides implementation information from the code that uses lists.", "Armed with nothing more than K , I , and V , we can make a little data structure that holds two values, the cons cell of Lisp and the node of a linked list.", ": provided, but using functions and nothing else.", "For example, we don\u2019t need arrays to represent lists, or even POJOs to represent nodes in a linked list.", "But without building our way up to something insane like writing a JavaScript interpreter using JavaScript functions and no other data structures, let\u2019s take things another step in a slightly different direction.", "rest , delayed + 1 );\n\nThe line node === EMPTY presumes a lot of things.", "For objects we\u2019d write: cons = (first, second) => {first, second} .", "delayed : reverse ( rest ( aPair ), pair ( first ( aPair ), delayed )); const mapWith = ( fn , aPair , delayed = EMPTY ) => aPair === EMPTY ?"], "title": "The Quantum Electrodynamics of Functional JavaScript"}, {"url": "http://raganwald.com/2015/02/17/lazy-iteratables-in-javascript.html", "summary": ["The effect is even more pronounced when we use methods like first , until , or take :\n\nStack .", "hasOwnProperty ( key )) { consumer [ key ] = provider [ key ] } } } return consumer }; const mapIterableWith = ( fn , iterable ) => extend ({ [ Symbol .", "log ( s ) } //=> 1 9 25 49 81\n\nFor completeness, here are two more handy iterable functions.", "The expression Symbol.iterator evaluates to a special symbol representing the name of the method that objects should use if they return an iterator object.", "Let\u2019s make iterable numbers.", "eager iterables\n\nArrays have eager semantics for .map , .filter , .rest and .take .", "value ; } return sum } collectionSum ( stack ) //=> 2015\n\nUsing [Symbol.iterator] instead of .iterator seems like adding an extra moving part for nothing.", "Whereas the .map and .filter methods on Pair work with iterators.", "EMPTY : Pair ( value , interationToList ( iteration )); })( iterable [ Symbol .", "EMPTY : Pair1 ( value , interationToList ( iteration )); })( iterable [ Symbol .", "value ; } return sum } collectionSum ( stack ) //=> 2015\n\nNow our .iterator() method is returning an iterator object.", "filter (( x ) => x % 2 == 0 ) .", "undefined : fn ( value )}); } } } }, LazyIterable ); const reduceIterableWith = ( fn , seed , iterable ) => { const iterator = iterable [ Symbol .", "index < 0 }, iterator : function () { let iterationIndex = this .", "iterator ] : () => { let n = 0 ; return { next : () => ({ done : false , value : n ++ }) } } }\n\nThere are useful things we can do with iterables representing an infinite number of elements.", "isEmpty ()) { return { done : true } } else { const value = currentPair .", "Here\u2019s mapIterableWith , it takes any iterable and returns an iterable representing a mapping over the original iterable:\n\nconst mapIterableWith = ( fn , iterable ) => ({ [ Symbol .", "They return another array, not a lazy iterable.", ")\n\nHere are two more operations on iterables, filterIterableWith and untilIterable :\n\nconst filterIterableWith = ( fn , iterable ) => ({ [ Symbol .", "next (); done = done || fn ( value ); return ({ done , value : done ?", "And there\u2019s one more thing: You recall that the spread operator ( ... ) can spread the elements of an array in an array literal or as parameters in a function invocation.", "Instead, the language encourages new code to be written with a different name for the method that a collection object uses to return its iterator.", "Acting on the elements of a collection one at a time is called iterating over the contents, and JavaScript has a standard way to iterate over the contents of collections.", "undefined : value }); } } } }, LazyIterable ); const firstIterable = ( iterable ) => iterable [ Symbol .", "They have to be lazy, otherwise we couldn\u2019t write things like:\n\nconst Numbers = extend ({ [ Symbol .", "Like this:\n\nconst Stack2 = ()) => ({ array : [], index : - 1 , push : function ( value ) { return this .", "One useful thing is to write a .from function that gathers an iterable into a particular collection type.", "If we give it a Stack3 , we don\u2019t get a stack back.", "undefined : value }); } } } });\n\nAnd here\u2019s a computation performed using operations on iterables: We\u2019ll print the odd squares that are less than or equal to one hundred:\n\nconst compose = ( fn , ... rest ) => (... args ) => ( rest .", "Here\u2019s a stack that has its own functional iterator method:\n\nconst Stack1 = () => ({ array : [], index : - 1 , push : function ( value ) { return this .", "Compare these two:\n\n[ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ] .", "To ensure that the method would not conflict with any existing code, JavaScript provides a symbol.", "from ( takeIterable ( numberToTake , this )); } }) const EagerStack = () => extend ({ array : [], index : - 1 , push : function ( value ) { return this .", "from ([ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 ]) .", "from ( restIterable ( this )); }, take : function ( numberToTake ) { return gatherable .", "filter (( x ) => x % 2 == 0 ) ); [... evenSquares ] //=> [4,16,36,64,100]\n\nOr if we want to design a collection with eager semantics for .map , .filter , .rest and .take , we can do that:\n\nconst EagerIterable = ( gatherable ) => ({ map : function ( fn ) { return gatherable .", "\" ) const iter = stack .", "Each collection knew how to map itself ( .map ), how to fold itself ( .reduce ), how to filter itself ( .filter ) and how to find one element within itself ( .find ).", "For example, if we want a lazy map of an array, we can use the mapIterableWith function to return a lazy iterable.", "index += 1 ] = value ; }, pop : function () { const value = this .", "They are equivalent to destructuring arrays with [first, ...rest] :\n\nconst firstIterable = ( iterable ) => iterable [ Symbol .", "Same with .filter , we get an iterable that can iterate over the even squares, but not an actual stack or array.", "reduce (( seed , element ) => seed + element , 0 ) Pair .", "value //=> \"to\"\n\nThe way we\u2019ve written .iterator as a method, each object knows how to return an iterator for itself.", "log ( ` filtering $ { x } ` ); return x % 2 == 0 }) .", "first () //=> squaring 29 filtering 841 squaring 28 filtering 784 784\n\nIf we write the almost identical thing with an array, we get a different behaviour:\n\n[ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 ] .", "value ); } return accumulator ; }; const filterIterableWith = ( fn , iterable ) => extend ({ [ Symbol .", "map (( x ) => x * 2 ) //=> {\"array\":[10,8,6,4,2],\"index\":4}\n\nAnd we can go back and forth between them.", "cdr ; return { done : false , value } } } } } }, LazyIterable ); Pair .", "Since there was no particular standard way to do it, people used all sorts of methods, and their methods returned all sorts of things: Objects with various interfaces, functional iterators, you name it.", "next (); return iterator ; } }, LazyIterable ); const takeIterable = ( numberToTake , iterable ) => extend ({ [ Symbol .", "fn ( value )); return { done , value }; } } } }, LazyIterable ); const untilIterable = ( fn , iterable ) => extend ({ [ Symbol .", "iterator ()) //=> 6\n\nWe could save a step and write collectionSum , a function that folds over any object, provided that the object implements an .iterator method:\n\nconst collectionSum = ( collection ) => { const iterator = collection .", "index ; } if ( iterationIndex < 0 ) { return { done : true }; } else { return { done : false , value : this .", "next (); done = done || remainingElements -- <= 0 ; return ({ done , value : done ?", "index -= 1 } return value }, isEmpty : function () { return this .", "iterator ]()); // Stack const Stack = () => extend ({ array : [], index : - 1 , push : function ( value ) { return this .", "Our functions don\u2019t need to know anything about how an object implements iteration, and we get the benefit of lazily traversing our objects.", "So, when a standard way to write iterators was added to the JavaScript language, it didn\u2019t make sense to use a method like .iterator() for it: That would conflict with existing code.", "log ( ` filtering $ { x } ` ); return x % 2 == 0 })[ 0 ] //=> squaring 0 squaring 1 squaring 2 squaring 3 ... squaring 28 squaring 29 filtering 0 filtering 1 filtering 4 ... filtering 784 filtering 841 784\n\nArrays copy-on-read, so every time we perform a map or filter, we get a new array and perform all the computations.", "But it\u2019s still illustrative to dissect something important: Array\u2019s .map and .filter methods gather their results into new arrays.", "from ([ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 ]) .", "Whereas, the Stack and Pair collections we wrote have lazy semantics: They return a lazy iterable and when we want a true collection, we have to gather the elements into an array or another collection using .from :\n\nconst evenSquares = Pair .", "We\u2019ll do that using the [ ] syntax for using an expression as an object literal key:\n\nconst Stack3 = () => ({ array : [], index : - 1 , push : function ( value ) { return this .", "from = ( iterable ) => ( function interationToList ( iteration ) { const { done , value } = iteration .", "iterator ]())\n\nNow we can go \u201cend to end,\u201d If we want to map a linked list of numbers to a linked list of the squares of some numbers, we can do that:\n\nconst numberList = Pair1 .", "For example, if we spread a large collection just to find an element in the collection, it might have been wiser to iterate over the element using its iterator directly.", "undefined : fn ( value )}); } } } });\n\nThis illustrates the general pattern of working with iterables: An iterable is an object, representing a collection, with a [Symbol.iterator] method, that returns an iteration over the elements of a collection.", "And if we want to create convenience methods, we can reuse common pieces:\n\nconst extend = function ( consumer , ... providers ) { for ( let i = 0 ; i < providers ."], "title": "Lazy Iterables in JavaScript"}, {"url": "http://raganwald.com/2015/02/21/interviewing-for-a-front-end-job.html", "summary": ["We\u2019ll use it to check that our Game is working as an iterable:\u201d\n\nconst takeIterable = ( numberToTake , iterable ) => ({ [ Symbol .", "the problem\n\nAfter some small talk, Christine explained that they liked to ask candidates to whiteboard some code.", "random () * ( size - 4 )), 2 + Math .", "iterator ] : function * () { let remainingElements = numberToTake ; for ( let element of iterable ) { if ( remainingElements -- <= 0 ) break ; yield element ; } } });\n\n\u201cThis doesn\u2019t actually end up in our solution, it\u2019s just to check our work as we go along.", "value ) { return true ; } } return false ; };\n\n\u201cA long time ago,\u201d The Carpenter explained, \u201cSomeone asked me a question in an interview.", "hasCycle ( positionsOf ( game ))\n\n\u201cThis solution makes use of iterables and a single utility function, statefulMapIterableWith .", "I\u2019ll show it here for clarity:\u201d\n\nconst statefulMapIterableWith = ( fn , seed , iterable ) => ({ [ Symbol .", "The question was, Given a linked list, detect whether it contains a cycle.", "Use constant space.\u201d\n\n\u201cThis is, of course, the most common solution, it is Floyd\u2019s cycle-finding algorithm, although there is some academic dispute as to whether Robert Floyd actually discovered it or was misattributed by Knuth.\u201d\n\n\u201cThus, the solution to the game problem is:\u201d\n\nconst terminates = ( game ) => !", "\u201cHaving turned our game loop into an iterable, we can now see that our problem of whether the game terminates is isomorphic to the problem of detecting whether the positions given ever repeat themselves: If the chequer ever returns to a position it has previously visited, it will cycle endlessly.\u201d\n\n\u201cWe could draw positions as nodes in a graph, connected by arcs representing the arrows.", "placeholders to determine whether the game halts?\u201d\n\nthe carpenter\u2019s solution\n\nThe Carpenter was not surprised at the problem.", "random () * 4 )]; } } // initialize the position let initialPosition = [ 2 + Math .", "What happened at Thing?\u201d Bob wanted to know, \u201cI asked them what they thought of you, and all they would say was, Writes unreadable code.", "\u201c\u2191, \u2192, \u2191, \u2193, \u2191, \u2192\u2026\u201d Write an algorithm that will determine whether the game halts, strictly from the called out directions, in finite time and space.", "Bob had, in fact, warned The Carpenter that \u201cThing\u201d liked to ask either or both of two questions: Determine how to detect a loop in a linked list, and determine whether the chequerboard game would halt.", "\u201cTo begin with, I\u2019ll transform a game into an iterable that generates arrows, using the \u2018Starman\u2019 notation for generators.\u201d\n\n\u201cI will add just five lines of code the Game function, and two of those are closing braces:\u201d\n\nreturn ({ [ Symbol .", "This type of solution provided an excellent opportunity to explore lazy versus eager evaluation, the performance of iterators versus native iteration, single responsibility design, and many other rich topics.", "Now that we have created an iterable of values that can be compared with === , I can show you this function:\u201d\n\n// implements Tortoise and Hare cycle // detection algorithm.", "The Carpenter was confident that although nobody would write this exact code in production, prospective employers would also recognize that nobody would try to detect whether a chequer game terminates in production, either.", "For that, we\u2019ll map the Game iterable to positions."], "title": "Interviewing for a JavaScript Job"}, {"url": "http://raganwald.com/2015/02/23/the-last-word-on-interviewing.html", "summary": ["That goes for rejecting a company because you don\u2019t like one question they ask as well.", "But, if we then get a hunch that the Carpenter will always write complicated code, we\u2019re now guessing.", "value ) { return true ; } } return false ; }; const terminates = ( game ) => !", "As the player moves the chequer, they calls out the direction of movement, e.g.", "It is 100% grade-A bullshit for a candidate to write some code and then \u201cfail\u201d them because they tried to address one of those four objectives but the interviewer was trying to satisfy a different objective.", "There is another, more subtle \u201cflaw,\u201d namely that the Carpenter treats the game as an ordered collection, but the verbal description of the problem presents the directions as a stream.", "If the metric was really, \u201cMake sure no good person escapes without an offer,\u201d then we would want to make sure that this wasn\u2019t a simple transcription error, or the result of interview pressure.", "done ) { return false ; } if ( tortoiseValue === hareResult .", "Likewise, companies that are amazing at interviewing people might have to hire a lot of people because good people leave.", "snap judgments\n\nIt\u2019s fairly easy to say, \u201cNo hire, because X,\u201d or, \u201cI wouldn\u2019t want to work at Thing, because Y.\u201d But really, we have almost no information to go on.", "The alternative is to hire people who have a lot of experience going on interviews.", "hasCycle ( positionsOf ( game ))\n\nI left that flaw in because I wanted to create the dynamic where Christine dislikes the code for other reasons, but fails him for getting one character wrong.", "next ()); for ( let tortoiseValue of iterable ) { hareResult = hare .", "To reiterate:\n\nThe game board is hidden from us.", "A player moves the chequer, following the rules.", "Unless she is a full-time professional technical interviewer, she probably spends twenty hours programming for every one hour interviewing.", "If for whatever reason she seems to be clumsy or ask poor questions, why should we make assumptions about what she would be like as a fellow programming colleague?", "And for all his experience, the Carpenter doesn\u2019t interview for a living.", "next ()); for ( let tortoiseValue of orderedCollection ) { hareResult = hare .", "The correct function would be:\n\n// implements Tortoise and Hare cycle // detection algorithm.", "The Carpenter tries to convert the problem into a graph problem, but Christine fails him out of the interview without even giving him a chance to test and polish his first draft.", "The problem is this: The game board is hidden from us.", "I happen to think that is the case for what Christine wanted, and I wrote the story.", "random () * 4 )]; } } // initialize the position const position = [ Math .", "random () * ( size - 4 )), 2 + Math .", "uses arrow in one place and direction in another: Sloppy naming.", "Christine had her pet problem, and in her head, a kind of script for what she would ask the Carpenter once he wrote some obvious bits of code.", "This is definitely the fictitious Carpenter\u2019s fault.", "in one place and in another: Sloppy naming.", "Demonstrate that you understand algorithm fundamentals like space and time requirements, mutability, state, and so forth.", "Many people commented that he was trying to be a show-off, but I\u2019d like to point out that Plissken did tell him that the company liked to ask about cycle detection, so the Carpenter was simply trying to show Christine something he thought she wanted to see.", ": Doesn\u2019t understand DRY.", "In the story, he tried to joke about that:\n\nThere\u2019s an old joke that a mathematician is someone who will take a five-minute problem, then spend an hour proving it is equivalent to another problem they have already solved.", "random () * 4 )]; } } // initialize the position let initialPosition = [ 2 + Math .", "value ) { return true ; } hareResult = hare .", "For example, the Carpenter got the terminates function wrong.", "\u201c\u2191, \u2192, \u2191, \u2193, \u2191, \u2192\u2026\u201d Write an algorithm that will determine whether the game halts, strictly from the called out directions, in finite time and space.", "When asked a programming question, an interviewer might want to see any of the following mutually exclusive things:\n\nDemonstrate that you can put together any old basic thing (\u201cFizBuzzing\u201d).", "But if they want to see how you write code for production, they do.", "When I wrote the problem, I deliberately inserted a rather obvious flaw.", "The story concerns a job interview, where the interviewer (\u201cChristine\u201d) asks the candidate (known as \u201cThe Carpenter\u201d) to whiteboard JavaScript code solving this problem:\n\nConsider a finite checkerboard of unknown size.", "As I noted, Christine is unlikely to be very good at the job of interviewing, because she doesn\u2019t interview people for a living.", "It would have taken five seconds to say, \u201cWell we could solve this with a Set, but it\u2019s isomorphic to a problem of finding cycles in a graph, would you like me to solve it that way?\u201d\n\nthe problem with programming problems\n\nQuite frankly, whiteboard problems in interviews are minefields.", "gets terminate wrong: FAIL.", "repeats MOVE : Doesn\u2019t understand DRY.", "Being good at dating doesn\u2019t say anything about whether someone is good at being in a relationship."], "title": "(unlikely to be) The Last Word on Interviewing for a JavaScript Job"}, {"url": "http://raganwald.com/2015/03/12/symmetry.html", "summary": ["match ( /^c/i ) startsWithC ( likesToDrink ( 'Alice' )) //=> true const likesSomethingStartingWithC = compose ( startsWithC , likesToDrink ); likesSomethingStartingWithC ( 'Ted' ) //=> false\n\nSo far, that\u2019s good, clean blue function work.", "const safePlusOne = requiresFinite ( plusOne ); safePlusOne ( 1 ) //=> 2 safePlusOne ([]) //=> throws \"Bad Wolf\"\n\nBut it won\u2019t work on methods.", "But everything would break if a khaki method was introduced that didn\u2019t play nicely with our blue combinators\n\nThe safe thing to do is to write all our higher-order functions in green style, so that they work for functions or methods.", "log ( ` $ { name } prefers to drink $ { drink } ` ) } //=> undefined is not a function (evaluating 'personToDrink[Symbol.iterator]()')\n\nWe could write:\n\nfor ( let [ name , drink ] of Object .", "what would make decorators and combinators difficult\n\nImagine, if you will, that functions came in two colours: blue, and khaki.", "circumference () //=> 31.4159265\n\nFactoryFactory turns any red class into a blue function.", "We\u2019d have to make colour-coded decorators, like a blue maybe and a khaki maybe .", "If we write const square = (x) => x * x , but elsewhere we write square(5) , it won\u2019t work because square is a blue function and square(5) would be a khaki invocation.", "circumference () //=> undefined is not an object (evaluating 'this.radius')\n\nWhoops, we forgot that method invocation is khaki code, so our blue requiresFinite decorator will not work on methods.", "composing functions with green code\n\nFortunately, we can write higher-order functions like decorators and combinators in a style that works for both \u201cpure\u201d functions and for methods.", "Or we could write a notaFruit function:\n\nconst notaFruit = ( f ) => f !== 'apple' && f !== 'banana' && f !== 'orange' ; [ 'pecan' , 'apple' , 'chocolate' , 'cracker' , 'orange' ].", "This allows us to write decorators and combinators that work with any function.", "We could also wrap new Circle(...) in a function:\n\nclass Circle { constructor ( radius ) { this .", "Exceptions to the ways functions combine, like the new keyword, handling this , and [...] , make combining awkward, but we can work around that by writing adaptors to convert these exceptions to regular function calls.", "map ( Circle ) //=> Cannot call a class as a function\n\nAnd we certainly can\u2019t use a decorator on them:\n\nconst CircleRequiringFiniteRadius = requiresFinite ( Circle ); const round3 = new CircleRequiringFiniteRadius ( 3 ); //=> Cannot call a class as a function\n\nSome experienced developers dislike new because of this problem: It introduces one more kind of function that doesn\u2019t compose neatly with other functions using our existing decorators and combinators.", "Here\u2019s Dictionary , a function that turns objects and arrays (our \u201ccharmed\u201d functions) into ordinary (blue) functions:\n\nconst Dictionary = ( data ) => ( key ) => data [ key ]; const personToDrink = { Bob : 'Ristretto' , Carol : 'Cappuccino' , Ted : 'Allong\u00e9' , Alice : 'Cappuccino' } [ 'Bob' , 'Ted' , 'Carol' , 'Alice' ].", "the composability problem\n\nWe often write decorators in blue, a/k/a pure functional style.", "It works for decorating both methods and functions:\n\nconst requiresFinite = ( fn ) => function ( n ) { if ( Number .", "So we can\u2019t write:\n\nfor ( let [ name , drink ] of personToDrink ) { console .", "map ( maybe ( x => x * x )) //=> [1,null,9,16,null,36,49]\n\nAnd to make combinators like compose :\n\nconst compose ( fn , ... rest ) => rest .", "call ( this , x )); }\n\nWhat makes JavaScript tolerable is that green handling works for both functional (blue) and method invocation (khaki) code.", "circumference () //=> throws \"Bad Wolf\"\n\nAll that being said, programming with factory functions instead of with classes and new is not a cure-all.", "what makes decorators and combinators easy\n\nThe power arising from functions-as-first-class-entities is that we have a very flexible way to make functions out of functions, using functions.", "So instead of writing a Circle class, we would write a CirclePrototype and a CircleFactory function:\n\nconst CirclePrototype = { circumference () { return Math .", "circumference () //=> throws \"Bad Wolf\"\n\nLooks good, let\u2019s put it into production:\n\nCircle .", "map ( Dictionary ( personToDrink )) //=> [\"Ristretto\",\"Allong\u00e9\",\"Cappuccino\",\"Cappuccino\"]\n\nDictionary makes it easier for us to use all of the same tools for combining and manipulating functions on arrays and objects that we do with functions.", "We can\u2019t make circles using blue function calls:\n\nconst round2 = Circle ( 2 ); //=> Cannot call a class as a function [ 1 , 2 , 3 , 4 , 5 ].", "call ( this , n ); } else throw \"Bad Wolf\" ; } Circle .", "Invoke the method with with .call or .apply , e.g bar.call(foo, baz) .", "Besides losing some of the convenience and familiarity for other developers, we\u2019d also have to use extreme discipline for fear that accidentally introducing some red classes would break our carefully crafted \u201cblue in green\u201d application.", "circumference () //=> 37.69911184307752\n\nNow we have a blue CircleFactory function, and we have the benefits of objects and methods, along with the benefits of decorating and composing factories like any other function.", "call ( this , n ); } else throw \"Bad Wolf\" ; } const FiniteCircleFactory = requiresFinite ( CircleFactory ); FiniteCircleFactory ( 2 ).", "We might have a function like this:\n\nconst isaFruit = ( f ) => f === 'apple' || f === 'banana' || f === 'orange' ; isaFruit ( 'orange' ) //=> true\n\nWe can use it to pick fruit from a basket, using an array\u2019s .filter method:\n\n[ 'pecan' , 'apple' , 'chocolate' , 'cracker' , 'orange' ].", "Here\u2019s a decorator that makes a function throw an exception if its argument is not a finite number:\n\nconst requiresFinite = ( fn ) => ( n ) => { if ( Number .", "log ( ` $ { name } prefers to drink $ { drinks ( name )} ` ) } //=> Bob prefers to drink Ristretto Ted prefers to drink Allong \u00e9 Carol prefers to drink Cappuccino Alice prefers to drink Cappuccino\n\nThis technique has limitations.", "But there\u2019s something else: The fact that all functions are called in the exact same way.", "So we can use it any where we like:\n\n[ 1 , 2 , 3 , 4 , 5 ].", "We can use that to name another function, or even use it inline as an expression:\n\nconst not = ( fn ) => (... args ) => !", "filter ( notaFruit ) //=> [\"pecan\",\"chocolate\",\"cracker\"]\n\nWe could also take advantage of function expressions and inline the logical negation of isaFruit :\n\n[ 'pecan' , 'apple' , 'chocolate' , 'cracker' , 'orange' ].", "circumference () //=> 6.2831853\n\nThat new keyword introduces yet another colour of function, constructors are red functions.", "iterator ](... args ); } return proxy ; } const people = IterableDictionary ([ 'Bob' , 'Ted' , 'Carol' , 'Alice' ]); const drinks = IterableDictionary ( personToDrink ); for ( let name of people ) { console .", "log ( ` $ { name } prefers to drink $ { drink } ` ) } //=> Bob prefers to drink Ristretto Carol prefers to drink Cappuccino Ted prefers to drink Allong \u00e9 Alice prefers to drink Cappuccino\n\nIt would be an enormous hack to make Object.entries(IterableDictionary(personToDrink)) work.", "( fn (... args )) const anotherNotaFruit = not ( isaFruit ); anotherNotaFruit ( \"pecan\" ) //=> true [ 'pecan' , 'apple' , 'chocolate' , 'cracker' , 'orange' ].", "For example:\n\nconst requiresFinite = ( fn ) => function ( n ) { if ( Number ."], "title": "The Symmetry of JavaScript Functions (revised)"}, {"url": "http://raganwald.com/2015/04/01/partial-application.html", "summary": ["For example, the built-in function Math.max returns the largest of its arguments, or null if no arguments are supplied:\n\nMath .", "As a preamble, let\u2019s make ourselves a mapWith function that maps a function over any collection that has a .map method:\n\nconst mapWith = ( unaryFn , collection ) => collection .", "Let\u2019s make it so we can pass one argument and we get back a function that takes as many remaining arguments as we like:\n\nconst ____ = ( fn , x ) => function (... remainingArgs ) { return fn .", "We can do that with leftPartialApplication , but we can\u2019t with arbitraryPartialApply , because we want to accept an arbitrary number of arguments:\n\nconst maxDefaultZero = leftPartialApply ( Math .", "Let\u2019s make it khaki by passing this properly:\n\nconst ____ = ( fn , x ) => function ( y ) { return fn .", "And here\u2019s our finished function, properly named:\n\nconst leftPartialApply = ( fn , ... partiallyAppliedArgs ) => function (... remainingArgs ) { return fn .", "max ( - 1 , - 2 , - 3 ) //=> -1 Math .", "If we were able to partially apply the mapWith function, we\u2019d get back the right to finish applying it later, with the other argument.", "No problem:\n\nconst rightPartialApply = ( fn , ... partiallyAppliedArgs ) => function (... remainingArgs ) { return fn .", "So what we want is a function that takes this:\n\nconst mapWith = ( unaryFn , collection ) => collection .", "map ( unaryFn ); const square = ( n ) => n * n ; const partiallyAppliedMapWith = mapWith ( square ); partiallyAppliedMapWith ([ 1 , 2 , 3 ]) //=> [1, 4, 9]\n\nThe thing is, we don\u2019t want to always write our functions in this way.", "There are specialized terms we can use: A \u201cbinary\u201d function accepts two, a \u201cternary\u201d function accepts three, and you can rustle about with greek or latin words and invent names for functions that accept more than three arguments.", "We can\u2019t get a result without the other argument, so as we\u2019ve written it, it breaks:\n\nmapWith ( square ) //=> undefined is not an object (evaluating 'collection.map')\n\nBut let\u2019s imagine that we could apply fewer arguments.", "For one thing, it doesn\u2019t work with methods, it\u2019s strictly a blue higher-order function.", "\u201cPartial application is the conversion of a polyadic function into a function taking fewer arguments arguments by providing one or more arguments in advance.\u201d JavaScript does not have partial application built into the language (yet), but it is possible to write our own higher-order functions that perform left-, right-, or arbitrary partial application.", "Some of this material originally appeared in What\u2019s the difference between Currying and Partial Application?", "It partially applies one argument to any function that takes two arguments.", "_ ; const dividedByThree = arbitraryPartialApply ( div , 'divided by' , _ , 3 ); dividedByThree ( 2 ) //=> 2 divided by 3 is 0.6666666666666666\n\nArbitrary partial application handles most of the cases for left- or right-partial application, but has more internal moving parts.", "const ____ = ( fn , ... partiallyAppliedArgs ) => function (... remainingArgs ) { return fn .", "max ( - 1 , - 2 , - 3 ) //=> 0 maxDefaultZero () //=> 0\n\nSo there\u2019s good reason to have left-, right-, and arbitrary partial application functions in our toolbox.", "concat ( remainingArgs )); }; const add = ( verb , a , b ) => ` The $ { verb } of $ { a } and $ { b } is $ { a + b } ` const sum2 = ____ ( add , 'sum' , 2 ); sum2 ( 3 ) //=> The sum of 2 and 3 is 5\n\nWhat we have just written is a left partial application function: Given any function and some arguments, we partially apply those arguments and get back a function that applies those arguments and any more you supply to the original function."], "title": "Partial Application in ECMAScript 2015"}, {"url": "http://raganwald.com/2015/04/03/left-variadic.html", "summary": ["But if we wanted to write left-variadic functions, could we make ourselves a leftVariadic decorator to turn a function with one or more arguments into a left-variadic function?", "Here it is in all of its ECMAScript-5 glory:\n\nvar __slice = Array .", "length + 1 ), spread = args .", "left-variadic destructuring\n\nGathering arguments for functions is one of the ways JavaScript can destructure arrays.", "log ( ` squad coached by $ { coach } ` ); } team ( 'Luis Enrique' , 'Xavi Hern\u00e1ndez' , 'Marc-Andr\u00e9 ter Stegen' , 'Mart\u00edn Montoya' , 'Gerard Piqu\u00e9' ) //=> Xavi Hern \u00e1 ndez ( captain ) Marc - Andr \u00e9 ter Stegen Mart \u00ed n Montoya Gerard Piqu \u00e9 squad coached by Luis Enrique\n\nBut we can\u2019t go the other way around:\n\nfunction team2 (... players , captain , coach ) { console .", "a history lesson\n\nIn \u201cYe Olde Days,\u201d JavaScript could not gather parameters, and we had to either do backflips with arguments and .slice , or we wrote ourselves a variadic decorator that could gather arguments into the last declared parameter.", "Easy in ECMAScript 2015:\n\nfunction team ( coach , captain , ... players ) { console .", "Mind you, we can take advantage of modern JavaScript to simplify the code:\n\nconst leftVariadic = ( fn ) => { if ( fn .", "summary\n\nECMAScript 2015 makes it easy to gather parameters or array elements from the right.", "length - outputArrayLength + 1 ), spread = inputArray .", "log ( ` squad coached by $ { coach } ` ); } //=> Unexpected token\n\nECMAScript 2015 only permits gathering parameters from the end of the parameter list.", "For example:\n\nconst abccc = ( a , b , ... c ) => { console .", "concat ( spread ) ); } } }; const butLastAndLast = leftVariadic (( butLast , last ) => [ butLast , last ]); butLastAndLast ( 'why' , 'hello' , 'there' , 'little' , 'droid' ) //=> [[\"why\",\"hello\",\"there\",\"little\"],\"droid\"]\n\nOur leftVariadic function is a decorator that turns any function into a function that gathers parameters from the left, instead of from the right."], "title": "Left-Variadic Functions in JavaScript"}, {"url": "http://raganwald.com/2015/04/24/hilberts-school.html", "summary": ["Parked on each flight deck are an infinite number of buses, each of which contains\u2013you guessed it\u2013an infinite number of sailors and air crew eager to join our school for the next semester.\u201d\n\n\u201cWrite a JavaScript program to seat them all in our lecture hall.", "log ( ` $ { from } -> $ { to } ` ); } //=> 0 -> 1 1 -> 3 2 -> 5 3 -> 7 4 -> 9 5 -> 11 ...\n\nBertie calls out the seat numbers on Jeff\u2019s bus and the number of an odd-numbered (and therefore vacant) seat in the auditorium for them to occupy.", "This time, he digs into his copy of JavaScript Allonge, The \u201cSix\u201d Edition and writes the following:\n\nconst zipIterables = (... iterables ) => ({ [ Symbol .", "Bertie has managed to add an infinite number of students to an infinitely large but full auditorium.", "If you can prove that no program works, you will also receive your diploma.", "Each sends an infinitely large bus, with every seat full.", "He quickly observes that no matter what finite power he chooses, he can put the total number of students into a one-to-one correspondence with the countably infinite number of seats in his auditorium.", "Well, this seats an infinite number of Redditors on an infinite number of buses in an infinite auditorium that was already full.", "If you think of the buses and seats forming a square, the diagonals iterator makes a path from one corner and works its way out, enumerating over every possible combination of bus and seat.", "The simplest way to infer that this is true is to observe that each aircraft carrier contains a countably infinite number of buses, each carrying a countably infinite number of students.", "day one\n\nWell, an infinite number of students show up on the first day.", "iterator ] : function * () { const iterators = iterables .", "He finishes with a summary of what he learned seating students:\n\nYou can put a countably infinite number of seats into a one-to-one correspondence with the numbers, therefore they have the same cardinality.", "done ), values = pairs .", "This means that seats 0 through 999,999 become vacant, so the 1,000,000 new students have a place to sit.", "So step one is to take each aircraft carrier\u2019s students and put them into a one-to-one correspondence with the numbers counting from zero.", "Out comes the bullhorn and yesterday\u2019s program, and he quickly moves all of his existing students into the even-numbered seats, leaving an infinite number of odd seats available for newcomers.", "You can add a finite number to an countably infinite number and put your new number into a one-to-one correspondence with the numbers, therefore infinity plus a finite number has the same cardinality as the numbers.", "day three\n\nHis fame spreads, and Jeff Atwood starts a discussion about Bertie\u2019s JavaScript School on his new Discourse discussion platform.", "Bertie is perplexed, but after scratching his head for a few moments, whips out his bullhorn and write the following JavaScript:\n\nconst mapIterableWith = ( fn , iterable ) => ({ [ Symbol .", "day five\n\nOn Day Five, everyone is back and he announces that there will be a test: \u201cOutside our doors,\u201d he announces, \u201cAre an infinite number of aircraft carriers, each of which has an infinitely large flight deck.", "log ( ` $ { from } -> $ { to } ` ); } //=> 0 -> 1000000 1 -> 1000001 2 -> 1000002 3 -> 1000003 ...\n\nHe\u2019s constructed an iterable with instructions for moving seats.", "There\u2019s so much interest, Jeff charters a bus with an infinite number of seats and brings his infinite number of fans to Bertie\u2019s school for Day Three.", "You can add infinity to infinity and put your new number into a one-to-one correspondence with the numbers, therefore infinity plus infinity has the same cardinality as the numbers.", "We can put this into a one-to-one correspondence with the seat numbers using diagonalization, so now we have all the students in seats.", "Three infinities (aircraft carriers, buses, and students) is infinity to the third power.", "log ( seat ); } //=> 0 1 2 3 ...", "Like Jeff\u2019s bus, each bus numbers its seat from zero and as luck would have it, each bus has has a number and the buses are numbered from zero.", "You can add an infinite number of infinities to infinity and put your new number into a one-to-one correspondence with the numbers, therefore an infinity times infinity has the same cardinality as the numbers.", "Now that we have done this, we have an infinite number of aircraft carriers, each containing a countably infinite number of students.", "day four\n\nDay Three went well, so all the students return and the auditorium remains full."], "title": "Hilbert's Grand JavaScript School (2015 Edition)"}, {"url": "http://raganwald.com/2015/05/08/carnac-the-magnificent.html", "summary": ["And if you write your way around eval , you\u2019re a \u201ctheorist\u201d who doesn\u2019t know when to use the right tool for the job.", "Here\u2019s the most na\u00efve code I can think of:\n\nfor ( let o1 of [ \"\" , \"+\" , \"-\" ]) { for ( let o2 of [ \"\" , \"+\" , \"-\" ]) { for ( let o3 of [ \"\" , \"+\" , \"-\" ]) { for ( let o4 of [ \"\" , \"+\" , \"-\" ]) { for ( let o5 of [ \"\" , \"+\" , \"-\" ]) { for ( let o6 of [ \"\" , \"+\" , \"-\" ]) { for ( let o7 of [ \"\" , \"+\" , \"-\" ]) { for ( let o8 of [ \"\" , \"+\" , \"-\" ]) { const expr = ` 1 $ { o1 } 2 $ { o2 } 3 $ { o3 } 4 $ { o4 } 5 $ { o5 } 6 $ { o6 } 7 $ { o7 } 8 $ { o8 } 9 ` ; const value = eval ( expr ); if ( value === 100 ) { console .", "Likewise, here\u2019s a recursive solution:\n\nfunction solutions ( accumulatedOutput , runningTotal , ... numbers ) { if ( numbers .", "123456789 , 12345678-9 , 12345678+9 , 1234567-89 , 1234567-8-9 , 1234567-8+9 , 1234567+89 , 1234567+8-9 , 1234567+8+9 , \u2026), then use eval to compute the answer, and select those that evaluate to 100 .", "Or be up front that you want production-ish code:\n\nWrite a program that outputs all possibilities to put + or - or nothing between the numbers 1 , 2 , \u2026, 9 (in this order) such that the result is always 100 .", "length > 0 ) { const [ second , ... butSecond ] = butFirst ; solutions ( accumulatedOutput , runningTotal , first * 10 + second , ... butSecond ); } } } solutions ( \"\" , 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 );\n\n(es6fiddle)\n\nIt\u2019s faster, and more beautiful mathematically, but it\u2019s actually harder to understand how it works than the iterative solution.", "And if you do optimize, you\u2019re wasting time that could be better used for another part of the interview.", "You aren\u2019t testing whether the candidate can solve hard problems, you\u2019re testing whether the candidate can write code just before an all-hands where the CEO will announce layoffs.", "Here\u2019s an example from a blog post that is currently causing tongues to wag:\n\nWrite a program that outputs all possibilities to put + or - or nothing between the numbers 1 , 2 , \u2026, 9 (in this order) such that the result is always 100 .", "For example: 1 + 2 + 34 \u2013 5 + 67 \u2013 8 + 9 = 100 .", "tl;dr\n\nHidden possible requirements add stress to the interviewing process, and it\u2019s bad stress, not good stress.", "Let me be brutally frank:\n\nPart of the job of being a software developer is to understand the ways in which things that appear simple\u2014like code, user experiences, security protocols, and almost everything else we touch\u2014are not actually simple.", "the right way forward\n\nIf all you want is working code, say so, preferably in writing so that all candidates get the same information:\n\nWrite a program that outputs all possibilities to put + or - or nothing between the numbers 1 , 2 , \u2026, 9 (in this order) such that the result is always 100 .", "As did this one, based on Generators and Iterators:\n\n// Utility function from https://leanpub.com/javascriptallongesix const filterIterableWith = ( fn , iterable ) => ({ [ Symbol .", "Or encourage the candidate to ask questions:\n\nWrite a program that outputs all possibilities to put + or - or nothing between the numbers 1 , 2 , \u2026, 9 (in this order) such that the result is always 100 ."], "title": "Carnac the Magnificent"}, {"url": "http://raganwald.com/2015/05/11/javascript-classes.html", "summary": ["But you can\u2019t manipulate those constructors to change the behaviour of objects that have already been constructed, instance behaviour is early-bound by default.", "This can be denoted with the class keyword, by working with a function\u2019s default .prototype property, or by composing functions and objects independently.", "And yet other languages treat objects as dictionaries, where properties and even methods can be added, modified, or removed with abandon.", "Other languages, like Java, permit objects to access each other\u2019s state.", "\u201cobject-oriented programming\u201d can mean almost anything\n\nFrom this whirlwind tour of \u201cobject-oriented programming,\u201d we can see that the ideas behind \u201cobject-oriented programming\u201d have some common roots in the history of programming languages, but each language implements its own particular flavour in its own particular way.", "prototypes are not classes\n\nPrototypical languages like Self and NewtonScript eschew classes altogether, using prototypes to define common behaviour for a set of objects.", "That being said, there really is no one definition of \u201cobject-oriented.\u201d For one thing, there is no one definition of \u201cobject.\u201d\n\nobjects\n\nSome languages, like Smalltalk and Ruby, treat an object as a fully encapsulated entity.", "Since that time, languages have either bolted object-ish ideas on top of their existing paradigms (like Object Pascal and OCaml), baked them in alongside other paradigms (like JavaScript), or embraced objects wholeheartedly.", "By default, objects directly manipulate each other\u2019s state.", "In JavaScript, object and array literals construct objects that delegate behaviour to the standard library\u2019s object prototype and array prototype, respectively.", "Its creators, Ole-Johan Dahl and Kristen Nygaard, did not use those words to describe what would eventually become the dominant paradigm in computing.", "Using prototypes and constructor functions, JavaScript programs can emulate many of the features of classes in other languages.", "constructors\n\nSome languages allow programs to construct objects independently, others (notably those that are heavily class-centric) require that objects always be constructed by their classes.", "For example, The Common Lisp Object System defines behaviour with classes, and it also defines behaviour with generic functions.", "A decade later, Dr. Alan Kay coined the phrase \u201cObject-Oriented Programming\u201d along with co-creating the Smalltalk programming language.", "Some languages (again, like Java) have very rigid objects and classes, it is impossible or awkward to add new methods or properties to objects at run time."], "title": "OOP, JavaScript, and so-called Classes"}, {"url": "http://raganwald.com/2015/05/30/de-stijl.html", "summary": ["That\u2019s why languages like C++ implement const as an annotation on top of an existing declaration.", "So:\n\nfunction callFirst ( fn , larg ) { return function () { var args = Array .", "So if we simplify our arraySum with a for...in loop, we\u2019ll need an IIFE around the for loop to prevent any let within the loop from leaking into the surrounding scope, and one inside the for loop to preserve its value within the block.", "But we get the general idea: If we were willing to live with this code, we could get rid of a lot or even all uses of var from our programs.", "If JavaScript followed the same philosophy, const would be an annotation on top of an existing declaration:\n\nIt might look something like this:\n\n@ const function sumFrom ( original , i ) { let sum = 0 ; let @ const array = original .", "One can see immediately that var and let may be theoretically unnecessary, but in practice make the functions we write simpler, and therefore easier to read and write.", "If we take var away too, we get even more IIFEs.", "This point also cannot be repeated enough, and again I\u2019ll settle for repeating it just once: The value of an immutable data structure is that you don\u2019t have to examine everywhere the data structure is accessed to know that the data structure is not mutated.", "But when the IIFE represents a block within the body of the function, we can only return the value of the block if it returns something.", "Is var really necessary in function scope?", "There\u2019s some argument that restricting variables to being constant \u201cmakes a function easier to reason about.\u201d Of course that\u2019s true in the literal English sense, but if you don\u2019t rebind references, a function is just as easy to reason about if you use const as if you use let .", "Variables declared with var have exactly the same scope as function arguments.", "If we take let away and only use var , we have to add IIFEs to get block scope.", "As you know, const behaves exactly like let , however when a program is first parsed, it is analyzed, and if there are any lines of code that attempt to assign to a const variable, an error is generated.", "This is not surprising: const isn\u2019t a scoping construct, it\u2019s a typing construct.", "join ( ', ' )} from $ { i } is $ { sum } ` }\n\nCan be translated to:\n\nfunction sumFrom ( original , i ) { let sum = 0 , array = original .", "So something like this:\n\nfunction maybe ( fn ) { return function (... args ) { for ( let arg of args ) { if ( arg == null ) return null ; } return fn .", "Variables in JavaScript have a fixed scope: You can see every single rebinding of a variable within the lexical scope of the function, and there\u2019re only two ways to rebind a variable; With a simple assignment, or with a destructuring assignment.", "concat ( args )) } }\n\nWould become:\n\nfunction callFirstWithoutVar ( fn , larg ) { return function ( args ) { args = Array .", "If it helps any, pretend that nearly every statement has a footnote reading, \u201cfor most cases in practice, however ______.\u201d\n\nECMAScript-2015 gives us three different variable declaration statements: var , let , and const .", "Removing var by changing it into parameters involves the creation of additional IIFEs, cluttering the code and changing the runtime behaviour.", "So the following:\n\nfunction sumFrom ( original , i ) { let sum = 0 ; const array = original .", "apply ( this , args ) } }\n\nOr a return when we don\u2019t know what we are returning:\n\nfunction maybe ( fn ) { return function (... args ) { for ( let arg of args ) { if ( arg == null ) return arg ; } return fn .", "It\u2019s just that with let , you have to read the whole function to see which variables are rebound and which aren\u2019t.", "join ( ', ' )} from $ { i } is $ { sum } ` }\n\nThis can be rewritten as:\n\nfunction sumFrom ( original , i ) { var sum = 0 , array = original .", "call ( arguments , 0 ); return fn .", "Whereas, const does not make functions simpler than let , but does provide a kind of annotation that saves us some effort when examining a function.", "For this reason, any code within a program could modify data.", "Guaranteeing that an array is immutable means examining everywhere the array is accessed and verifying that none of those accesses mutate the array, much as guaranteeing that a variable is const means examining everywhere the variable is used and verifying that none of those uses change its binding.", "One way to answer that question is to perform a thought experiment:\n\nTake a function using one of these features, and convert it to an equivalent function that doesn\u2019t use the feature.", "As we saw above, variables have a fixed scope, we always know exactly what we have to review, and thus reasoning about variables is easy.", "And let\u2019s make it interesting: Can we get rid of var without using let ?", "This point cannot be repeated enough, but I\u2019ll settle for repeating it just once: The value of const is that you don\u2019t have to examine everywhere the variable is used to know that the variable is not rebound.", "done )) { (() => { var value = array [ i ++ ]; sum += value ; })(); } return sum }\n\nBy the way, the performance is worse than rubbish, because we\u2019re creating and discarding our IIFE on every trip through the loop.", "Let\u2019s write a completely contrived function:\n\nfunction sumFrom ( original , i ) { let sum = 0 , array = original .", "And thus, providing a guarantee about variable rebinding may sound like guarantees about data immutability, but it is is considerably less valuable.", "So, one strategy for removing var from functions is to replace declared variables with function arguments."], "title": "How necessary are var, let, and const?"}, {"url": "http://raganwald.com/2015/06/04/classes-are-expressions.html", "summary": ["lastName = last ; return this ; } };\n\nJust like a function declaration, we can also write a class expression:\n\nlet Person = class { constructor ( first , last ) { this .", "Imagine that we wish to accommodate an optional middle name:\n\nclass Person { constructor ( first , last , middle ) { this .", "Next, we\u2019ll extract some variables:\n\nlet firstNameProperty = 'firstName' , lastNameProperty = 'lastName' ; class Person { constructor ( first , last ) { this .", "Instances of Person won\u2019t have properties like .lastName , they will be properties like ['Symbol(lastName)_v.cn3u8ad08'] .", "lastName = last ; return this ; }\n\nclasses with class\n\nECMAScript 2015 provides the class keyword and \u201ccompact method notation\u201d as syntactic sugar for writing a function and assigning methods to its prototype (there is a little more involved, but that isn\u2019t relevant here).", "Let\u2019s use symbols instead of strings:\n\nlet firstNameProperty = Symbol ( 'firstName' ), lastNameProperty = Symbol ( 'lastName' ); class Person { constructor ( first , last ) { this .", "No two symbols are alike, ever:\n\nSymbol () !=== Symbol ()\n\nSymbols have string representations, although they may appear cryptic:\n\nSymbol ().", "Furthermore, JavaScript automatically makes these properties non-enumerable, so they won\u2019t show up should we use things like for...in loops.", "In our Person , it looks very much to the eye like firstName and lastName are intended to be private, while other objects interact with a person using the .rename and .fullName methods.", "lastName = last ; return this ; } };\n\nThis is interesting, because it shows that creating a class in JavaScript (whether we write constructor functions or use the class keyword) is evaluating an expression.", "lastName = last ; return this ; }\n\nPerson is a constructor function, and it\u2019s also a class, in the JavaScript sense of the word \u201cclass.\u201d As we\u2019ve written it here, it\u2019s a function declaration.", "We have always been able to create a JavaScript class like this:\n\nfunction Person ( first , last ) { this .", "toString () //=> Symbol(Allong\u00e9)_s.jii7eyiyza\n\nThere are some ways that JavaScript makes symbols especially handy.", "So it will be difficult for other code to directly manipulate the properties we use for a person\u2019s first and last name.", "But what makes JavaScript different from languages like Java or C++ is that JavaScript\u2019s flexibility gave us the tools to construct our own way to encapsulate properties inside an instance, and to encapsulate the construction of a class inside an IIFE.", "names = names ; return this ; } };\n\nPresto, we just broke everything that depends directly upon .firstName and .lastName .", "toString () //=> Symbol(undefined)_s.mbsi4nduh\n\nYou can add your own text to help make it intelligible:\n\nSymbol ( \"Allong\u00e9\" ).", "If one writes the wrong thing in .firstName or .lastName , all the other pieces of code using Person could break.", "So let\u2019s begin by rewriting Person to use strings for property keys:\n\nclass Person { constructor ( first , last ) { this .", "We\u2019ll make this one a named class expression to help with debugging and what-not:\n\nlet firstNameProperty = Symbol ( 'firstName' ), lastNameProperty = Symbol ( 'lastName' ); let Person = class Person { constructor ( first , last ) { this .", "The usual argument against other code reading or writing .firstName and .lastName directly is that makes it difficult to modify the Person class.", "Using symbols as property names, for example.", "Prerequisite: This post presumes that readers are familiar with JavaScript\u2019s objects, know how a prototype defines behaviour for an object, know what a constructor function is, and how a constructor\u2019s .prototype property is related to the objects it constructs.", "middleName = middle ; return this ; } };\n\nHow awkward, but so far nothing breaks, not even the code that directly accesses .firstName and .lastName .", "Passing familiarity with ECMAScript 2015 syntax like let and gathering parameters will be extremely helpful.", "Let\u2019s use symbols to do so:\n\nusing symbols to encapsulate private properties\n\nIn ECMAScript 2015, a symbol can be a property name.", "a problem with encapsulation\n\nOne of the huge problems with OOP in JavaScript is that it is very easy for code to become highly coupled.", "But as applications and teams grow, and deadlines loom, and SEV-1 incidents occur, the best of intentions get watered down, and over time, the code gradually becomes fragile.", "The code using Person depends upon it\u2019s behaviour.", "We won\u2019t write them out here, but every piece of code that uses Person depend upon each other using it correctly.", "First, let\u2019s review the ECMAScript 2015 Symbol :\n\nsymbols\n\nIn its simplest form, Symbol is a function that returns a unique entity.", "So we can now write our Person class like this:\n\nclass Person { constructor ( first , last ) { this .", "We\u2019ll use let just to get into the ECMAScript 2015 swing of things (many people would use const , that doesn\u2019t matter here):\n\nlet Person = function ( first , last ) { this .", "Other languages have features like private instance variables, of course."], "title": "Classes are Expressions (and why that matters)"}, {"url": "http://raganwald.com/2015/06/10/mixins.html", "summary": ["First, sometimes functionality does not neatly decompose in a tree-like form.", "_collected_books = []); } })\n\nWe have just \u201cmixed\u201d methods concerned with collecting books into our Person class.", "Another benefit is not obvious from a toy example, but in production systems classes can grow to be very large.", "Even if a mixin is not used in more than one class, decomposing a large class into mixins helps fulfil the Single Responsibility Principle.", "And antiquarian book stores collect books just like bibliophiles.", "why this matters\n\nThere are other ways to decompose responsibilities for classes (such as delegation and composition), but the point here is that if we wish to use mixins, it is very simple and easy to do, because JavaScript does not have a large and complicated OOP mechanism that imposes a rigid model on programs.", "JavaScript\u2019s choice to build OOP out of simple parts\u2013objects, functions, and properties\u2013makes the development of new ideas possible.", "lastName = last ; return this ; } }\n\nprototypes are objects\n\nIf we want to change the behaviour of a JavaScript object, we can add, remove, or modify methods of the object by adding, removing, or modifying the functions bound to properties of the object.", "For example, instead of binding functions to a prototype one-at-a-time, we can bind them en masse using Object.assign :\n\nfunction Person ( first , last ) { this .", "It\u2019s great that we can write code in a very \u201cpoint-free\u201d style, but naming things is also great:\n\nconst BookCollector = { addToCollection ( name ) { this .", "Prerequisite: This post presumes that readers are familiar with JavaScript\u2019s objects, know how a prototype defines behaviour for an object, know what a constructor function is, and how a constructor\u2019s .prototype property is related to the objects it constructs.", "lastName = last ; return this ; } })\n\nAnd of course, we could use compact method syntax if we like:\n\nfunction Person ( first , last ) { this .", "That\u2019s exactly what the ECMAScript 5 code above does, and the ECMAScript 2015 class syntax \u201cdesugars\u201d to equivalent code.", "lastName = last ; return this ; }\n\nPerson is a constructor function, and it\u2019s also a class, in the JavaScript sense of the word \u201cclass.\u201d\n\nECMAScript 2015 provides the class keyword and \u201ccompact method notation\u201d as syntactic sugar for writing a function and assigning methods to its prototype (there is a little more involved, but that isn\u2019t relevant here).", "We have always been able to create a JavaScript class like this:\n\nfunction Person ( first , last ) { this .", "But behind the scenes, you still wind up with a constructor function bound to the name Person , and with Person.prototype being an object that looks like this:\n\n{ fullName : function fullName () { return this .", "Trying to compose functionality using \u201cinheritance\u201d doesn\u2019t always work cleanly.", "In other OO languages, mixins are difficult, because the class system does not support them and they are not particularly friendly to metaprogramming.", "prototype , BookCollector , Author );\n\nwhy we might want to use mixins\n\nComposing classes out of base functionality ( Person ) and mixins ( BookCollector and Author ) provides several benefits.", "lastName = last ; return this ; } })\n\nmixins\n\nSince class desugars to constructor functions and prototypes, we can mix and match techniques:\n\nclass Person { constructor ( first , last ) { this .", "Prototypes in JavaScript are \u201cjust objects,\u201d and since they are \u201cjust objects,\u201d we can add, remove, or modify methods of the prototype by adding, removing, or modifying the functions bound to properties of the prototype."], "title": "Prototypes are Objects (and why that matters)"}, {"url": "http://raganwald.com/2015/06/20/purely-functional-composition.html", "summary": ["Experience has shown that changing a class in one place can break the functionality of an entirely different part of the program that expects the class to remain unmodified.", "enhance\n\nWe can enhance ComposeWithClass to address some of the issues we noticed with mutating mixins, such as making methods non-enumerable:\n\nconst shared = Symbol ( \"shared\" ); function ComposeWithClass ( clazz , ... mixins ) { const subclazz = class extends clazz {}; for ( let mixin of mixins ) { const instanceKeys = Reflect .", "As we saw previously, we can accomplish that with a simple mixin like this:\n\nconst Coloured = { setColourRGB ({ r , g , b }) { this .", "It also helps us decompose classes into smaller entities with focused responsibilities that can be shared between classes as necessary.", "In one section of the code, we want Todo items that are also coloured.", "hasInstance ] ( instance ) { return instance [ isaColoured ]; } };\n\nAnd that\u2019s something we can encapsulate, if we wish:\n\nfunction HasInstances ( behaviour ) { const typeTag = Symbol (); return Object .", "prototype , mixin ); } return subclazz ; } const ColouredTodo = ComposeWithClass ( Todo , Coloured );\n\nThe ComposeWithClass function returns a new class without modifying its arguments.", "People say, \u201cit\u2019s hard to reason about code that mutates data,\u201d and when it comes to modifying classes, they are right.", "colourCode ; } }); const ColouredTodo = ComposeWithClass ( Todo , Coloured );\n\nsummary\n\nA \u201cpurely functional\u201d approach to composing functionality is appropriate when we wish to compose behaviour with classes, but do not wish to mutate a class that is used elsewhere.", "What we really want is a ColoredTodo in one part of the program, and Todo everywhere else.", "sharing is caring\n\nOne oft-repeated drawback of using extension is that it is difficult to share the \u201ccolour\u201d functionality with other classes.", "Another drawback is that the functionality can only be tested in concert with Todo , whereas it is trivial to independently test a well-crafted mixin.", "done = false ; return this ; } }\n\nNow let us presume that this class is used throughout our application for various purposes.", "The extends keyword solves that problem in the trivial case:\n\nclass ColouredTodo extends Todo { setColourRGB ({ r , g , b }) { this .", "prototype , Coloured );\n\nWhile this works just fine for all of the Todos we create in this part of the program, we may accidentally break Todo instances used elsewhere.", "shared = shared ;\n\nWritten like this, it\u2019s up to individual behaviours to sort out instanceof :\n\nconst isaColoured = Symbol (); const Coloured = { setColourRGB ({ r , g , b }) { this .", "In Functional Mixins, we discussed mixing functionality into JavaScript classes.", "prototype , Coloured );\n\nWe can write a simple function to encapsulate this pattern:\n\nfunction ComposeWithClass ( clazz , ... mixins ) { const subclazz = class extends clazz {}; for ( let mixin of mixins ) { Object .", "What we want is to decouple Todo from Coloured with extension, and to decouple Coloured from ColouredTodo with a mixin:\n\nclass ColouredTodo extends Todo {} const Coloured = { setColourRGB ({ r , g , b }) { this ."], "title": "Purely Functional Composition"}, {"url": "http://raganwald.com/2015/06/26/decorators-in-es7.html", "summary": ["_books_written = []); } }); const Person = Author ( BookCollector ( class { // ... }));\n\nSome people find this \u201cclear as day,\u201d arguing that this is a simple expression taking advantage of JavaScript\u2019s simplicity.", "prototype ); const president = new Person ( 'Barak' , 'Obama' ) president .", "If the decorator function doesn\u2019t return anything, the class\u2019 name is bound to the modified class.", "In Functional Mixins, we discussed mixing functionality into JavaScript classes, changing the class.", "There is a convenience capability of making \u201cstatic\u201d or \u201cshared\u201d properties of the the function, and it even adds some simple hasInstance handling so that the instanceof operator will work.", "lastName = last ; return this ; } }; BookCollector ( Person ); const president = new Person ( 'Barak' , 'Obama' ) president .", "When used strictly to build a class, mixins help us decompose classes into smaller entities with focused responsibilities that can be shared between classes as necessary.", "lastName = last ; return this ; } });\n\nThis is structurally nicer, it binds the mixing in of behaviour with the class declaration in one expression, so we\u2019re getting away from this idea of mixing things into classes after they\u2019re created.", "We\u2019ll just call it mixin :\n\nfunction mixin ( behaviour , sharedBehaviour = {}) { const instanceKeys = Reflect .", "lastName = last ; return this ; } }; const president = new Person ( 'Barak' , 'Obama' ) president .", "ownKeys ( sharedBehaviour ); const typeTag = Symbol ( 'isa' ); function _mixin ( target ) { for ( let property of instanceKeys ) Object .", "addToCollection ( \"Kestrels, Quirky Birds, and Hopeless Egocentricity\" ); president .", "The code behind mixin is simple and easy to read, and if you understand prototypes, you understand everything in this expression.", "class decorators\n\nThere is a well-regarded proposal to add Python-style class decorators to JavaScript in the next major revision after ECMAScript 2015.", "lastName = last ; return this ; } }; @ BookCollector @ Author class BookLover extends Person {};\n\nClass decorators provide a compact, \u201cmagic\u201d syntax that is closely tied to the construction of the class.", "We observed that this has pitfalls when applied to a class that might already be in use elsewhere, but is perfectly cromulent when used as a technique to build a class from scratch.", "Let\u2019s take advantage of the fact that Classes are Expressions:\n\nconst BookCollector = mixin ({ addToCollection ( name ) { this .", "Here we are using it on a class\u2019 prototype:\n\nconst BookCollector = mixin ({ addToCollection ( name ) { this .", "i [ typeTag ] }); return _mixin ; }\n\nThis version\u2019s _mixin function mixes instance behaviour into a class\u2019s prototype, so we gain convenience at the expense of flexibility:\n\nconst BookCollector = mixin ({ addToCollection ( name ) { this .", "If you prefer syntactic sugar that gives the appearance of a declarative construct, combining a mixin function with [ES.later]\u2019s class decorators does the trick.", "defineProperty ( target , typeTag , { value : true }); return target ; } for ( let property of sharedKeys ) Object .", "And if we wanted to mix two or more behaviours in, we\u2019d have to nest the functions like this:\n\nconst Author = mixin ({ writeBook ( name ) { this .", "prototype , typeTag , { value : true }); return clazz ; } for ( let property of sharedKeys ) Object .", "collection () //=> [\"JavaScript Allong\u00e9\",\"Kestrels, Quirky Birds, and Hopeless Egocentricity\"]\n\nmixins just for classes\n\nIt\u2019s very nice that our mixins support any kind of target, but let\u2019s make them class-specific:\n\nfunction mixin ( behaviour , sharedBehaviour = {}) { const instanceKeys = Reflect .", "ownKeys ( sharedBehaviour ); const typeTag = Symbol ( 'isa' ); function _mixin ( clazz ) { for ( let property of instanceKeys ) Object .", "using decorators\n\nDecorators have not been formally approved, however there are various implementations available for transpiling decorator syntax to ES5 syntax.", "lastName = last ; return this ; } };\n\nAnd if you want to use decorators to emulate Purely Functional Composition, it\u2019s a fairly simple pattern:\n\nclass Person { constructor ( first , last ) { this .", "Here\u2019s a very simple example from the aforelinked implementation:\n\nfunction annotation ( target ) { // Add a property on target target .", "collection () //=> [\"JavaScript Allong\u00e9\",\"Kestrels, Quirky Birds, and Hopeless Egocentricity\"]\n\nYou can also mix in multiple behaviours with decorators:\n\nconst BookCollector = mixin ({ addToCollection ( name ) { this .", "annotated = true ; } @ annotation class MyClass { // ... } MyClass .", "collection () //=> [\"JavaScript Allong\u00e9\",\"Kestrels, Quirky Birds, and Hopeless Egocentricity\"]\n\nSo far, nice, but it feels a bit bolted-on-after-the-fact.", "But some argue that having different syntax for different things aids understandability, and that having both @foo for decoration and bar(...) for function invocation is a win."], "title": "Using ES.later Decorators as Mixins"}, {"url": "http://raganwald.com/2015/06/28/method-decorators.html", "summary": ["setName ( 'Raymond' , 'Smullyan' ); const musician = new Person () .", "Since our once decorator returns a decorated function with private state (the hasRun variable), all the instances share the same private state, and thus the bug.", "the bottom line\n\nFunction decorators can be used as method decorators, provided that we take care to handle this properly, and manage state carefully when required.", "But once wrapped in requireAll , our setName function is now invoked as an ordinary function with the line return fn(...args); , so this is set to the wrong thing.", "\u201cFunction Decorators\u201d take a function as and argument, and return a new function that has semantically similar behaviour, but is \u201cdecorated\u201d with some additional functionality.", "But there is a subtle bug that could easily evade na\u00efve attempts to write unit tests:\n\nconst logician = new Person () .", "First, it\u2019s fugly and full of accidental complexity.", "fullName () //=> Raymond Smullyan\n\nAs we expect, only the first call to .setName has any effect, and it works on a method.", "apply ( this , args ); return this ; } }\n\nAnd we\u2019d use it like this:\n\nclass Person { @ fluent setName ( first , last ) { this .", "Here\u2019s roughly how we used to write Person , using a pseudo-private property pattern:\n\nconst once = ( fn ) => { let hasRunValue = false , hasRunProperty = \"hasRun-\" + fn .", "Bonus: Method Decorators in ES.later\n\nBefore ECMAScript 2015 (a/k/a \u201cES6\u201d), we decorated a method in a simple an direct way.", "fullName () //=> Miles Davis\n\nNow each instance stores whether .setName has been invoked on each instance a WeakSet , so logician and musician can share the method without sharing its state.", "Worse, our implementation of once for methods won\u2019t work properly with ordinary functions in \u201cstrict\u201d mode:\n\n\"use strict\" const hello = once (() => 'hello!", "Consider, for example Person :\n\nclass Person { setName ( first , last ) { this .", "prototype , 'setName' , { value : requireAll ( Person .", "prototype , 'setName' , { value : once ( Person .", "apply ( this , args ); } }\n\nHowever, we\u2019re adding more accidental complexity to handle the fact that function invocation is blue, and method invocation is khaki.", "length ) throw new Error ( 'missing required arguments' ); else return fn (... args ); }\n\nFunction decorators are fairly straightforward.", "Of great interest to us are methods in JavaScript, functions that are used to define the behaviour of instances.", "The syntax is similar to class decorators, but where a class decorator takes a class asan argument and returns the same (or a different) class, a method decorator actually intercedes when a property is defined on the prototype.", "In the end, we can either write specialized decorators designed specifically for methods, or tolerate the additional complexity of trying to handle method invocation and function invocation in the same decorator.", "Correcting our decorator to deal with undefined is straightforward:\n\nconst once = ( fn ) => { let invocations = new WeakSet (), undefinedContext = Symbol ( 'undefined-context' ); return function (... args ) { const context = this === undefined ?", "To solve a problem created by ECMAScript 2015, method decorators have been proposed for ES.later.", "map ( maybe ( x => x * x )) //=> [1,null,9,16,null,36,49]\n\nA similar decorator, requireAll , raises an exception if a function is invoked without at least as many arguments as declared parameters:\n\nconst requireAll = ( fn ) => function (... args ) { if ( args .", "setName ( 'Haskell' , 'Curry' ); const musician = new Person () .", "When a function is invoked as a method, the name this is bound to the instance, and most methods rely on that binding to work properly.", "length ) throw new Error ( 'missing required arguments' ); else return fn .", "Thus, a fluent (a/k/a chain ) decorator would look like this:\n\nfunction fluent ( target , name , descriptor ) { const method = descriptor .", "When we use a compact method definition, we get things like the method being non-enumerable by default.", "stateful method decorators\n\nIf we don\u2019t need to use the same decorator for functions and for methods, we can rewrite our decorator to use a WeakSet to track whether a method has been invoked for an instance:\n\nconst once = ( fn ) => { let invocations = new WeakSet (); return function (... args ) { if ( invocations .", "If we had Object.assign or an equivalent, we we\u2019re able to define all of the methods, including decorators, in one step:\n\nvar Person = function () {}; _ .", "setName ( 'Albert' , 'Einstein' ); //=> Attempted to assign to readonly property.", "setName ( 'Prince' ); //=> missing required arguments\n\nIt now works properly, including ignoring invocations that do not pass all the arguments.", "name + \"-\" + new Date ().", "So to get a similar result in ECMAScript 2015, we have to write some clumsy code after the class has been defined:\n\nObject ."], "title": "Method Decorators in ECMAScript 2015 (and beyond)"}, {"url": "http://raganwald.com/2015/08/05/method-advice.html", "summary": ["In JavaScript, we can implement method advice by decorating the entire class.", "prototype [ methodName ]), writable : true }); return clazz ; } @ HasAge @ around ( mustBeMe , 'setName' , 'setAge' , 'age' ) class Person { setName ( first , last ) { this .", "cross-cutting method decorators\n\nThere is another way to decorate methods: We can decorate multiple methods in a single declaration.", "\" ); } @ HasAge @ before ( mustBeMe , 'setName' , 'setAge' , 'age' ) @ before ( mustBeLoggedIn , 'fullName' ) class Person { setName ( first , last ) { this .", "apply ( this , args ); return this ; } class Person { @ wrapWith ( fluent ) setName ( first , last ) { this .", "We might write something like this:\n\nconst wrapWith = ( decorator ) => function ( target , name , descriptor ) { descriptor .", "Method decorators make it easy to answer the question \u201cwhat is the behaviour of this method?\u201d But they dont make it easy to answer the question \u201cwhat methods share this behaviour?\u201d\n\nThat question matters, because when decomposing responsibilities, we often decide that a cross-cutting responsibility like permissions should be distinct from an implementation responsibility like storing a name.", "apply ( this , args ); return returnValue ; }, writable : true }); } return clazz ; }\n\nPrecondition checks like mustBeMe are good candidates for before .", "ownKeys ( sharedBehaviour ); const typeTag = Symbol ( 'isa' ); function _mixin ( clazz ) { for ( let property of instanceKeys ) Object .", "Of course, we could make things simpler.", "However, when we look at @around(mustBeMe, 'setName', 'setAge', 'age') , we see that we\u2019re wrapping setName , setAge and age with mustBeMe .", "This especially becomes difficult if we decompose classes using mixins.", "But it does allow us to write decorators that work in ES6 and ES.later, so if you aren\u2019t targeting ES.later, you can write your code like this:\n\nconst fluent = ( method ) => function (... args ) { method .", "apply ( this , args ); else throw new PermissionsException ( \"Must be me!", "prototype , property , { value : function (... args ) { behaviour .", "For example, what if setAge and age come from a mixin:\n\n@ HasAge class Person { @ wrapWith ( mustBeMe ) setName ( first , last ) { this .", "lastName ; } };\n\nWe can use the same technique to write a class decorator that decorates one or more methods:\n\nconst around = ( behaviour , ... methodNames ) => ( clazz ) => { for ( let methodName of methodNames ) Object .", "We could enhance before , after , and around to include conveniences like regular expressions to match method names, or special declarations like except: or only: if we so desired.", "\" ); } const Person = HasAge ( before ( mustBeMe , 'setName' , 'setAge' , 'age' )( before ( mustBeLoggedIn , 'fullName' )( class { setName ( first , last ) { this .", "We\u2019ve previously looked at using ES.later method decorators like this:\n\nconst wrapWith = ( decorator ) => function ( target , name , descriptor ) { descriptor .", "prototype , property , { value : function (... args ) { const returnValue = method .", "If we don\u2019t want to use ES.later decorators, we can use the exact same decorators as ordinary functions, like this:\n\nconst mustBeLoggedIn = () => { if ( currentUser () == null ) throw new PermissionsException ( \"Must be logged in!", "lastName ; } } ) ) );\n\nComposition could also help:\n\nconst mustBeLoggedIn = () => { if ( currentUser () == null ) throw new PermissionsException ( \"Must be logged in!", "prototype , typeTag , { value : true }); return clazz ; } for ( let property of sharedKeys ) Object .", "Quite possibly not, because the mixin is responsible for defining the behaviour, it\u2019s up to the model class to decide the permissions required.", "They\u2019re far simpler since before handles the wrapping:\n\nconst mustBeLoggedIn = () => { if ( currentUser () == null ) throw new PermissionsException ( \"Must be logged in!", "\" ); } class Person { @ wrapWith ( mustBeMe ) setName ( first , last ) { this .", "This makes it easy to answer the question \u201cWhat is the precise behaviour of this method?\u201d\n\nBut sometimes, this is not what you want.", "The ES.later method decorators put the decorations right next to the method body.", "\" ); } const Person = compose ( HasAge , before ( mustBeMe , 'setName' , 'setAge' , 'age' ), before ( mustBeLoggedIn , 'fullName' ), )( class { setName ( first , last ) { this .", "We already have a combinator for making mixins (see Using ES.later Decorators as Mixins):\n\nfunction mixin ( behaviour , sharedBehaviour = {}) { const instanceKeys = Reflect .", "final thought\n\nAlthough decorating methods in bulk has appeared in other languages and paradigms, it\u2019s not something special and alien to JavaScript, it\u2019s really the same pattern we see over and over again: Programming by composing small and single-responsibility entities, and using functions to transform and combine the entities into their final form.", "prototype , property , { value : behaviour ( clazz ."], "title": "Method Advice in Modern JavaScript"}, {"url": "http://raganwald.com/2015/08/08/monkey-patching-extension-methods-bind-operator.html", "summary": ["We also get methods like days and from_now added to Number , so we can write:\n\naccess .", "There are some language-specific alternatives, such as C#\u2019s extension method syntax, and ES.maybe\u2019s bind operator.", "static extension methods as an implementation\n\nVarious mechanisms have been proposed to permit writing expressions syntactically as 14.days.from_now without actually modifying a global class like Number .", "And if you choose to use methods, extension methods help us make everything read like a method, even things that aren\u2019t an entity\u2019s primary responsibility.", "For example, let\u2019s say that we\u2019re using Ruby on Rails, and we have an array called chain_of_command .", "summary\n\nExtension methods are a reasonable design choice when we want to provide the syntactic appearance of methods, and also wish to provide secondary functionality that does not belong in the core class definition (or was not shipped in the standard implementation fo a class we don\u2019t control).", "Secondary concerns could be defined elsewhere, and thus there is an OO argument in favour of .second not being an Array method.", "Functions are easy in languages like JavaScript:\n\nconst second = indexed => indexed [ 1 ];\n\nIn Ruby, we can make a method that reads like a function call:\n\nmodule Kernel def second ( indexed ) indexed [ 1 ] end end\n\nClose enough for government work!", "Making everything in one expression into a method (or everything in one expression into a function) allows us to write more readable code by having chained expressions read in a consistent direction using a consistent invocation style.", "At runtime, an extension method makes Array responsible for implementing the .second method, but in the organization of the code, the programming entity responsible for defining .second is ActiveSupport , not Array .", "But it also affects the code within every other gem you use, so if one of them happens to define a .second method, that gem is incompatible with ActiveSupport.", "second ()\n\nThis is possible because deep within ActiveSupport is this snippet of code:\n\nclass Array # ... def second self [ 1 ] end end\n\nThis code adds a second method to every instance of Array, everywhere in our running instance of Ruby.", "This Ruby reads in a consistent way:\n\nchain_of_command .", "Although Ruby\u2019s Array class does not define a special method for obtaining the second element of an array, we can still write:\n\nsecond_in_command = chain_of_command .", "But we aren\u2019t modifying Array \u2019s prototype in any way.", "So by this reasoning, if you want a second operation on arrays, the Array class should be responsible for implementing it.", "If we\u2019re using JavaScript and have a tolerance for ES.maybe features, the bind operator provides a very good alternative to monkey-patching extension methods.", "A modification made to a class like Array affects the code used within Rails and your own application code as you\u2019d expect.", "And since it\u2019s defined as a static member of the Something class, it is not actually changing strings in any way.", "the syntactic argument for extension methods\n\nIf .second isn\u2019t an object\u2019s primary responsibility, then why implement something like .second as a method?", "In C#, we can write an extension method for a class like this:\n\npublic static class Something { // ... public static string Reverse ( this string input ) { char [] chars = input .", "Note that methods defines in modules/mixins are not extension methods, we are referring to a method added completely orthogonally from the code or library or built-in that defines the standard behaviour of the class.", "Its uses for abbreviating code where we are already using .bind , .call , and .apply have been explored elsewhere.", "This is only possible because C# includes static typing, and thus that the compiler knows that \"abcdefghijklmnopqrstuvwxyz\" is a string, so it can resolve the extension method at compile time.", "An operation like .second can be implemented in terms of Array \u2019s primary operations, so it is a secondary concern.", "People call this Monkey patching, but to be precise, the phrase \u201cmonkey patching\u201d is a colloquial expression referring to one particular way of implementing extension methods."], "title": "Extension Methods, Monkey-Patching, and the Bind Operator"}, {"url": "http://raganwald.com/2015/08/24/ready-get-set-go.html", "summary": ["For example, we can use an ES.later decorator to add logging advice to .set :\n\nconst after = ( behaviour , ... methodNames ) => ( clazz ) => { for ( let methodName of methodNames ) { const method = clazz .", "notifyAll ( 'set' , 'last' , value ); return this [ _last ] = value ; } fullName () { return ` $ { this .", "Mediating property access with methods is more flexible than directly accessing properties, and this allows us to organize our program and distribute responsibility properly.", "Once upon a time, there was a language called C, and this language had something called a struct , and you could use it to make heterogeneously aggregated data structures that had members.", "notify ( this , message , ... args ); } } } class Person extends Model { constructor ( first , last ) { super (); this .", "get ( 'last' )} ` ; } };\n\nWhereas we can\u2019t do anything like that with direct property access.", "model = person ; } // ... redraw () { document .", "addListener ( this ); } } class PersonView extends View { // ... notify ( notifier , method , ... args ) { if ( notifier === this .", "With the .set method, we could directly access Model.prototype.set and wrap it in another function.", "get = function (... args ) { const returnValue = method .", "Getters and setters needn\u2019t actually read or write any properties, they can do anything.", "(discuss on Hacker News)\n\nPost Scriptum\n\nThis post uses listening to property setters as an excuse to discuss the getter and setter mechanisms, and ways to decorate them so that we can organize code around concerns.", "notifyAll ( 'set' , 'first' , value ); return this [ _first ] = value ; } get last () { this .", "That doesn\u2019t sound like fun, so let\u2019s modify our after combinator so that you can use a single function with methods, getters, and setters:\n\nfunction getPropertyDescriptor ( obj , property ) { if ( obj == null ) return null ; const descriptor = Object .", "With getters and setters, we can write:\n\nconst currentUser = new Person ( 'Reginald' , 'Braithwaite' ); const currentUserView = new PersonView ( currentUser ); currentUser .", "set = function (... args ) { const returnValue = method .", "I\u2019m sure that if we ask around, we\u2019ll eventually meet both C programmers who prefer elegant abstractions to extremely fast code.", "Instead, people started using another language called JavaScript to write code in browsers, and used Java to write code on servers.", "Same for int id = currentUser.id .", "Direct access does not allow you to organize the functionality associated with getting and setting properties, it forces the code doing the getting and setting to also be responsible for anything else associated with getting and setting.", "model && method === 'set' ) this .", "The key thing to know about C is that when you have a struct called currentUser , and a member like id , and you write something like currentUser.id = 42 , the C complier turned this into extremely fast assembler instructions.", "configurable = true ; } else if ( accessor === \"set\" ) { const method = descriptor .", "So just for kicks, we\u2019ll write a decorator that writes getters and setters.", "prototype , methodName ); if ( accessor == null ) { const method = clazz .", "notify ( this , message , ... args ); } } } const _first = Symbol ( 'first' ), _last = Symbol ( 'last' ); class Person extends Model { constructor ( first , last ) { super (); this .", ")\n\nMeanwhile, JavaScript programmers were also writing currentUser.id = 42 , and eventually they too discovered that this was a terrible idea.", "With care, we can update our tooling to permit us to decorate our getters and setters, distributing responsibility as we see fit and freeing us from dependence upon heavyweight base classes.", "So we can\u2019t decorate a setter using the exact same code we\u2019d use to decorate an ordinary method.", "We\u2019d have to use one kind of decorator for methods, another for getters, and a third for setters.", "Getters and setters allow us to have the semantics of using methods, but the syntax of direct access.", "So we can write:\n\nconst currentUser = new Person ( 'Reginald' , 'Braithwaite' ); const currentUserView = new PersonView ( currentUser ); currentUser .", "Will it surprise you to learn that JavaScript was also designed to get C programmers to write code?", "first = 'Ragnvald' ;\n\nAnd everything still works just as if we\u2019d written currentUser.set('first', 'Ragnvald') with the .set -style code.", "The raw values will be stored in an attributes map:\n\nfunction attrAccessor (... propertyNames ) { return function ( clazzOrObject ) { const target = clazzOrObject .", "first = 'Ragnvald' ; currentUserView .", "Also of importance was that you could have pointers to functions in structs, so you could write things like currentUser->setId(42) if you preferred to make setting an id a function, and this was also translated into fast assembler.", "And when we preface a method with set , we are defining a setter, a method that will be called when code attempts to write to the property.", "fullName ()) } }\n\nEvery time we update the person class, we have to remember to redraw the view:\n\nconst currentUser = new Person ( 'Reginald' , 'Braithwaite' ); const currentUserView = new PersonView ( currentUser ); currentUserView .", "writable = true ; } else if ( accessor === \"get\" ) { const method = descriptor .", "prototype , methodName , descriptor ); } return clazz ; }\n\nNow we can write:\n\nconst notify = ( name ) => function (... args ) { this .", "fullName ()} to $ { value } ` ); } @ after ( LogSetter , 'set' ) class Person extends Model { constructor ( first , last ) { super (); this .", "attributes [ propertyName ] = value ; }, configurable : true , enumerable : true }) } return clazzOrObject ; } }\n\nNow we can write:\n\n@ Notifier @ attrAccessor ( 'first' , 'last' ) @ after ( Notifier .", "getOwnPropertyDescriptor ( obj , property ); else return getPropertyDescriptor ( Object .", "prototype , methodName , { value : function (... args ) { const returnValue = method .", "Here\u2019s how we\u2019d write our Person class using \u201cgetters\u201d and \u201csetters:\u201d\n\nclass Model { constructor () { this .", "summary\n\nGetters and setters allow us to maintain the legacy style of writing code that appears to directly access properties, while actually mediating that access with methods.", "So the nice people behind Java gave it C-like syntax with the braces and the statement/expression dichotomy and the dot notation.", "apply ( this , args ); return returnValue ; }, writable : true }); } return clazz ; } function LogSetter ( model , property , value ) { console .", "the problem with direct access\n\nVery soon after people begun working with Java at scale, they learned that directly accessing instance variables was a terrible idea.", "value = function (... args ) { const returnValue = method .", "And that it went with the C-like syntax with curly braces, the statement/expression dichotomy, and dot notation?", "Subclasses, methods, mixins and decorators are techniques: What they make possible is choosing which code is responsible for which functionality."], "title": "Getters, Setters, and Organizing Responsibility in JavaScript"}, {"url": "http://raganwald.com/2015/11/03/a-coding-problem.html", "summary": ["done )) { const lowestIterator = iterators .", "And if we encounter a programming problem that seems \u201cWay out there\u2026\u201d Maybe we should solve it brilliantly, then ask a question of our own: \u201cSay, if this works out and I come to work for you, when would I be working with algorithms like this?\u201d\n\nWe might be pleasantly surprised by the answer.", "We\u2019ll take our iterators, filter out any that are done, sort them according to the value we peek , and the first iterator has the lowest value:\n\nfunction * merge (... iterables ) { const iterators = iterables .", "done )) { // find the iterator with the lowest value yield lowestIterator .", "What happens if you have one iterable that produces thousands of values, along with a few hundred that only produce a few hundred each?", "function * merge (... iterables ) { const iterators = iterables .", "slice ( 0 ), tempB = originalB .", "next (); return returnValue ; } } function * merge (... iterables ) { const iterators = iterables .", "Since our merge function is a generator, we can easily iterate over its contents or spread them into an array.", "That\u2019s easy, every iterable has a method named Symbol.iterator that returns a new iterator over that iterable.", "concat ( tempB ); }\n\nThe usual hazards to navigate are cases like either array being empty or having a single element.", "Often called \u201cfizz-buzz problems,\u201d the usual purpose is to quickly weed out hopefuls who can\u2019t actually program anything.", "Naturally, the first thing to do is to get all the alerts for a customer into a single stream, ordered by timestamp.", "Now we can back up and use PeekableIterator s instead of plain iterators:\n\nfunction * merge (... iterables ) { const iterators = iterables .", "Until it does, it behooves engineers to be competent at writing code in real time, and it behooves employers to choose problems that have a reasonable relationship to the problems they solve at work.", "Here\u2019s an example, something that might be used in a phone screen or an in-person interview with programmers early in their career: Write a merge function, that given two sorted lists, produces a sorted list containing the union of each list\u2019s elements.", "We\u2019ll write a generator, a function that yield s values.", "But is it \u201cImpractical Computer Science?\u201d\n\nLet\u2019s try wrapping it in a story:\n\nYou work for a company that manages alerting and event remediation.", "The skeleton will look like this:\n\nfunction * merge (... iterables ) { // setup while ( our_iterables_are_not_done ) { // find the iterator with the lowest value yield lowestIterator .", "value - b .", "value ; } }\n\nOur third problem is thorny: To test whether an iterator has one or more values to return, we call .next() .", "Our generator will take the iterables as arguments, and yield the values in the correct order to represent an ordered merge.", "conclusion\n\nCoding in job interviews doesn\u2019t seem to be going away any time soon.", "Given the first problem, the more experienced candidate might roll their eyes.", "next (); return returnValue ; } }\n\nOur PeekableIterator class wraps around an existing iterator, but in addition to a next method that advances to the next value (if any), it also provides a peek method that doesn\u2019t advance the iterator.", "For example: Write a function that given an arbitrary number of ordered streams of elements, produces an ordered stream containing the union of each stream\u2019s elements.", "a fizz-buzz problem\n\nJob interviews sometimes contain simple programming tasks.", "Write a function that creates an alert when it sees a certain pattern of evens occurring within a certain time frame.", "value ; } }\n\nWe can also use our peek method to find the iterator with the lowest value.", "For example:\n\nmerge ([ 1 , 7 , 11 , 17 ], [ 3 , 5 , 13 ]) //=> [1, 3, 5, 7, 11, 13, 17] merge ([ 2 , 3 , 5 , 7 , 11 ], [ 2 , 4 , 6 , 8 , 10 , 12 , 14 ]) //=> [2, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14]\n\nIn a language with convenient array semantics, and with a reckless disregard for memory and performance, a solution is straightforward to compose:\n\nfunction merge ( originalA , originalB ) { const merged = [], tempA = originalA .", "let\u2019s write it\n\nIn ECMAScript 2015, we can represent the streams we have to merge as Iterables.", "In a follow-up discussion, an interview might explore why this implementation takes a beating from the ugly memory stick, and how to use indices to make it better."], "title": "Solving a Coding Problem with Iterators and Generators"}, {"url": "http://raganwald.com/2015/12/20/an-es6-program-to-compute-fibonacci.html", "summary": ["When I started researching approaches, I discovered an intriguing bit of matrix math, so I learned something while practicing my skills.", "Remember that a = b + c at all times and d = e + f provided that each is a power of [[1,1], [1,0]] .", "And this is a win over the typical recursive or even iterative solution for large numbers, because while each operation is more expensive, we only perform log2n operations.", "In this solution, we observe that we can express the Fibonacci number F(n) using a 2x2 matrix that is raised to the power of n:\n\n[ 1 1 ] n [ F(n+1) F(n) ] [ 1 0 ] = [ F(n) F(n-1) ]\n\nOn the face of it, raising someting to the power of n turns n additions into n multiplications.", "Using a library like BigInteger.js, our solution becomes:\n\nimport { zero , one } from 'big-integer' ; let times = (... matrices ) => matrices .", "toString () // => 29554981652302145421961363135286189884298419359021591207414 94029404508891979849589048890639433083583865137532017734839 03976989846431379560920380384049354648973349793444866743699 77583527866834756211404857224578913159290369224744375346007 69568427064684727742279727974589543524504574566687346018118 // ... // ...69,490 lines elided... // ... 44917243010555501044826365112091652635017254277919365055752 92134790638460565443537453870610661665070132289987927432062 35114452925784094009088430159367013806505734580798084002841 21219542644844237050682927035326929321204843947060841278604 7707601726389614978163177\n\n(full result, as calculated in Safari)\n\nWe\u2019re done.", "enter the matrix\n\nOne problem with calculating a Fibonacci number is that na\u00efve algorithms require n additions.", "n : power ([ one , one , zero ], n - 1 )[ 0 ];\n\nLet\u2019s stretch our wings and calculate the 19,620,614th Fibonacci number:\n\nfibonacci ( 19620614 ).", "n : power ([ 1 , 1 , 0 ], n - 1 )[ 0 ]; fibonacci ( 62 ) // => 4052739537881\n\nIf we\u2019d like to work with very large numbers, JavaScript\u2019s integers are insufficient.", "There are various common problems offered in such a vein, including fizz-buzz itself, computing certain prime numbers, and computing Fibonacci number.", "Let\u2019s express this as operations on arrays:\n\n[a, b, c] times [d, e, f] = [ad + be, ae + bf, be + cf]\n\nWhich we can code in JavaScript, using array destructuring:\n\nlet times = (... matrices ) => matrices .", "Fixing that also fixes how to deal with even numbers that aren\u2019t neat powers of two:\n\nlet power = ( matrix , n ) => { if ( n === 1 ) return matrix ; let halves = power ( matrix , Math .", "fill ([ 1 , 1 , 0 ])); naive_power ([ 1 , 1 , 0 ], 1 ) // => [1, 1, 0] naive_power ([ 1 , 1 , 0 ], 2 ) // => [2, 1, 1] naive_power ([ 1 , 1 , 0 ], 3 ) // => [3, 2, 1] naive_power ([ 1 , 1 , 0 ], 4 ) // => [5, 3, 2] naive_power ([ 1 , 1 , 0 ], 5 ) // => [8, 5, 3]\n\nVery interesting, and less expensive than multiplying any two arbitrary matrices, but we are still performing n multiplications when we raise a matrix to the nth power.", "It feels cleaner than the Ruby original, possibly because of the destructuring, and possibly because writing functions is idiomatic JavaScript, whereas refining core classes is idiomatic Ruby.", "exponentiation with matrices\n\nNow let\u2019s make an observation: instead of accumulating a product by iterating over the list, let\u2019s Divide and Conquer."], "title": "An ES6 function to compute the nth Fibonacci number"}, {"url": "http://raganwald.com/2015/12/23/super-considered-hmmmful.html", "summary": ["\" ; } }); @ HappyObjects class Foo { toString () { return \"foo\" ; } }; // => Error: HappyObjects and Foo both define toString\n\nMembers of the final-by-default tribe want HappyObjects to describe all happy objects, and Foo to define all instances of Foo .", "If you\u2019re a member of the final-by-default tribe, every time you see the super() keyword, you stare at it long and hard, and work out the tradeoff of convenience now versus potential for bugs down the road.", "It\u2019s characteristic of the virtual-by-default mindset: Everything can be overridden, in any arbitrary way.", "So when a final-by-default programmer writes this code:\n\nclass Foo { toString () { return \"foo\" ; } }\n\nThey are defining the behaviour of all instances of Foo .", "Of course, setting mixins up as subclass factories won\u2019t do that either.", "In this example, decorators add behaviour to methods that could be inherited from a superclass or mixed in:\n\n@ before ( validatePersonhood , 'setName' , 'setAge' , 'age' ) @ before ( mustBeLoggedIn , 'fullName' ) class User extends Person { // ... };\n\nUsing method advice adds some semantic complexity in terms of learning what decorators like before or after might do, but encourages writing code where behaviour is extended rather than overridden.", "Whereas, if we write:\n\nclass Bar extends Foo { toArray () { return this .", "If we write:\n\nclass Foo { toString () { return \"foo\" ; } }\n\nWe are defining Foo to be:\n\nA class That has a method, toString That returns \"foo\"\n\nEveryone agrees on the first two points, but OO programmers are split on the third point.", "With subclass factories, we would actually write something like:\n\nlet HappyObjects = subclass_factory_mixin ({ toString () { return 'happy' ; } }); class HappyFoo extends HappyObjects ( Object ) { toString () { return ` $ { super ()} foo ` ; } }; let f = new HappyFoo (); f .", "The canonical name for this is Dynamic Dispatch, because the method invocation is dynamically dispatched to the most appropriate method implementation.", "In the end, the \u201cfinal-by-default\u201d people are just as OO as the \u201cvirtual-by-default\u201d people, but they spend a lot more time trying to keep their inheritance hierarchies \u201cclean.\u201d\n\nthe academic basis for final-by-default\n\nOverriding methods is often taught as a central plank of OOP.", "in such a method to call the mixin\u2019s original definition, just as you would for a class.", "Traits are very much from the \u201cfinal by default\u201d school, but instead of simply preventing name overriding and leaving it up to the programmer to find another way forward, traits provide mechanisms for composing both metaobjects (like classes and mixins) as well as the methods they define.", "In a static-by-default language, no matter whether the function is overridden or not, the implementation to be used is chosen at compile time based on the declared class of the receiver.", "They ask, \u201cif you can\u2019t override, what makes you think you have polymorphism?\u201d Of course, you can have two different subclasses each implement the same method without one overriding the other.", "Just about everyone agrees that flattened hierarchies are superior to deep hierarchies, especially when the deep hierarchies are an accidental complexity created by trying to fake a many-to-many relationship using a tree.", "In languages like Javascript and Ruby, you can even override a method within a single object.", "toString ());\n\nAfter much experience with errors from forgetting to use the virtual keyword, most programming languages abandoned static-by-default and went with virtual-by-default.", "But many people felt that like C++, the designers got it backwards.", "If you want dynamic dispatching, you use a special virtual keyword to indicate which functions should be dynamically dispatched.", "virtual-by-default\n\nIn languages like Smalltalk and almost every other \u201cdynamically typed\u201d OO descendent, including JavaScript, you can override any method at any level in the class hierarchy.", "Some say that a Foo is defined to return \"foo\" , others say that it returns \"foo\" by default, but any subclass of Foo can override this, and it could return anything, raise an exception, or erase your hard drive and email 419 scam letters to everyone in your contacts, you can\u2019t tell unless you examine an individual object that happens to be declared to be a Foo and see how it actually behaves.", "If you\u2019re a member of the final-by-default tribe, your mixin implementation will throw an error if a mixin and a class\u2019s method clash:\n\nlet HappyObjects = final_by_default_mixin ({ toString () { return \"I'm a happy object!", "One promising direction is traits: A trait is like a mixin, but when it is applied, there is a name resolution policy that determines whether conflicting names should override or act like method advice.", "Some people find this kind of things more trouble than its worth, no matter how many times they hear grizzled veterans intoning \u201cPrefer Composition Over Inheritance.\u201d\n\nAnother technique that final-by-default tribe members use is to focus on extending superclass methods rather than replacing them outright.", "If you can\u2019t override methods (because that modifies the meaning of the superclass or mixin), you need to do something else when you want to extend the behaviour of a superclass or mixin.", "For example, if you want the mixin for implementation convenience but aren\u2019t trying to imply that a Foo is-a HappyObject , you would use delegation, like this:\n\nclass HappyObjects { toString () { return 'happy' ; } }; class HappyFoo { constructor () { this .", "mixins and final-by-default\n\nIf you\u2019re a member of the final-by-default tribe, you don\u2019t want a lot of overriding of methods."], "title": "super() considered hmmm-ful"}, {"url": "http://raganwald.com/2015/12/28/mixins-subclass-factories-and-method-advice.html", "summary": ["toHTML () //=> <span style=\"color: #FFFF00;\">Finish blog post</span>\n\nWith this solution, we\u2019ve used our revamped mixin function to support getColourRGB overriding the mixin\u2019s definition, and we\u2019ve used override to support wrapping functionality around the original toHTML method.", "Like this:\n\nlet subclassFactory = ( behaviour ) => { let mixBehaviourInto = mixin ( behaviour ); return ( superclazz ) => mixBehaviourInto ( class extends superclazz {}); } let ColouredAsWellAs = subclassFactory ({ setColourRGB ({ r , g , b }) { this .", "colourCode ; } }); let ColouredTodo = Coloured ( class extends Todo {});\n\nThus, we have a ColouredTodo that we can extend and override, but we also have our Coloured behaviour in a mixin we can use anywhere we like without duplicating its functionality in our code.", "subclass factories\n\nHowever, JavaScript does not have \u201ctrue\u201d multiple inheritance, and therefore this code does not work.", "colourCode ; } }); let yellow = { r : 'FF' , g : 'FF' , b : '00' }, red = { r : 'FF' , g : '00' , b : '00' }, green = { r : '00' , g : 'FF' , b : '00' }, grey = { r : '80' , g : '80' , b : '80' }; let oneDayInMilliseconds = 1000 * 60 * 60 * 24 ; let TimeSensitiveTodo = override ( 'wrapWithColour' , 'toHTML' )( Coloured ( class extends Todo { constructor ( name , deadline ) { super ( name ); this .", "Mixins solve a very common problem in class-centric OOP: For non-trivial applications, there is a messy many-to-many relationship between behaviour and classes, and it does not neatly decompose into a tree.", "We can take advantage of the fact that classes are expressions, like this:\n\nlet Coloured = mixin ({ setColourRGB ({ r , g , b }) { this .", "The full solution looks like this:\n\nclass Todo { constructor ( name ) { this .", "toHTML () //=> <span style=\"color: #FFFF00;\">Finish blog post</span>\n\nThe key snippet is let ColouredTodo = Coloured(class extends Todo {}); , it turns behaviour into a subclass that can be extended and overridden.", ")\n\nsimple mixins\n\nAs noted above, for non-trivial applications, there is a messy many-to-many relationship between behaviour and classes.", "getColourRGB (); return ` < span style = \"color: #${rgb.r}${rgb.g}${rgb.b};\" > $ { original ()} < /span>`; } } ) ); let task = new TimeSensitiveTodo ( 'Finish blog post' , Date .", "prototype , typeTag , { value : true }); return clazz ; } Object .", "As a final bonus, if we are using a transpiler that supports ES.who-knows-when, we can use the proposed class decorator syntax:\n\n@ override ( 'wrapWithColour' , 'toHTML' ) @ Coloured class TimeSensitiveTodo extends Todo { constructor ( name , deadline ) { super ( name ); this .", "This allows us to invoke the original without needing to use super .", "addToCollection ( \"Kestrels, Quirky Birds, and Hopeless Egocentricity\" ); president .", "If JavaScript had multiple inheritance, we could extend a class with more than one superclass:\n\nclass Todo { constructor ( name ) { this .", "Here\u2019s a simple \u201coverride\u201d function that decorates a class:\n\nlet override = ( behaviour , ... overriddenMethodNames ) => ( clazz ) => { if ( typeof behaviour === 'string' ) { behaviour = clazz .", "Its \u201cpartner\u201d is after , a decorator that runs behaviour after the decorated method is invoked:\n\nlet after = ( behaviour , ... decoratedMethodNames ) => ( clazz ) => { if ( typeof behaviour === 'string' ) { behaviour = clazz .", "bind ( this ), ... args ); }, writable : true }); } return clazz ; };\n\nIt takes behaviour in the form of a name of a method or a function, and one or more names of methods to override.", "prototype , overriddenMethodName , { value : function (... args ) { return behaviour .", "colourCode ; } }); class TimeSensitiveTodo extends ColouredAsWellAs ( ToDo ) { constructor ( name , deadline ) { super ( name ); this .", "toHTML ()} < /span>`; } }\n\nThe syntax of class TimeSensitiveTodo extends ColouredAsWellAs(ToDo) says exactly what we mean: We are extending our Coloured behaviour as well as extending ToDo .", "toHTML ()} < /span>`; } } let task = new TimeSensitiveTodo ( 'Finish blog post' , Date .", "colourCode ; } } let yellow = { r : 'FF' , g : 'FF' , b : '00' }, red = { r : 'FF' , g : '00' , b : '00' }, green = { r : '00' , g : 'FF' , b : '00' }, grey = { r : '80' , g : '80' , b : '80' }; let oneDayInMilliseconds = 1000 * 60 * 60 * 24 ; class TimeSensitiveTodo extends Todo , Coloured { constructor ( name , deadline ) { super ( name ); this .", "We can turn this pattern into a function:\n\nlet subclassFactory = ( behaviour ) => { let mixBehaviourInto = mixin ( behaviour ); return ( superclazz ) => mixBehaviourInto ( class extends superclazz {}); }\n\nUsing subclassFactory , we wrap the class we want to extend, instead of the class we are declaring.", "i [ typeTag ] }); return _mixin ; }\n\nNow we can override roundels in CanadianAirForceRoundel while mixing shape in just fine:\n\nnew CanadianAirForceRoundel ().", "That being said, subclass factories are most convenient of we are comfortable with hierarchies of superclasses and with using super to extend method behaviour.", "wrapping up\n\nA simple mixin can cover many cases, but when we wish to override or extend method behaviour, we need to either use the subclass factory pattern or incorporate method advice.", "Here\u2019s a vastly simplified functional mixin for classes:\n\nfunction mixin ( behaviour ) { let instanceKeys = Reflect .", "name ; // highly insecure } } let Coloured = mixin ({ setColourRGB ({ r , g , b }) { this .", "name ; // highly insecure } } class Coloured { setColourRGB ({ r , g , b }) { this .", "If Executive mixes BookCollector in, Executive can\u2019t override methods of BookCollector .", "ownKeys ( behaviour ); let typeTag = Symbol ( 'isa' ); function _mixin ( clazz ) { for ( let property of instanceKeys ) if ( !", "prototype , decoratedMethodName , { value : function (... args ) { let decoratedMethodValue = ecoratedMethodFunction .", "Method advice offers benefits above and beyond overriding mixin methods, especially if we use before and after in addition to override .", "After using mixins and method advice on a regular basis, instead of using superclasses for shared behaviour, we use mixins and method advice instead.", "Recall that our TimeSensitiveTodo example performed a simple override of getColourRGB , but its implementation of toHTML used super to invoke the method it was overriding.", "getColourRGB (); return ` < span style = \"color: #${rgb.r}${rgb.g}${rgb.b};\" > $ { super .", "ownKeys ( behaviour ); let typeTag = Symbol ( 'isa' ); function _mixin ( clazz ) { for ( let property of instanceKeys ) Object .", "And second, method advice allows us to add behaviour to multiple methods at once, focusing responsibility for cross-cutting concerns, like this:\n\nconst mustBeLoggedIn = () => { if ( currentUser () == null ) throw new PermissionsException ( \"Must be logged in!", "lastName = last ; return this ; } } let Executive = BookCollector ( class extends Person { constructor ( title , first , last ) { super ( first , last ); this .", "prototype , decoratedMethodName , { value : function (... args ) { let behaviourValue = behaviour .", "collection () //=> [\"JavaScript Allong\u00e9\",\"Kestrels, Quirky Birds, and Hopeless Egocentricity\"]\n\nmultiple inheritance\n\nIf you want to mix behaviour into a class, mixins do the job very nicely.", "If Executive mixes BookCollector in, Executive can\u2019t override methods of BookCollector , and therefore it can\u2019t make a method that overrides a method of BookCollector and then uses super to call the original.", "before invokes the behaviour first, and if its return value is undefined or truthy , it invokes the decorated method:\n\nlet before = ( behaviour , ... decoratedMethodNames ) => ( clazz ) => { if ( typeof behaviour === 'string' ) { behaviour = clazz .", "Method advice is similar: It makes a many-to-many relationship between behaviour and methods particularly easy to declare.", "That\u2019s not so hard:\n\nfunction mixin ( behaviour ) { let instanceKeys = Reflect ."], "title": "JavaScript Mixins, Subclass Factories, and Method Advice"}, {"url": "http://raganwald.com/2015/12/31/this-is-not-an-essay-about-traits-in-javascript.html", "summary": ["reduce (( acc , fn ) => fn ( acc ), value ); const SensitizeTodos = pipeline ( Coloured , DeadlineSensitive ); @ SensitizeTodos class TimeSensitiveTodo extends Todo { constructor ( name , deadline ) { super ( name ); this .", "For example, if we had coloured meetings in a time management application, we\u2019d have to write:\n\nclass Meeting { // ... } class ColouredMeeting extends Meeting { setColourRGB ({ r , g , b }) { this .", "bind ( this ), ... args ); }, writable : true }); } else throw ` attempt to override non - existant method $ { property } ` ; return clazz ; } } const DeadlineSensitive = Override ({ getColourRGB () { let slack = this .", "deadline = deadline ; } } ) );\n\nOr:\n\n@ DeadlineSensitive @ Coloured class TimeSensitiveTodo extends Todo { constructor ( name , deadline ) { super ( name ); this .", "prototype , property , { value : behaviour [ property ], writable : true }); } else throw ` illegal attempt to override $ { property }, which already exists .", "colourCode ; } } class TimeSensitiveTodo extends ColouredTodo { constructor ( name , deadline ) { super ( name ); this .", "When we do things the lightweight way, we make very small bets on their benefits.", "Once again we have seen the strength of JavaScript: We don\u2019t need a lot of special language features baked in, provided we are careful to make our existing features out of functions and simple objects.", "composing protocols\n\nWe could now write:\n\nconst TimeSensitiveTodo = DeadlineSensitive ( Coloured ( class TimeSensitiveTodo extends Todo { constructor ( name , deadline ) { super ( name ); this .", "because we make small bets along the way, we collect on the small benefits continuously: We don\u2019t have to kick off a massive rewrite of our code base to start using lightweight traits, for example.", "People often say that JavaScript wants to be a functional programming language.", "If we had multiple inheritance, we would write:\n\nlet yellow = { r : 'FF' , g : 'FF' , b : '00' }, red = { r : 'FF' , g : '00' , b : '00' }, green = { r : '00' , g : 'FF' , b : '00' }, grey = { r : '80' , g : '80' , b : '80' }; let oneDayInMilliseconds = 1000 * 60 * 60 * 24 ; class TimeSensitiveTodo extends Todo , Coloured { constructor ( name , deadline ) { super ( name ); this .", "done ) { return grey ; } else if ( slack <= 0 ) { return red ; } else if ( slack <= oneDayInMilliseconds ){ return yellow ; } else return green ; }, toHTML ( original ) { let rgb = this .", "Our problem is that we want to be able to override or extend functionality from shared behaviour, whether that shared behaviour is defined as a class or as functionality to be mixed in.", "indexOf ( c ), toTwoFiftyFive = ( cc ) => toSixteen ( cc [ 0 ]) * 16 + toSixteen ( cc [ 1 ]); class Coloured { setColourRGB ({ r , g , b }) { this .", "And elsewhere, we can write:\n\nconst ColouredMeeting = ColouredAsWellAs ( Meeting );\n\nOr perhaps:\n\nclass TimeSensitiveMeeting extends ColouredAsWellAs ( Meeting ) { // ... }\n\nTo summarize, our problem is that we want to be able to override or extend functionality from shared behaviour, whether that shared behaviour is defined as a class or as functionality to be mixed in.", "ownKeys ( behaviour ); return function mixin ( clazz ) { for ( let property of instanceKeys ) Object .", "This is similar to \u201caround\u201d method advice:\n\nfunction Override ( behaviour ) { const instanceKeys = Reflect .", "prototype , property , { value : behaviour [ property ], writable : true }); return clazz ; } } const SubclassFactory = ( behaviour ) => ( superclazz ) => ClassMixin ( behaviour )( class extends superclazz {}); const ColouredAsWellAs = SubclassFactory ({ setColourRGB ({ r , g , b }) { this .", "We\u2019ll modify it slightly to insist that it never attempt to define a method that already exists, and we\u2019ll use that to create Coloured , a function that defines two methods:\n\nfunction Define ( behaviour ) { const instanceKeys = Reflect .", "That thinking isn\u2019t always portable to another tool or another code base.", "deadline = deadline ; } }\n\nNow SensitizeTodos combines defining methods with overriding existing methods: We\u2019ve built a lightweight trait by composing protocols.", "prototype , property , { value : function (... args ) { const prependValue = behaviour [ property ].", "Whereas lightweight tools are simple things, composed together in simple ways.", "We call this a \u201csubclass factory:\u201d\n\nfunction ClassMixin ( behaviour ) { const instanceKeys = Reflect .", "` } } const Coloured = Define ({ setColourRGB ({ r , g , b }) { this .", "prototype , property , { value : function (... args ) { const returnValue = overriddenMethodFunction .", "The heavyweight way would produce \u201cclasses\u201d that don\u2019t easily interoperate with other libraries or code, so you can\u2019t incrementally make changes: You have to \u201cboil the ocean\u201d and commit 100% to the new approach.", "getColourRGB (); return ` < span style = \"color: #${rgb.r}${rgb.g}${rgb.b};\" > $ { super .", "prototype , property , { value : function (... args ) { return behaviour [ property ].", "Heavyweight approaches often demand new kinds of tooling in the build pipeline.", "We can then compose them at will using simple tools to make the language features we need.", "name ; // highly insecure } }\n\nAnd we have the idea of \u201cthings that are coloured:\u201d\n\nlet toSixteen = ( c ) => '0123456789ABCDEF' .", "apply ( this , args );; } }, writable : true }); } else throw ` attempt to override non - existant method $ { property } ` ; return clazz ; } } function Append ( behaviour ) { const instanceKeys = Reflect .", "The heavyweight way would greenspun a special class hierarchy with support for traits baked in.", "deadline = deadline ; } }\n\nBut if we want to use DeadlineSensitive and Coloured together more than once, we can make a lightweight trait with simple function composition:\n\nconst pipeline = (... fns ) => ( value ) => fns .", "apply ( this , args ); return returnValue ; }, writable : true }); } else throw ` attempt to override non - existant method $ { property } ` ; return clazz ; } }\n\nWe can compose a lightweight trait using any combination of Define , Override , Prepend , and Append , and the composition is handled by pipeline , a plain old function composition tool."], "title": "This is not an essay about 'Traits in Javascript' (updated)"}, {"url": "http://rauchg.com/2014/7-principles-of-rich-web-applications", "summary": ["Proof-of-concept SPA with inlined CSS and JS that doesn\u2019t incur in extra roundtrips\n\nA flexible enough system that can share rendering code between browser and server and provides tools for progressively loading scripts and styles will probably eliminate the colloquial distinction between websites and webapps.", "The medium by which pages are transmitted, the internet, has a theoretical speed limit.", "In some cases, parts of the page that are not essential to what the user is likely after are better left out of the initial response and fetched later by the client.", "When any of them are clicked, the browser will make a network request that\u2019ll take unpredictably long, then get and process its response and finally transition to the new state.", "The general consensus is that it\u2019s an acceptable tradeoff because once the bundle is loaded, you can then handle most of the user interaction (like transitions to other pages) without requesting additional pages or scripts.", "In this example, considering a great internet connection between London and New York, it takes 225ms before TCP is able to reach the maximum packet size.", "The cited 85ms round-trip time between Boston and Stanford will certainly improve over time, and your own experiments right now might already show it.", "If your data updates automatically, so should your code.", "The client side code doesn\u2019t \u201cknow\u201d about the future representation of the page, until an entire roundtrip to the server occurs.", "If you\u2019re using SSL, which happens to be important for safe script delivery, an additional two roundtrips are used (only one if the client is resuming a session).", "This is where an architecture like the one proposed by React comes particularly handy.", "Even a spreadsheet application, which traditionally relies a lot more on client side functionality, first needs to show the user the data he\u2019s interested in modifying.", "The inability to send data without necessarily triggering a new page load was not optimal from a performance standpoint.", "If your UI is self-updating, there\u2019s little reason for users to trigger a page refresh.", "It\u2019s also important to make sure the user doesn\u2019t inadvertently interrupt the data flow.", "The beforeunload browser warning\n\nThe other (and less obvious) one is capturing page transitions before they happen, like clicking links that trigger a new page load.", "Analysis of the HTML sent by the server for every page of a SPA in the wild\n\nAt this point many developers consciously accept this tradeoff because they make sure the extra network hops happen only once for their users by sending the proper cache headers in the script and stylesheet responses.", "Maybe less intuitively, one could also make a distinction between \u201cstructural CSS\u201d and the \u201cskin/theme CSS\u201d.", "Let\u2019s consider the basic HTML web again for a second.", "Since this rule applies also for the initial page download, it makes the initial content that comes rendered with the page all that much more important.", "You can then apply principle 3 and then inform the user of new data changes that happened to that page.", "After this, some web applications opt to refresh the page on behalf of the user when deemed appropriate.", "This pretty much guarantees that most script bundles won\u2019t be fetched in one roundtrip, making the situation described above even worse.", "This means that there would be no need to perform a full page refresh.", "In the case of a form, instead of waiting for some HTML as a response after its submission, we can act right after the user presses enter.", "If state was kept in the DOM, or event listeners where set up manually by your application, updating code would become a much more complicated task.", "Session and login state synchronization is an example of applying this principle uniformly.", "In the case of most SPAs, a blank page and a <script> tag is returned instead, and another roundtrip will be made to get the scripts contents.", "Making your application react to code changes is crucially important.", "This means that minimizing the number of roundtrips you make to display information on page is essential to great user experience and responsiveness.", "React to data changes\n\ntl;DR: When data changes on the server, let the clients know without asking.", "Are Single Page Applications (SPAs) the future?", "Should techniques like PJAX or TurboLinks be used?", "Keep in mind that in a traditional website, a page refresh accomplishes two things: reload the data and reload the code.", "For the time being, rendering part or all of the page on the server is the most common solution to avoiding extra roundtrips.", "The basic idea is that the first state of a page \u201cknows\u201d about the layout of the next state, so it can transition to it before there\u2019s any data to populate the page with.", "Each page reacts to the session and login state\n\nOnce you set up the expectation that the information on the screen updates automatically, it\u2019s important to consider a new need: state reconciliation.", "With SPDY or HTTP/2 server push, it should be theoretically possible to deliver client code that\u2019s cacheable in a single hop.", "If your application is not open, you can still attempt to sync user data in the background.", "Progressive loading of code, style and markup as the user navigates through them will ensure great performance without sacrificing interactivity.", "Push code updates\n\ntl;DR: Pushing data without pushing code is insufficient.", "Consider the additional roundtrips to get scripts, styles, and subsequent API requests.", "Setting up a mechanism to push data without one to push code is not enough, especially in a world where a single tab (session) might stay open for a very long time.", "Ever since the early days, iPhone OS would request app authors to provide a default.png image that would be rendered right away, while the actual app was loading.", "First of all, analyzing the packet dump of the TCP connection to www.google.com reveals they make sure to send their entire homepage all at once after the request comes in.", "This is akin to considering the back button an application-level button and applying principle 2: act immediately on user input.", "As the name implies, there\u2019s only one page the server consistently returns, and all the rest is figured out by your client side code.", "A better approach is to perform hot code reloading.", "This is a helpful illustration of the amount of data the server can send in each round-trip over time: How many KB a server can send for each phase of the connection by segments\n\nWebsites that deliver content (even if it\u2019s only the basic layout without the data) within this window will seem extremely responsive.", "The first principle builds heavily on the idea of minimizing latency as the user interacts with your website.", "Should JavaScript be used to replace browser functions like history, navigation and page rendering?", "It\u2019s certainly hard to make hot code reloading work for many existing codebases.", "In particular, I put a strong focus on the idea of minimizing the time it takes the user to get the data they are interested in.", "Then you modify the behavior of that component, for example, so that it produces different DOM markup for existing and new state.", "The toggling of comments should be preserved when navigating history\n\nIf the page was re-rendered by following a link within the application, the expectation of the user might be that all comments appear uncollapsed.", "Server rendered pages are not optional\n\ntl;DR: Server rendering is not about SEO, it\u2019s about performance.", "They have URLs, navigation, they show data to the user.", "Predict behavior\n\ntl;DR: Negative latency.", "So that then another roundtrip can be made to get the data needed for rendering.", "JavaScript allows to act immediately and optimistically on user input.", "Don\u2019t break history, enhance it\n\ntl;DR: Without the browser managing URLs and history for us, new challenges emerge.", "Applications that render HTML on the server and then modify it on the client are at particular risk of this subtle bug:\n\nPressing back incorrectly loads the initial HTML from the pageload\n\nAnother way of breaking navigation is by ignoring scrolling memory.", "In addition to the ability to send data the user inputs into a form, we now have some new opportunities to enhance UX.", "Some applications, for example, opt to render the \u201cshell\u201d of the page to respond immediately.", "Make sure to handle errors, retry on behalf of the user, sync data on the background and maintain offline caches.", "One that\u2019s specially relevant to our previous principle is the ability to display the connection state.", "When receiving ordered atomic data updates, it\u2019s easy to forget that your application should be able to update appropriately even after long periods of disconnection.", "A famous example of this is Gmail (or Google Inbox), where archiving an email will happen immediately on the UI while the server request is sent and processed asynchronously.", "PJAX or TurboLinks miss out on opportunities to improve the perception of speed.", "Act immediately on user input\n\ntl;DR: JavaScript allows us to mask network latency altogether.", "This has two serious implications for SPAs:\n\nLarge scripts take a lot longer to download than it seems.", "However, even in the presence of a cache, there\u2019s a performance penalty when considering script parsing and evaluation time."], "title": "7 Principles of Rich Web Applications"}, {"url": "http://wildbit.com/blog/2015/09/30/where-is-your-quiet-place", "summary": ["With the opening of the new office, I\u2019ve thought a lot about encouraging focus in a physical environment.", "They have amazing drinks, it\u2019s usually as quiet as a library, and I can just sit at a table to sketch, write, or plan with complete focus (the drinks help too).", "The second place is Rittenhouse Square, a park in downtown Philadelphia.", "If you are doing creative work or need complete focus to solve hard problems, you almost certainly have a place to call your own.", "Right after everyone has gone home for the day, stopped working, stopped sending emails, and the Internet seems just a little more calm than it was a few hours before.", "No matter how quiet your office, your home, or that cabin in the woods may be, you will still have a constant need to check your inbox, catch up on chat, or scan through the latest tweets.", "Around 9pm I would get a second wind, regroup, and usually work on interface design, content, or architecture decisions for our products.", "No matter how great your office or work environment is, you always need an escape and some alone time.", "And the last place is my favorite drinking establishment, Library Bar, at a nearby hotel.", "With two kids Natalie and I come home from work at 5:30pm and the day keeps rolling."], "title": "Where is your quiet place?"}, {"url": "http://wildbit.com/blog/2015/10/20/sharing-as-a-remote-team", "summary": ["We started using an app called Honey where you have groups instead of projects, and each team member can choose which groups they want to be alerted on.", "Some people want to know everything, and are able to organize their time to keep updated.", "They even have Daily or Weekly digests settings for each group, so you may be interested in just the top posts for Marketing weekly, but want Daily posts on Engineering.", "When we first became a hybrid of remote and same-office, we made mistakes by having conversations face to face and not sharing them or involving the remote team in the decisions.", "Lately, I\u2019ve been getting a lot of feedback that we\u2019re all overwhelmed with news and posts and need some help.", "What we were doing was causing email notifications to fly around to way too many people, creating homework to read all the news and posts to keep up.", "The shift in responsibility is going to take some getting used to, but I think it\u2019s the first step in removing the noise of a growing, active team.", "Decisions on product involve the input of anyone interested, regardless if you\u2019re on the marketing team or the systems team, or anywhere else.", "To try to correct it, we went the complete opposite: making every decision inside of a Basecamp post.", "Predictably, this slowed everything down, creating an increased amount of noise and distraction for everyone involved.", "So you end up sharing with everyone, hoping not to offend anyone by skipping them or miss someone who could provide input."], "title": "Sharing as a remote team"}, {"url": "http://www.codeconquest.com/tutorials/binary/", "summary": ["This is the string \u2018Hello World\u2019 encoded in ASCII:\n\n01001000 01100101 01101100 01101100 01101111 00100000 01010111 01101111 01110010 01101100 01100100\n\nEach byte represents a letter (except for the one that represents the space between the words, of course).", "Treehouse is an online training service that teaches web design, web development and app development with videos, quizzes and interactive coding exercises.", "Other Applications of Binary\n\nAs well as numbers and letters, binary code can represent commands, images and sounds \u2013 but that\u2019s beyond the scope of this tutorial.", "Treehouse's mission is to bring technology education to those who can't get it, and is committed to helping its students find jobs.", "For example, the ASCII encoding assigns unique binary bytes to 128 different characters.", "Decimal Binary Hex 0 0 0 1 1 1 2 10 2 3 11 3 4 100 4 5 101 5 6 110 6 7 111 7 8 1000 8 9 1001 9 10 1010 A 11 1011 B 12 1100 C 13 1101 D 14 1110 E 15 1111 F 16 10000 10\n\nBinary Letters\n\nBinary code representing numbers is pretty uniform \u2013 there\u2019s only one way to do it.", "However, binary numbers in a computing context are always represented in 8 digits or less \u2013 8 binary digits forming one byte.", "In fact, here are the first 15 numbers expressed in binary:\n\n0, 1, 10, 11, 100, 101, 110, 111, 1000, 1001, 1010, 1011, 1100, 1101, 1110, 1111.", "The decimal number system we\u2019re all familiar with is a base-ten system, meaning it uses ten distinct digits \u2013 0 and 1, but also 2, 3, 4, 5, 6, 7, 8 and 9.", "Binary Numbers\n\nThe binary number system is a base-two system, meaning it uses two distinct digits \u2013 0 and 1."], "title": "Free Binary Tutorial"}, {"url": "http://www.c-sharpcorner.com/UploadFile/89bfaf/working-with-attribute-routing-in-web-api-2/", "summary": ["config.MapHttpAttributeRoutes();\n\nWe can use both the Routings in single projects.Add Route to the Action method of the Phases Controller as in the following code snippet:If we run the above code in Rest Client, we will get the response as desired.Similarly, we can perform attribute routing with Post, Put, Delete of HTTP verbs.Finding the exact Route follows the same rules of Convention Based Routing.", "The Route Names are useful to generate links.If you observe the Phases Controller, all the Routes are started with \"Project/{ProjectId}\".", "And Project model is,\n\n\n\n\n\n\n\nPhases Model is,\n\n\n\n\n\n\n\nStep 3 Create a Web API's empty controller called Phases Controller.", "Step 2: Create Models called Project and Phases.", "Step 4: In order to work with Attribute Routing, we need to enable this routing in WebAPIConfig.cs by adding the following code.", "Routes are located above the Action Methods.Now, we will discuss another interesting topics Route Names and Route Prefix in Attribute Routing.This is also an interesting topic in Attribute Routing.", "Requirements:\n\nVisual Studio 2012 with Web API 2 Project Template or Visual Studio 2013 and above.", "Attribute Routing With an Example:\n\n\n\nStep 1: Create an Web API Project using Visual Studio.", "Note: Attribute Routing introduced in ASP.NET Web API 2.", "You could observe this in Insert Action method.We have discussed about Attribute Routing in Web API 2 and why and where need to use this type of Routing."], "title": "Working With Attribute Routing In Web API 2"}, {"url": "http://www.designzzz.com/web-development-trends-2016/", "summary": ["Once a visitor clicks on any single point, several mini apps will appear for providing solutions.", "Long scrolling pages give an opportunity to the developers to include sufficient content to entice visitors, on mobile as well as desktop sites.", "This article will reveal 11 web development frameworks and trends that are set to rock the world in 2016 and help you stay ahead of the curve.", "The trend of websites with flat design has been here for a while and will continue to rule the world even in the year ahead.", "According to search Engine Watch, Facebook found that blurring background helps to speed up page loading time by 30%.", "Since scrolling has gained so much importance, thanks to the growing number of smartphone users, short length websites are something that the developers will be eyeing in 2016.", "It\u2019s a great way of story-telling and helps make it easy for you to share interesting tales about your product and engage the audience to spend longer time on your site than usual.", "While the trends of the past years seem to have been done to death, it\u2019s time to look at some fresh trends that will take center stage in the web development market next year!", "Make sure your original website design has everything fresh right from content, design, navigation system to business strategy and patterns.", "Social media giants such as Facebook, Youtube and companies such as Google, Apple and Microsoft have also dropped the hamburger menu.", "For instance, you can just have 4-5 menu bars on your homepage which covers the entire website design.", "If you have too many elements in their menu, you could take the most important ones converted them into a tab bar.", "Visible menus have come to out to be much better options for navigation on small mobile screens.", "A perfect example of creating engagement between the user and the content using long scrolling is The Dangers of Fracking site.", "With more and more people depending on mobile for internet related activities, longer scrolling pages is set to becoming increasingly popular with memorable visual designs and graphics.", "Give your site visitors an experience that blows their mind.", "Blurred Background a New Oprah\n\nThough designers took note of this trend in 2015 as well, not many have used it as yet!", "A flat design helps professional web designers concentrate more on the color scheme, content and using white space.", "In fact, we advise you to offer easy navigation system, clean and simple appearance with big tab buttons to entice users.", "Websites with blurred images in the background is set to become a popular website development trend in 2016.", "Aberdeen Group reveals in a report that a 1-second delay in page load time results in 11% lesser page views, 16% decrease in customer satisfaction and 7% loss in conversions.", "In fact, an article published at 1stwebdesigner.com clearly states that 68% of web designers think that flat web design will still be around the next five years from now.", "But if you\u2019re the one looking for ways to make the development process even more enjoyable, it makes sense to keep abreast with the latest trends.", "For instance, the site blitzagency.com has included so much content and features together but with only a few menu bars.", "Another thing that you cannot afford to forget is optimization of your web pages on mobiles since almost everyone uses a mobile phone today.", "For another, the branding elements and logo design must be clearly visible.", "There are several optimizing websites for speed that can help you make your web pages lighter.", "We advise you to include these 11 game-changing web development trends in your 2016 marketing strategies as these are the most essential ones.", "Though only a few, better maintained sites have resorted to the font changes, this trend will make its way to almost entire web space in years to come.", "It\u2019s time you check your click-through rates on all the pages and design your website accordingly."], "title": "11 Ground-Breaking Web Development Trends for 2016"}, {"url": "http://www.dotnetjalps.com/2015/10/view-component-aspnet-mvc6.html", "summary": [], "title": "What's new in View Component : ASP.NET MVC 6"}, {"url": "http://www.nateberkopec.com/2015/10/07/frontend-performance-chrome-timeline.html", "summary": ["In my case, it took almost 40 ms of just waiting around to download the whole stylesheet - and this app's stylesheet isn't even that big!", "This process is usually the cause of any \"Recalculate Styles\" bars you see at the beginning of the page load.", "Using Chrome Timeline to Debug Browser Speed\n\nSo, you've got a site that takes 5-10 seconds to get to the load event.", "Note that the attribute has no effect on inline Javascript tags (tags without a attribute), so you may need to drop things like Mixpanel's script into a remote file you host yourself (in Rails, you might put it into for example) and then make sure that remote script has an attribute.", "Look at the Chrome Timeline's flamegraph when your load event fires - if it's long and deep, you need to investigate how you can tie fewer events to the document being ready.", "Using on external scripts takes them off the blocking render path, so the page will render without waiting for these scripts to finish evaluating.", "Although I'm going to show you how to use Chrome Timeline to analyze page loads, you can also use it to profile Javascript interactions once the page has loaded.", "Remember that every little marketing tool - Olark, Optimize.ly, etc etc - will try to inject scripts and stylesheets into the page, slowing it down.", "Using async on external scripts takes them off the blocking render path, so the page will render without waiting for these scripts to finish evaluating.", "Recalculate Styles\n\nThe next major event you're going to see is the purple \"Recalculate Styles\".", "Layout\n\nSlightly after your first Recalculate Styles event, you should see a purple \"Layout\" event.", "Moving script tags to the end of the document doesn't help speed up DomContentLoaded , as the browser must still evaluate the Javascript before completing the construction of the DOM.", "I don't care how small your JS is gzipped - any additional JS you add takes additional time for the browser to evaluate on every page load.", "Why are we seeing Recalculate Styles events when the CSS hasn't even been downloaded yet?", "You'll see several \"Receive Data\" events as bytes come down over the wire, completing with the \"Finish Loading\" event.", "The gist is that if you're seeing a lot of time in \"Recalculate Styles\", your CSS is too complicated.", "If you're idling a lot, make sure your server is still zippy-quick.", "Layout thrashing is usually going to be caused by Javascript messing with the DOM, though using multiple stylesheets will also cause it.", "You will probably see more purple events (Recalculate Styles and its cousin, Layout) later on in the timeline.", "What I'm going discuss is how we can use Chrome Timeline to make our applications take as little time as possible between user input (clicking, pushing a button, hitting enter) and response (displaying data, moving us to a new page, etc), focusing on the initial page load.", "Paint\n\nAs we move along the timeline to the right, you should start seeing some green bars in the flamegraph.", "Every time you're adding something to the document's being ready, you're adding script execution that delays the completion of page loads.", "Moving script tags to the end of the document doesn't help speed up , as the browser must still evaluate the Javascript before completing the construction of the DOM.", "If you absolutely must put external JS on your page and you can't use an tag, external CSS must go first.", "Reduce Rendering and Painting Sites can also have quite a few layout changes and re-renders due to tools like Optimize.ly, something we can see by checking the \"First Layout Invalidation\" property of some of the \"Layout\" events in the Timeline.", "The green bar in the timeline is the first paint - the first time anything is rendered to screen.", "To speed up DomContentLoaded , you can do a few things:\n\nMake script tags async where possible.", "The two \"Send Request\" events you see here are the browser requesting the Javascript and CSS files linked in the head.", "And, unfortunately, browsers can't tell what part of the page they need to recalculate.", "You might see one or two more miscellaneous events related to page unloading, another \"Receive Data\" event, and finally a \"Finish Loading\" event.", "If you're seeing a lot of \"layout\" events during a page load, you may be experiencing something called \"layout thrashing\".", "DomContentLoaded\n\nIt's generally at this point that you'll see the blue bar in Timeline - this is the DomContentLoaded event.", "Remember that this will happen on every page load, and double the amount of time on a mobile browser.", "Even if, gzipped and minified, your CSS and JS assets are <100kb, once they're un-gzipped, they still must be parsed and loaded to create the DOM and CSSOM (explained in more detail below).", "This isn't even that much JavaScript in web terms - 37kb gzipped.", "Even though we live in an age of mass cable and fiber optic internet, our HTTP requests still take a lot of time to go from place to place.", "Because this script tag was marked with the async attribute, this doesn't happen - the browser won't \"stop the world\" to download and evaluate the Javascript.", "Where possible, I would try to add async tags to these scripts to get them off the rendering critical path, even if the vendor proudly claims the script is already \"async!\".", "JS and CSS assets must be concatenated, minified and placed in the right place in the document, or rendering may be blocked while the browser stops to load external resources (more on this later).", "This can take a lot of time - even more than a whole second, when you include network latency and the time required to evaluate the script.", "Eventually, after a whole lot of script evaluation, you'll probably see a couple of Recalculate Style and Paint events.", "There's a whole lot that can go on in these events (and Chrome even provides profiling tools just for these painting events), but I'm not going to go too deep on them here.", "All you need to know is that paint events happen when the browser is done rendering (the purple bars - the process of turning your CSS and HTML into a layout) and needs to turn the layout into pixels on a screen.", "If you absolutely must put external JS on your page and you can't use an async tag, external CSS must go first.", "Parse HTML\n\n\"Parsing HTML\" sounds like a pretty simple process, but Chrome (and any browser) actually has a lot of work to do.", "Inlining styles means that the browser may try to parse the stylesheet before moving on to the rest of the document.", "Unfortunately, this event covers a lot of things that actually happen during page construction.", "Most sites won't benefit from this optimization (see my bit about this above), but because this app is idling for about 20ms waiting for the styles to download, we may want to eliminate that network round-trip.", "Note that the attribute has no effect on inline Javascript tags (tags without a src attribute), so you may need to drop things like Mixpanel's script into a remote file you host yourself (in Rails, you might put it into application.js for example) and then make sure that remote script has an async attribute.", "Here's what my Timeline looked like:\n\n254 ms from refresh to done - not bad for an old Rails app, eh?", "Optimize.ly's whole purpose is to essentially change the content of the page, so moving it to an async script tag may cause a \"flash of unstyled content\" where part of the page would look one way and then suddenly flash into a different styling.", "The server has started responding to your request when you see that first \"Receive Response\" event.", "You may also see two \"Send Request\" events (they're really small) beneath the \"Parse HTML\" event.", "In addition, multiple stylesheets cause layout thrashing.", "Note that this \"Parse HTML\" step will reoccur every time the browser has to read new HTML - for example, from an AJAX request.", "Most sites use quite a few different marketing-related JavaScript plugins, like Olark and Mixpanel.", "Again, your browser does not wait for CSS to finish downloading - it's already calculating styles and layouts based on just your HTML markup and the browser defaults right now.", "\"Async\" javascripts that download and inject their own scripts (like Mixpanel's \"async\" script here) are not truly \"asynchronous\".", "A millisecond or two after this occurs, you'll see the big yellow \"Evaluate Script\" bars start up.", "The first event on the Timeline is \"Receive Response\".", "This is generally when the page is \"ready\" and finished loading.", "Javascript\n\nEventually, you'll notice the Javascript finish downloading (this is the \"Finish Loading\" event for your Javascript file).", "A few milliseconds later, you'll see a (tiny) \"Receive Data\" event.", "Chrome Timeline also works really well for optimizing \"60fps\" JavaScript applications."], "title": "Ludicrously Fast Page Loads"}, {"url": "http://www.quirksmode.org/blog/archives/2015/01/the_problem_wit.html", "summary": ["Unfortunately they aren\u2019t trained to recognise Angular\u2019s performance problems.", "Angular and front end\n\nDon\u2019t get me wrong: there are front-enders who are enthusiastic about Angular.", "In itself this is not a problem: people should just use whatever framework ties in with their coding style.", "I have the feeling their number is surprisingly low \u2014 see also the problems my clients had with finding good front-end Angular consultants.", "I wonder what Google was thinking when it pushed a framework that wasn\u2019t originally intended to assist developers, contained serious DOM performance problems, and wasn\u2019t optimised to support its own mobile platform.", "The Angular criticism that resonates most with me comes from the What\u2019s wrong with Angular.js article by Daniel Steigerwald:\n\nGoogle does not use Angular in production for their flag apps like Gmail or Gplus.", "I think that this radical rewrite is mostly aimed at front-enders, who will get much more performance and a coding style that is more in line with what we\u2019ve come to expect of JavaScript frameworks.", "The Software Improvement Group published a report that states (my emphasis):\n\nUsing AngularJS provides developers with a number of advantages.", "From my clients I also got the impression that their Java developers decided to use Angular.", "I don\u2019t think that a rapid-prototyping framework should be used for complex, enterprise-level production code.", "The proposed radical Angular 2.0 rewrite aims to make it more palatable to front-enders, but I doubt they\u2019re interested in yet another MVC framework.", "In an excellent article, Andrew Austin makes the case for Angular in enterprise IT:\n\nThere are many positives about the AngularJS team all working for Google.", "In a self-admittedly opinionated rundown of JS frameworks, Henrik Joreteg is more negative:\n\nPicking Angular means you\u2019re learning Angular the framework instead of how to solve problems in JavaScript.", "Despite its serious technical problems Angular 1.x is a success especially among corporate developers with a Java background.", "Although it is not necessarily lethal for overall performance, parsing the entire DOM at load time is an issue that should be addressed.", "Angular is aimed at corporate IT departments rather than front-enders, many of whom are turned off by its peculiar coding style, its emulation of an HTML templating system that belongs on the server instead of in the browser, and its serious and fundamental performance issues.", "The 2.0 rewrite is aimed at front-end developers, but may not reach them, and in addition will turn off Angular\u2019s current following.", "Rob Eisenberg provides an explanation:\n\nWhen AngularJS was first created, almost five years ago, it was not originally intended for developers.", "However, it\u2019s logical that Angular, of all JavaScript frameworks, gives rise to this problem.", "That\u2019s why I think Andrew Austin, who was quoted at the start of this article, is wrong when he states:\n\nCompared to hiring jQuery developers, hiring AngularJS developers may be more difficult for an organization.", "The same article gives another cause for concern:\n\nWhile Angular can be used to build mobile apps, it wasn't designed with them in mind.", "Angular insufficiently caters to frond-end sensibilities, so many front-enders tend to ignore it.", "[...] I\u2019ve got developers who\u2019s primary skill is Angular, not necessarily JavaScript.", "Mobile simply wasn\u2019t an issue back in 2010.", "Many front-enders, on the other hand, who have worked with JavaScript and browsers for years and have developed their own coding style, tend to have their doubts about Angular.", "The long litany of complaints I summarised in this article, especially the performance issues, makes me doubt Angular 1.x\u2019s suitability for modern front-end engineering.", "That\u2019s why most Angular developers come from the back-end, particularly from Java.", "Take a look at this demo code example that I pulled straight from the horse\u2019s mouth:\n\n<body> <h2>Todo</h2> <div ng-controller=\"TodoController\"> <span>{{remaining()}} of {{todos.length}} remaining</span> [ <a href=\"\" ng-click=\"archive()\">archive</a> ] <ul class=\"unstyled\"> <li ng-repeat=\"todo in todos\"> <input type=\"checkbox\" ng-model=\"todo.done\"> <span class=\"done-{{todo.done}}\">{{todo.text}}</span> </li> </ul> <form ng-submit=\"addTodo()\"> <input type=\"text\" ng-model=\"todoText\" size=\"30\" placeholder=\"add new todo here\"> <input class=\"btn-primary\" type=\"submit\" value=\"add\"> </form> </div> </body>\n\nThis code reminds me of a simple server-side scripting language such as JSP or ASP that\u2019s used to fill HTML templates with database content.", "[...] Rather than hiring developers with AngularJS experience, it may be easiest to train your existing team or hire JavaScript generalists interested in learning AngularJS.", "They have no preconceived notion of how front-end code is supposed to work, and aren\u2019t trained to recognise Angular\u2019s performance problems.", "That thins the pool of available front-end Angular developers and consultants even more.", "As far as I know this situation where a front-end framework is supported mostly by non-front-enders is unique.", "Giving Angular a serious performance boost requires ditching the {{}} DOM parsing at load time.", "I have doubts about Angular 1.x\u2019s suitability for modern web development.", "Angular Server Pages\n\nI feel that Angular\u2019s fundamental proposition blurs the line between front end and back end.", "I\u2019d say Angular is mostly being used by people from a Java background because its coding style is aimed at them.", "Also, I wonder how people from a Java background will like new coding style.", "I\u2019d say Angular 2.0 will require developers to embed less application logic in their HTML templates, and more in their scripts.", "The problem is that there is no way for Angular to discover these instructions except by parsing the entire DOM, including all text nodes and attribute values \u2014 a very expensive process if there ever was one, especially on mobile."], "title": "The problem with Angular"}, {"url": "http://www.sitepoint.com/frameworkless-javascript/", "summary": ["As an alternative you could use the super tiny Min.js, a JavaScript library useful to execute simple DOM querying and hooking event listeners.", "If you go on with in-depth tests, it\u2019d take you even more time that you might not have!", "Finally, I want to mentioned another great project out there called TodoMVC.", "If you don\u2019t fell like an expert or you\u2019re worried about the security, frameworks or libraries will help you a lot.", "It\u2019s true that the more familiar you are with JavaScript frameworks the faster you learn a new one, but you always have to spend some time deepening the topic (more or less depending on your skills).", "Here\u2019s an example of two-way binding in only 100 lines of JavaScript.", "You also don\u2019t have to spend your time learning one or more frameworks to use.", "If you don\u2019t know JavaScript very well, writing code by yourself can only bring harm.", "If your app is big but simple, using unneeded features of massive frameworks can cost you a lot.", "To implement this feature, there\u2019s also a more modern approach.", "Let\u2019s start with what\u2019s probably the most important one: the time.", "It\u2019s always better to create a specific workspace for every project, but it\u2019s not always possible.", "If you\u2019re experienced, frameworks with their ready solutions are perfect for the job.", "Since we\u2019re talking about code, we can\u2019t forget bugs.", "In some case official documentations are quite poor, but if a given framework is popular enough, you\u2019ll easily find the answers you need.", "When you think about framework, you probably think to a big set of features, but it\u2019s not always like that.", "Generally, we use them for large and complex applications, but in some cases also for smaller ones.", "Let\u2019s say that you have a small project, you don\u2019t want to use large frameworks, but you have a tight deadline.", "Here\u2019s an example of two-way binding feature using this solution.", "The following is a small example of how to use it:\n\n$('p:first-child a').on('click', function (event) { event.preventDefault(); // do something else });\n\nObviously, it has some limits.", "You can also combine one micro-library with many others, creating a specific workspace for your specific project.", "So if you have time and experience, it could be a good choice to not employ a framework.", "After having learned how to use a framework, you\u2019re tempted to use it for every app you want to develop, but you forget that sometimes using just old good JavaScript might be sufficient.", "For instance, one of the most popular features of modern JavaScript frameworks is two-way binding.", "Type \u201ctemplating\u201d in the search box and you\u2019ll find a long list where you can choose whatever you want.", "If you\u2019d like to see another solution, you could also check bind.js.", "Moreover, if you have problems with any of the features, it\u2019s easy to find the documentation of the framework, tons of free tutorials, and big community happy to help.", "Often frameworks are a good choice, but this isn\u2019t true for every situation.", "If you build complex apps without a framework, you\u2019ll probably meet all the cons of frameworkless JavaScript.", "Returning to the previously-mentioned example of two-way binding without big frameworks, what do you think we would need to do in order to use this feature in Microjs?", "Let\u2019s Meet in the Middle of the Road\n\nNow that I\u2019ve discussed the pros and cons of frameworks, let\u2019s talk about another possibility.", "If you know how a given framework works, no matter what the project is about, you\u2019ll feel like at home.", "If you choose a framework, then search for the one which best suits your needs.", "Secondly, code quality matters.", "There\u2019s also the cross-browser compatibility issue.", "Even if you\u2019re an expert, making in-depth tests of a complex application could take you a lot of time.", "We could say that it isn\u2019t hard to develop an application and that the hard part is to make it good and secure.", "Moreover, there is always a possibility that the framework you\u2019ve chosen won\u2019t gain popularity and be abandoned.", "JavaScript frameworks offer many functionality and it\u2019s not surprising at all that they\u2019re getting more and more popular.", "Unfortunately, in some cases this weight isn\u2019t justified because smaller projects use only a tiny part of the framework.", "But if you know what you\u2019re doing, the code written for a specific app can work better.", "Another interesting case are large applications.", "If your app isn\u2019t very complicated, you could set your own workspace.", "Now, let\u2019s say we want a simple templating system.", "Before you start developing you have to consider what you really need, then measure all the pros and cons of each approach.", "If you\u2019re developing for a client, it could be a really important issue because deadlines are rarely friendly.", "If you\u2019re building something really big, making use of a good framework is the best choice you can make."], "title": "Frameworkless JavaScript"}, {"url": "http://www.smashingmagazine.com/2015/12/generating-svg-with-react/", "summary": ["At this time in our browser, we should see two axes:\n\n9\n\nGroups in SVG are something like div elements in HTML.", "Groups in SVG are something like div elements in HTML, very useful when your component should return more than one node.", "You can leverage all of the ideas that shape your HTML in SVG, and have small, understandable components that anyone can easily change without breaking any external dependencies.", "Our new data.js looks like this:\n\nexport default [ [ [1, 3], [2, 5], [3, 2], [4, 16], [18, 5] ], [ [1, 16], [2, 23], [3, 5], [4, 3], [5, 1] ] ];\n\nAdding support for multiple data sets is an easy task for us, thanks to React\u2019s top-to-bottom data flow approach.", "12\n\nAdding support for multiple data sets is an easy task for us, thanks to React\u2019s top-to-bottom data flow approach.", "So, let\u2019s add an option to change the data set.", "Suppose the data science department extends our data set by another array and asks us to create a way to switch data on the fly.", "For the less common ones, React provides a way to set the innerHTML of an element via dangerouslySetInnerHTML19, which can help you work around any missing SVG elements you might require.", "This very powerful module bundler will process and manage all dependencies for us.", "With its \u201cre-render the whole world\u201d approach, you can avoid any complex internal interactions between small components, while your application continues to be blazingly fast due to the DOM-diffing that React does under the hood (i.e.", "So, the new index.js is this:\n\nimport React from 'react'; import ReactDOM from 'react-dom'; import App from './app'; import data from './data'; ReactDOM.render(<App datasets={data} />, document.getElementById('root'));\n\nAnd here is scripts/app.js :\n\nimport React from 'react'; import Graph from './components/graph'; export default class App extends React.Component { render() { return ( <Graph data={this.props.datasets[0]} /> # or this.props.datasets[1] just to check that everything is working ) } }\n\nHowever, changing the data set in the code is not user-friendly at all (even if we have React Hot Load to magically update the page for us).", "But let\u2019s try to create something a little more complex, so that we can see how React helps to structure SVG in a human-understandable way.", "This code transpiler allows us to use ECMAScript 6 (ES6) in browsers that don\u2019t yet support it.", "babel 6\n\nThis code transpiler allows us to use ECMAScript 6 (ES6) in browsers that don\u2019t yet support it.", "Axes should just return lines, nothing complex there.", "Crafting this string is easy; it consists of two parts: an initial Moveto command and a bunch of Lineto commands to draw the graph itself:\n\nMoveto will be our starting point: M ${this.props.x} ${this.props.y} .", "I will use React Hot Boilerplate4 as a starting point to save time configuring our development essentials, including the following:\n\nwebpack 5\n\nThis very powerful module bundler will process and manage all dependencies for us.", "We could hardcode them, but better to use defaultProps :\n\nexport default class Graph extends React.Component { static defaultProps = { width: 800, height: 600 };\n\nNow, if we pass no width or height to the Graph component as props , then default values will be used."], "title": "Generating SVG With React \u2013 Smashing Magazine"}, {"url": "http://www.strathweb.com/2015/10/global-route-prefixes-with-attribute-routing-in-asp-net-web-api/", "summary": ["public interface IDirectRouteProvider { IReadOnlyList<RouteEntry> GetDirectRoutes( HttpControllerDescriptor controllerDescriptor, IReadOnlyList<HttpActionDescriptor> actionDescriptors, IInlineConstraintResolver constraintResolver); } 1 2 3 4 5 6 7 public interface IDirectRouteProvider { IReadOnlyList < RouteEntry > GetDirectRoutes ( HttpControllerDescriptor controllerDescriptor , IReadOnlyList < HttpActionDescriptor > actionDescriptors , IInlineConstraintResolver constraintResolver ) ; }\n\nThat would typically mean a lot of work though, since you would need to manually deal with everything from A to Z \u2013 like manually processing controller and action descriptors.", "One of the things that is missing out of the box in Web API\u2019s implementation of attribute routing, is the ability to define global prefixes (i.e.", "DirectRouteProvider exposes all of its members as virtual \u2013 allowing you to tap into the route creation process at different stages i.e.", "For example, the following set up, defining a global version parameter as part of every route, is perfectly valid too:\n\nconfig.MapHttpAttributeRoutes(new CentralizedPrefixProvider(\"api/v{version:int}\")); 1 config .", "MapHttpAttributeRoutes ( new CentralizedPrefixProvider ( \"api\" ) ) ;\n\nIn this example, all attribute routes would get \u201capi\u201d prepended to the route template.", "Applying a route prefix globally\n\nIn order to apply route prefix globally, you will need to customize the way ASP.NET Web API creates routes from the route attributes.", "Finally, the usage of this provider is as follows \u2013 instead of invoking the \u201cregular\u201d version of MapHttpAttributeRoutes method, you need to use the overload that takes in an instance of IDirectRouteProvider:\n\nconfig.MapHttpAttributeRoutes(new CentralizedPrefixProvider(\"api\")); 1 config .", "A much easier approach is to subclass the existing default implementation, DirectRouteProvider, and override just the method that deals with route prefixes (GetRoutePrefix).", "Format ( \"{0}/{1}\" , _centralizedPrefix , existingPrefix ) ; } }\n\nThe CentralizedPrefixProvider shown above, takes a prefix that is globally prepended to every route.", "} }\n\nOf course in use cases like the one above, it would be nice to have to avoid that \u201capi\u201d repeated on every single controller.", "MapHttpAttributeRoutes ( new CentralizedPrefixProvider ( \"api/v{version:int}\" ) ) ;\n\nNow in any action method signature, you can add an additional version integer parameter, even though you don\u2019t have it in the route template beside the action \u2013 because it will be propagated down from the CentralizedPrefixProvider.", "If a particular controller has it\u2019s own route prefix (obtained via the base.GetRoutePrefix method invocation), then the centralized prefix is simply prepended to that one too.", "RoutePrefixAttribute\n\nASP.NET Web API allows you to provide a common route prefix for all the routes within a controller via RoutePrefixAttribute."], "title": "Global route prefixes with attribute routing in ASP.NET Web API"}, {"url": "http://www.toptal.com/javascript/ultimate-in-memory-data-collection-manipulation-with-supergroup-js", "summary": ["We bring in complex loops, list comprehensions, database analytical functions, map or groupBy functions, or even full-fledged reporting engines.", "\u201cBut where\u2019s the rest of the data?\u201d The strings or numbers in the Supergroup list are actually String or Number objects, overloaded with more properties and methods.", "d3.layout.hierarchy expects the bottom level of child nodes to be an array of raw records.", "For nodes above the leaf level, there\u2019s a children property (\u201cchildren\u201d is the default name, you could call it something else) holding another Supergroup list of second-level nodes:\n\n_.supergroup(data,['year','fips'])[0].children; // [ 6001, 6003, 6005, 6007, 6009, 6011, ... ]\n\nTooltip Function That Works\n\nIn order to demonstrate other features and how this whole thing works, let\u2019s make a simple nested list using D3, and see how we make a useful tooltip function that can work on any node in the list.", "A similar transformation of the data may be required in another part of the application, or more details may be needed: metadata, context, parent or child data, etc.", "Its key is also a string identifying it, but the value is an array of raw records.", "But when you use .entries() to generate arrays, you can\u2019t do a simple lookup by key value.", "What we saw in the code was typical of the tangles that arise in dealing with hierarchical or grouped data structures, particularly in D3 applications once they get bigger than demos.", "But when another chart type became a requirement, one where dimensions of x0, x1, y0, and y1 wouldn\u2019t make sense, a significant portion of the code had to be rewritten entirely - code that deals with legends, filters, tooltips, titles, summary calculations, and chart construction and rendering.", "In-memory Manipulation\n\nTake a Rest API for faceted search and CRUD operations, for instance, you could end up with one or more API calls for getting the set of fields and values (maybe with record counts) for all the search parameters, another API call for getting a specific record, and other calls for getting groups of records for reporting or something.", "\u201caggregate\u201d is called upon a single node, and it takes two parameters:\n\nAn aggregating function that expects an array (usually of numbers).", "And the nodes themselves contain no evidence that \u201c1970\u201d is a year and \u201c6001\u201d is a fips code, or that 1970 is the parent of this particular 6001 node.", "There is also an \u201caggregates\u201d convenience method on lists (the top-level list of groups, or the child groups of any node).", "Grouping and Aggregating by Multi-Valued Fields\n\nWithout going into exhaustive detail, I\u2019ll mention that Supergroup has some features for handling situations that occur less commonly but commonly enough to merit special treatment.", "\u201c1970\u201d points to a second level map, \u201c6001\u201d points to an array of raw records.", "For D3 visualizations based on d3.layout.hierarchy, example code on the D3 gallery generally starts with the data in a tree format (this Treemap example for instance).", "What is a \u201cnode\u201d in this map data structure?", "At first glance it\u2019s just an array of top-level \u201ckeys\u201d:\n\n_.supergroup(data,['year','fips']); // [ 1970, 1980, 1990, 2000, 2010 ]\n\n\u201cOk, that\u2019s nice,\u201d you say.", "The bar chart allowed the user to display 2, 3, or 4 arbitrary dimensions internally called x0, x1, y0, and y1, with x1 and y1 being optional.", "These problems arise with reporting applications in general, in CRUD applications that involve filtering or drilling to specific screens or records, in analysis tools, visualization tools, practically any application where enough data is used to require a database.", "Supergroup lets you easily get tabular data ready for d3.layout.hierarchy visualizations (example).", "The code might have referred directly to specific underlying data dimensions (e.g., year, budget, tier, product category, etc.", "Since nodes at the top level do not have parents, we can do this to workaround it:\n\nvar byYearFips = _.supergroup(data,['year','fips']); var root = byYearFips.asRootVal();\n\nNow we have a root node that is parent to all the Year nodes.", "I\u2019ll demonstrate how Supergroup solves these problems, but first a look at the immediate return value of a Supergroup call."], "title": "Supergroup Tutorial - Using Supergroup.js for In-memory Data Manipulation"}, {"url": "http://yoranbrondsema.com/command-pattern-applied-ember-js-application/", "summary": ["When you include many mixins, it becomes hard to remember where a particular function is defined.", "We have a nicely isolated piece of functionality that has one clear responsibility and that:\n\nis easily testable.", "Performing an action from different routes\n\nTo illustrate my use-case, I\u2019ll give an example.", "can access the objects it needs by giving parameters during creation.", "It encapsulates the logic of the action into a separate entity instead of being arbitrarily included in one of the two controllers.", "Now let\u2019s enhance our PostCommentCommand object a bit by having it access services defined in your application.", "I\u2019m feeling particularly inspired tonight so let\u2019s assume we have an Ember.js application that is a blog.", "// commands/add-comment.js export default Ember.Object.extend({ store: Ember.inject.service(), execute() { // The implementation } });\n\nThere we have it!", "However, the main problems I have with mixins in Ember.js is that:\n\nThey pollute the namespace of the controller and potentially can create conflicts (although this is unlikely in your own application, you still have to be careful).", "When the user presses the undo action, e.g.", "You have to be very careful with hooks such as activate , deactivate , didInsertElement , beforeModel , etc\u2026 They can easily be overridden and their effect nullified if you don\u2019t call this._super(); .", "\u2018ctrl+z\u2019, you simply take the latest Command from the stack, call the undo() function on it and move a currentCommand reference to one Command back.", "Using this pattern appropriately can make your code cleaner and easier to test.", "If you encapsulate every action a user can perform in your application as a Command, you keep track of the history by updating a stack of Command objects.", "Conclusion\n\nThe Command pattern provides a nice abstraction to encapsulate actions into isolated objects.", "For instance, the Store is a service you would typically use in a Command object.", "But for the sake of this example I want to discard this solution by imagining that the functionality of a blog post is wildly different from whether you view it from the /posts route or /post/:post_id route.", "Instead of a mixin, you create a separate object, AddCommentCommand , that has a single function execute() .", "For a redo you would take the current Command, apply the execute() function on it and move the currentCommand one Command ahead.", "For that, we need two additional things on top of what we have:\n\nBesides an execute() function, each Command needs to have an undo() function that undoes the operations performed in execute() .", "In a common blog-post component\n\nThis is the best solution :-)."], "title": "The Command pattern applied to your Ember.js application"}, {"url": "https://auth0.com/blog/2015/11/20/face-off-virtual-dom-vs-incremental-dom-vs-glimmer/", "summary": ["React remains a close second for major collections but falls way behind Incremental DOM in minor collections.", "Glimmer differentiates between static and dynamic components, thus reducing the number of elements that need to be checked when looking for changes.", "Among these, three have been the center of the attention due to their focus on performance: React.js, Ember.js and, more recently, Incremental DOM.", "Pros\n\nReduced memory usage\n\nSimple API\n\nEasily integrates with many frontends and frameworks (meant as a template engine backend from the beginning)\n\nCons\n\nNot as fast as other libraries (this is arguable, see the benchmarks below)\n\nLess mindshare and community use\n\nBenchmarks!", "Glimmer is the result of Ember's developers trying to integrate the benefits of React's Virtual DOM engine into Ember while maintaining API compatibility.", "Virtual DOM provides a series of Javascript calls that tell the library how to build an in-memory DOM tree and how to update it when data bound to it changes.", "By taking a look at the collected data, Incremental DOM appears to be making less JavaScript calls than the alternatives.", "We have run this test using the latest versions of React, Ember 1.x and 2.x (both use Glimmer) and Incremental DOM.", "Disclaimer: some of the graphics in this post are based on the ones found in this excellent post explaining DOM manipulation libraries\n\nPros\n\nFast and efficient \"diffing\" algorithm\n\nMultiple frontends (JSX, hyperscript)\n\nLightweight enough to run on mobile devices\n\nLots of traction and mindshare\n\nCan be used without React (i.e.", "Do note that Glimmer is a full rewrite of Ember's rendering engine and in no way shares code with Virtual DOM.", "React, Ember 1 and Ember 2 all remain close behind Incremental DOM.", "as an independent engine)\n\nCons\n\nFull in-memory copy of the DOM (higher memory use)\n\nNo differentiation between static and dynamic elements *\n\n* React has recently implemented functionality that detects constants and reduces the number of elements that need to be checked for updates.", "While React and Ember handle much more than just DOM building/update, Incremental DOM focuses only on building DOM trees and allowing dynamic updates.", "Pros\n\nFast and efficient diffing algorithm\n\nDifferentiation between static and dynamic elements\n\n100% compatible with Ember's API (you get the benefits without major updates to your existing code)\n\nLightweight in-memory representation of the DOM\n\nCons\n\nMeant to be used only in Ember\n\nOnly one frontend available\n\nIncremental DOM\n\nIncremental DOM tries to bring a simpler approach to the table than the alternatives: rather than keeping a full in-memory representation of the DOM, or keeping a tree of lightweight elements, Incremental DOM uses the real DOM to find differences when data changes.", "On other fronts, React remains a well balanced approach between speed, memory usage, ease of integration and good documentation/support."], "title": "React Virtual DOM vs Incremental DOM vs Ember\u2019s Glimmer"}, {"url": "https://code-cartoons.com/a-cartoon-guide-to-flux-6157355ab207#.n26csskhu", "summary": ["After the store gives it the state, the view controller will tell its child views to rerender based on the new state.", "To request a state change, you must follow proper procedure\u2026 you must submit an action via the action creator/dispatcher pipeline.", "The controller views also ask the stores to keep them notified when state changes.", "Stores let the dispatcher know that they want to be notified whenever an action comes in.", "The notification would go away.", "Once it\u2019s done changing state, the store lets its subscribed view controllers know.", "On top of that, sometimes these actions would trigger a cascade of other changes.", "The data flow\n\nOnce the setup is done, the application is ready to accept user input.", "When you logged in to Facebook, you would see a notification over the messages icon.", "This starts to look like a really edge-of-your-seat game of Pong.", "The solution: unidirectional data flow\n\nSo Facebook decided to try a different kind of architecture, where the data flows in one direction \u2014 only one direction \u2014 and when you need to insert new data, the flow starts all over again at the beginning.", "What helped me understand Flux better wasn\u2019t a diagram like this, but instead thinking of the system in terms of different characters working together as a team to achieve a goal.", "It isn\u2019t aware of anything in the application, it just knows the data that\u2019s handed to it and how to format the data into output that people understand (via HTML).", "When the stores give the state to the controller views, they pass that state along to their child views to render.", "Inside the store there\u2019s usually a switch statement that looks at the action type to decide whether or not this store cares about this action.", "Because user interaction happened through the views, the views sometimes needed to update models based on user input.", "The diagram you\u2019ll find in Facebook\u2019s Flux docs.", "The controller view is like a middle manager who gets notifications from the store and passes the data onto the views under it.", "When an action comes in from the action creator, it will pass the action around to different stores.", "Those view controllers will then ask the store to give them the updated state.", "You go to the action creator knowing basically what message you want to send, and then the action creator formats that in a way that the rest of the system can understand.", "A new developer can come on the project, open up the action creator files and see the entire API \u2014 all of the possible state changes \u2014 that your system provides.", "One change could trigger multiple other changes.", "The problem is that if you\u2019re coming to the documentation completely new to Flux, I don\u2019t think that this diagram helps you understand it\u2026 and that\u2019s what a diagram should do.", "I envision this as an edge-of-your-seat game of Pong \u2014 it\u2019s hard to know where the ball is going to land (or fall off the screen).", "Models pass data to the view layer.", "The Flux dispatcher is different from dispatchers in many other architectures.", "Once the store has made its changes to the state, it will emit a change event.", "Whenever you want to change the state of the app or have the view render differently, you shoot off an action.", "Then the store decides whether it cares about this one or not, and changes the state accordingly.", "If the store does care about this action, it will figure out what change needs to be made based on this action and update the state.", "One really well known example of this set of problems was the notification bug.", "The action creator is like a telegraph operator.", "When you clicked on the messages icon, though, there would be no new message."], "title": "A cartoon guide to Flux \u2014 Code Cartoons \u2014 Medium"}, {"url": "https://css-tricks.com/click-svg-to-focus/", "summary": ["You mentioned an outline, so let's do that and a fill color as well:\n\n.on { fill: pink; stroke: red; stroke-width: 2; }\n\nTada!", "I have a telephone interview Tuesday for a job as a remote SVG Illustrator and I don't want to look like a turkey.", "I think the best way is using anchors in SVG (yep, we can use them in SVG too!", "Usually we have :focus in CSS, but I don't think there is any tried-and-true way to make an SVG element itself focusable.", "Say I have an <svg> of The United States and it's like this:\n\n<svg class=\"us\" viewBox=\"0 0 500 400\"> <path d=\"...\" class=\"wisconsin\" /> <polygon points=\"...\" class=\"colorado\" /> <g class=\"michigan\"> <path d=\"...\" class=\"michigan--up\"> <path d=\"...\" class=\"michigan--main\"> </g> <!-- etc --> </svg>\n\nEach state then is kind of a direct descendant of the <svg> , the selector would be svg.us > * .", "See the Pen Click State to Activate by Chris Coyier (@chriscoyier) on CodePen.", "Here's my slightly simplified version:\n\n<svg viewBox=\"0 0 95 50\"> <a xlink:href=\"#0\"> <circle cx=\"20\" cy=\"25\" r=\"5\" data-Name=\"shape 1\" data-tabindex=\"0\" /> </a> <a xlink:href=\"#0\"> <circle cx=\"40\" cy=\"25\" r=\"5\" data-Name=\"shape 2\" data-tabindex=\"0\" /> </a> <a xlink:href=\"#0\"> <circle cx=\"60\" cy=\"25\" r=\"5\" data-Name=\"shape 3\" data-tabindex=\"0\" /> </a> <a xlink:href=\"#0\"> <circle cx=\"80\" cy=\"25\" r=\"5\" data-Name=\"shape 4\" data-tabindex=\"0\" /> </a> </svg>\n\na:focus { fill: pink; stroke: red; stroke-width: 1; }\n\nThat should do it:\n\nSee the Pen SVG with Focusable Elements by Chris Coyier (@chriscoyier) on CodePen.", "A reader writes in:\n\nIs there anything on your site that shows me how to make an SVG clickable using CSS?", "But you DID say \"clickable using CSS\" specifically.", "The HTML-way is tabindex, which I believe works in some browsers, but we can't count on it."], "title": "Click SVG Element to Focus (and Style)"}, {"url": "https://davidwalsh.name/dont-wait-serviceworker-adding-offline-support-oneline", "summary": ["Publishing to Surge\n\nTo install and publish a site on Surge, first install it through npm:\n\nnpm install --global surge\n\nNext, run the command surge and pass in the directory of static files you'd like to publish to the web:\n\nsurge /path/to/my-project\n\nThis can be the compiled _site directory of a Jekyll project, the build directory of a React project, or a folder with an index.html file inside.", "Today, for every project on Surge, we automatically build an appropriate .appcache file, each time you publish your static site or client-side web app.", "What the auto.appcache file does do, is make it significantly easier for people with web apps, blogs, documentation sites, or client-side applications getting wrapped up in Cordova, to easily opt-into basic offline support.", "Offline-first applications have the added benefit of feeling faster, providing available information effectively even when a network connection isn't available.", "This is also automatically generated for you in Surge's auto.appcache file, giving you clean URLs by default:\n\nFALLBACK: /about /about.html / /index.html /newsletter /newsletter.html\n\nOpting into offline support\n\nWhile this file is generated for every project published to on Surge, developers still get to decide whether or not they'd like to opt-into using it.", "Don\u2019t Wait for ServiceWorker: Adding Offline Support with One-Line\n\nThe HTML5 Application Cache should make building offline-friendly web apps possible.", "CACHE: /about.html # b6bdb311c874fa38b7e6e57a24f875ee 1233 /css/main.css # c7823b8fcc98bdf437ca00d7fefe3b3a 103 /index.html # 1ef88ed5ba3b2645b6efad32530a4681 3009 /newsletter.html # 4122172c8cfea3014425f322c82bc17a 980\n\nThis is normally one of the more complicated aspects of AppCache to deal with, and maintaining this file manually is completely impractical.", "With that in mind, we added an auto.appcache file to every project published on Surge, static web publishing for front-end developers.", "To use it, you just have to opt-in by referencing it your html tag:\n\n<html manifest=\"/auto.appcache\">\n\nThis gives front-end developers the option of ignoring the challenging parts of using the AppCache manifest, instead buying them time to work on the satisfying parts: getting you app or static site to running offline, and working with newer technology like ServiceWorker.", "Layering on ServiceWorker support\n\nThe automatically generated AppCache file won't work for every single project; as Jake Archibald points out, you can't put all of a site of Wikipedia's size into an .appcache file, for example.", "Often, web technologies are chosen precisely for their ability to deliver a cross-platform experience with a single codebase, yet two approaches are needed to deliver an wide-reaching, yet also forward-thinking, approach to offline support."], "title": "Don\u2019t Wait for ServiceWorker: Adding Offline Support with One-Line"}, {"url": "https://davidwalsh.name/essential-javascript-functions", "summary": ["if(fn()) { callback(); } // If the condition isn't met but the timeout hasn't elapsed, go again else if (Number(new Date()) < endTime) { setTimeout(p, interval); } // Didn't match and too much time, reject!", "As I mentioned with the debounce function, sometimes you don't get to plug into an event to signify a desired state -- if the event doesn't exist, you need to check for your desired state at intervals:\n\nfunction poll(fn, callback, errback, timeout, interval) { var endTime = Number(new Date()) + (timeout || 2000); interval = interval || 100; (function p() { // If the condition is met, we're done!", "') + '$' ); function isNative(value) { var type = typeof value; return type == 'function' // Use `Function#toString` to bypass the value's own `toString` method // and avoid being faked out.", "*+?^${}()|[\\]\\/\\\\]/g, '\\\\$&') // Replace mentions of `toString` with `.", "This handy code can give you the answer:\n\n;(function() { // Used to resolve the internal `[[Class]]` of values var toString = Object.prototype.toString; // Used to resolve the decompiled source of functions var fnToString = Function.prototype.toString; // Used to detect host constructors (Safari > 4; really typed array specific) var reHostCtor = /^\\[object .+?Constructor\\]$/; // Compile a regexp using a common native method as a template.", "7 Essential JavaScript Functions\n\nI remember the early days of JavaScript where you needed a simple function for just about everything because the browser vendors implemented features differently, and not just edge features, basic features, like addEventListener and attachEvent .", "var reNative = RegExp('^' + // Coerce `Object#toString` to a string String(toString) // Escape any special regexp characters .replace(/[.", "We all know that we can grab a NodeList from a selector (via document.querySelectorAll ) and give each of them a style, but what's more efficient is setting that style to a selector (like you do in a stylesheet):\n\nvar sheet = (function() { // Create the <style> tag var style = document.createElement('style'); // Add a media (and/or media query) here if you'd like!", "reNative.test(fnToString.call(value)) // Fallback to a host object check because some environments will represent // things like typed arrays as DOM methods which may not conform to the // normal native pattern.", "Oftentimes we validate input before moving forward; ensuring a truthy value, ensuring forms data is valid, etc."], "title": "7 Essential JavaScript Functions"}, {"url": "https://github.com/bevacqua/es6", "summary": ["Then again, I did warn you to read the article series instead.", "ES6 Overview in 350 Bullet Points\n\nMy ES6 in Depth series consists of 24 articles covering most syntax changes and features coming in ES6.", "var {foo: {bar: deep}} = { foo: { bar: 'baz' } } gets you deep: 'baz'\n\ngets you Properties that aren't found yield undefined as usual, e.g: var {foo} = {}\n\nas usual, e.g: Deeply nested properties that aren't found yield an error, e.g: var {foo: {bar}} = {}\n\nIt also works for arrays, var [a, b] = [0, 1] yields a: 0 and b: 1\n\nyields and You can skip items in an array, var [a, , b] = [0, 1, 2] , getting a: 0 and b: 2\n\n, getting and You can swap without an \"aux\" variable, [a, b] = [b, a]\n\nYou can also use destructuring in function parameters Assign default values like function foo (bar=2) {} Those defaults can be objects, too function foo (bar={ a: 1, b: 2 }) {} Destructure bar completely, like function foo ({ a=1, b=2 }) {} Default to an empty object if nothing is provided, like function foo ({ a=1, b=2 } = {}) {}\n\nRead ES6 JavaScript Destructuring in Depth\n\n(back to table of contents)\n\nSpread Operator and Rest Parameters\n\nRest parameters is a better arguments You declare it in the method signature like function foo (...everything) {} everything is an array with all parameters passed to foo You can name a few parameters before ...everything , like function foo (bar, ...rest) {} Named parameters are excluded from ...rest ...rest must be the last parameter in the list\n\nSpread operator is better than magic, also denoted with ... syntax Avoids .apply when calling methods, fn(...[1, 2, 3]) is equivalent to fn(1, 2, 3) Easier concatenation [1, 2, ...[3, 4, 5], 6, 7] Casts array-likes or iterables into an array, e.g [...document.querySelectorAll('img')] Useful when destructuring too, [a, , ...rest] = [1, 2, 3, 4, 5] yields a: 1 and rest: [3, 4, 5] Makes new + .apply effortless, new Date(...[2015, 31, 8])\n\nsyntax Read ES6 Spread and Butter in Depth\n\n(back to table of contents)\n\nArrow Functions\n\nTerse way to declare a function like param => returnValue\n\nUseful when doing functional stuff like [1, 2].map(x => x * 2)\n\nSeveral flavors are available, might take you some getting used to p1 => expr is okay for a single parameter p1 => expr has an implicit return statement for the provided expr expression To return an object implicitly, wrap it in parenthesis () => ({ foo: 'bar' }) or you'll get an error Parenthesis are demanded when you have zero, two, or more parameters, () => expr or (p1, p2) => expr Brackets in the right-hand side represent a code block that can have multiple statements, () => {} When using a code block, there's no implicit return , you'll have to provide it -- () => { return 'foo' }\n\nYou can't name arrow functions statically, but runtimes are now much better at inferring names for most methods\n\nArrow functions are bound to their lexical scope this is the same this context as in the parent scope this can't be modified with .call , .apply , or similar \"reflection\"-type methods\n\nRead ES6 Arrow Functions in Depth\n\n(back to table of contents)\n\nTemplate Literals\n\nYou can declare strings with ` (backticks), in addition to \" and '\n\n(backticks), in addition to and Strings wrapped in backticks are template literals\n\nTemplate literals can be multiline\n\nTemplate literals allow interpolation like `ponyfoo.com is ${rating}` where rating is a variable\n\nwhere is a variable You can use any valid JavaScript expressions in the interpolation, such as `${2 * 3}` or `${foo()}`\n\nor You can use tagged templates to change how expressions are interpolated Add a fn prefix to fn`foo, ${bar} and ${baz}` fn is called once with template, ...expressions template is ['foo, ', ' and ', ''] and expressions is [bar, baz] The result of fn becomes the value of the template literal Possible use cases include input sanitization of expressions, parameter parsing, etc.", "Settled promises unblock deeper branches\n\nYou can tack as many promises as you want onto as many branches as you need\n\nEach branch will execute either .then handlers or .catch handlers, never both\n\nhandlers or handlers, never both A .then callback can transform the result of the previous branch by returning a value\n\ncallback can transform the result of the previous branch by returning a value A .then callback can block on another promise by returning it\n\ncallback can block on another promise by returning it p.catch(fn).catch(fn) won't do what you want -- unless what you wanted is to catch errors in the error handler\n\nwon't do what you want -- unless what you wanted is to catch errors in the error handler Promise.resolve(value) creates a promise that's fulfilled with the provided value\n\ncreates a promise that's fulfilled with the provided Promise.reject(reason) creates a promise that's rejected with the provided reason\n\ncreates a promise that's rejected with the provided Promise.all(...promises) creates a promise that settles when all ...promises are fulfilled or 1 of them is rejected\n\ncreates a promise that settles when all are fulfilled or 1 of them is rejected Promise.race(...promises) creates a promise that settles as soon as 1 of ...promises is settled\n\ncreates a promise that settles as soon as 1 of is settled Use Promisees -- the promise visualization playground -- to better understand promises\n\nRead ES6 Promises in Depth\n\n(back to table of contents)\n\nA replacement to the common pattern of creating a hash-map using plain JavaScript objects Avoids security issues with user-provided keys Allows keys to be arbitrary values, you can even use DOM elements or functions as the key to an entry\n\nMap adheres to iterable protocol\n\nadheres to iterable protocol Create a map using new Map()\n\nusing Initialize a map with an iterable like [[key1, value1], [key2, value2]] in new Map(iterable)\n\nlike in Use map.set(key, value) to add entries\n\nto add entries Use map.get(key) to get an entry\n\nto get an entry Check for a key using map.has(key)\n\nusing Remove entries with map.delete(key)\n\nIterate over map with for (let [key, value] of map) , the spread operator, Array.from , etc\n\nwith , the spread operator, , etc Read ES6 Maps in Depth\n\n(back to table of contents)\n\nSimilar to Map , but not quite the same\n\n, but not quite the same WeakMap isn't iterable, so you don't get enumeration methods like .forEach , .clear , and others you had in Map\n\nisn't iterable, so you don't get enumeration methods like , , and others you had in WeakMap keys must be reference types.", "I heard you like bullet points, so I made an article containing hundreds of those bad boys.", "It has bullet points in it -- obviously.", "0.1 + 0.2 and 0.3\n\nhelps figure out negligible differences between two numbers -- e.g.", "ES6 -- also known as Harmony, es-next , ES2015 -- is the latest finalized specification of the language\n\n, ES2015 -- is the latest finalized specification of the language The ES6 specification was finalized in June 2015 , (hence ES2015)\n\n, (hence ES2015) Future versions of the specification will follow the ES[YYYY] pattern, e.g ES2016 for ES7 Yearly release schedule , features that don't make the cut take the next train Since ES6 pre-dates that decision, most of us still call it ES6 Starting with ES2016 (ES7), we should start using the ES[YYYY] pattern to refer to newer versions Top reason for naming scheme is to pressure browser vendors into quickly implementing newest features\n\npattern, e.g ES2016 for ES7\n\n(back to table of contents)\n\nTo get ES6 working today, you need a JavaScript-to-JavaScript transpiler\n\ntranspiler Transpilers are here to stay They allow you to compile code in the latest version into older versions of the language As browser support gets better, we'll transpile ES2016 and ES2017 into ES6 and beyond We'll need better source mapping functionality They're the most reliable way to run ES6 source code in production today (although browsers get ES5)\n\nBabel (a transpiler) has a killer feature: human-readable output\n\nUse babel to transpile ES6 into ES5 for static builds\n\nto transpile ES6 into ES5 for static builds Use babelify to incorporate babel into your Gulp, Grunt, or npm run build process\n\nto incorporate into your Gulp, Grunt, or build process Use Node.js v4.x.x or greater as they have decent ES6 support baked in, thanks to v8\n\nor greater as they have decent ES6 support baked in, thanks to Use babel-node with any version of node , as it transpiles modules into ES5\n\nwith any version of , as it transpiles modules into ES5 Babel has a thriving ecosystem that already supports some of ES2016 and has plugin support\n\nRead A Brief History of ES6 Tooling\n\n(back to table of contents)\n\nAssignment Destructuring\n\nvar {foo} = pony is equivalent to var foo = pony.foo\n\nis equivalent to var {foo: baz} = pony is equivalent to var baz = pony.foo\n\nis equivalent to You can provide default values, var {foo='bar'} = baz yields foo: 'bar' if baz.foo is undefined\n\nyields if is You can pull as many properties as you like, aliased or not var {foo, bar: baz} = {foo: 0, bar: 1} gets you foo: 0 and baz: 1\n\nYou can go deeper.", "You can't use value types like symbols, numbers, or strings as keys\n\nkeys must be reference types.", "I've also linked to the articles in ES6 in Depth so that you can easily go deeper on any topic you're interested in."], "title": "es6 \u00b7 GitHub"}, {"url": "https://github.com/ericelliott/essential-javascript-links#essential-javascript-links", "summary": ["PrettyDiff\n\nBabel Repl The Babel REPL with compiled output\n\nNitrous.IO Online IDE in the cloud with collaboration & Docker containers\n\nKoding Online cloud development platform with video & audio collaboration\n\nBrowserify Bundle modules for the browser.", "#exercises\n\nLearnRx #exercises\n\nES5 Spec An annotated, hyperlinked version of the ES5 spec\n\nES6 Spec ECMAScript\u00ae 2015 Language Specification\n\nDev tools & collaboration\n\nnvm First install this...\n\nNode Then install Node (with nvm).", "Shippable Docker-based hosted build / CI\n\nTens\u014d A thin API facade in Node\n\nKong API/microservice extension and management layer, centralize auth, cache, logging, rate limiting, etc... plugins in Lua );\n\nPasting / sharing code\n\nCodepen\n\nRequireBin\n\nES6 Fiddle\n\nCodePicNic Embed interactive full-stack snippets & demos\n\nJSBin Embed editable code snippets.", "Node Inspector Debug Node code with the Chrome debug tools --save-live-edit true\n\nTraceGL Powerful runtime analysis of live JavaScript code\n\nTern Static analysis in JavaScript\n\nJSDoc Pair with Tern for static analysis\n\nSlate Generate beautiful API docs for your apps\n\nSlack Chat for teams, with GitHub and Google hangouts integration\n\nGitter Like Slack, but better for OSS projects and free chat.", "New Relic Deep insights into the performance and health of your production apps\n\nSauce Labs Cross platform web application testing with great collaboration and integration support\n\nTravis CI CI, of course\n\nDocker Run your CI process using the same OS configs as your production systems.", "How to use NPM as a Build Tool\n\npre-commit Easily configure pre-commit hooks for your package\n\nTesting / Lint / Quality checkers\n\nESLint The pluggable linting utility for JavaScript and JSX.", "Essential JavaScript Links\n\nA curated list by Eric Elliott and friends.", "#code\n\nIstanbul Code coverage reporting\n\ntape Dead simple unit testing #code\n\ntap-browser-color Prettify tap output in the browser.", "Atom Nice, hackable editor by GitHub.", "DemoJS The JavaScript demoscene party\n\nJS1k JavaScript demos in 1k of memory\n\nJS13k Games JavaScript games in 13k of memory\n\nFightCode game program virtual battle bots and climb the leaderboard\n\nNode Knockout The legendary Node competition\n\nHackable Hardware\n\nFor kids (and adults who just love to have fun)\n\nTwitter (alphabetical order)"], "title": "ericelliott/essential-javascript-links \u00b7 GitHub"}, {"url": "https://github.com/flipboard/react-canvas", "summary": ["There is experimental support for using css-layout to style React Canvas components.", "createClass ({ render : function () { var surfaceWidth = window .", "This is a more expressive way of defining styles for a component using standard CSS styles and flexbox.", "For a full list of supported events see EventTypes.", "React Canvas Components\n\nReact Canvas provides a set of standard React components that abstract the underlying rendering implementation.", "Because React enforces that all components return a single component in render() , Groups can be useful for parenting a set of child components.", "To override the default server and live reload ports, run npm start with PORT and/or RELOAD_PORT environment variables.", "Contributors to the main repository must accept Flipboard's Apache-style Individual Contributor License Agreement (CLA) before any changes can be merged.", "getImageHeight () + 10 , left : 0 , width : window .", "Having a long history of building interfaces geared toward mobile devices, we found that the reason mobile web apps feel slow when compared to native apps is the DOM.", "We welcome pull requests for bug fixes, new features, and improvements to React Canvas.", "However, it adds the ability to hide an image until it is fully loaded and optionally fade it in on load.", "innerWidth , height : 20 , lineHeight : 20 , fontSize : 12 }; } });\n\nMany mobile interfaces involve an infinitely long scrolling list of items.", "While there have been other attempts to bind canvas drawing APIs to React, they are more focused on visualizations and games.", "The Group is also an important component for optimizing scrolling performance, as it allows the rendering engine to cache expensive drawing operations.", "Common styles and properties such as top, width, left, height, backgroundColor and zIndex are expressed at this level.", "innerHeight / 2 ); }, getImageStyle : function () { return { top : 0 , left : 0 , width : window .", "getGradientColors ()} / > < / Group > ); } getGradientColors (){ return [ { color : \" transparent \" , position : 0 }, { color : \" #000 \" , position : 1 } ] }\n\nListView is a touch scrolling container that renders a list of elements in a column.", "Though much of the code is in production on flipboard.com, the React canvas bindings are relatively new and the API is subject to change.", "Running the examples\n\nnpm install npm start\n\nThis will start a live reloading server on port 8080.", "React Canvas brings some of the APIs web developers are familiar with and blends them with a high performance drawing engine.", "renderItem } / > ); }, getNumberOfItems : function () { // Return the total number of items in the list }, getItemHeight : function () { // Return the height of a single item }, renderItem : function ( index ) { // Render the item at the given index, usually a <Group> }, });\n\nSee the timeline example for a more complete example.", "The Page component in the timeline example contains an example of using measureText to achieve precise multi-line ellipsized text.", "Text sizing\n\nReact Canvas provides the measureText function for computing text metrics."], "title": "Flipboard/react-canvas \u00b7 GitHub"}, {"url": "https://glebbahmutov.com/blog/instant-web-application/", "summary": ["Here is one example: the screen recording of Angular2 TodoMVC application where I add items and reload the page.", "In server-side rendering, the page is rendered in the complete form on the server, thus when it arrives the user sees the right layout instantly.", "Ideas for further research and experimentation\n\nHow much code does one need to load in order to make the first static page appear functional?", "This \"instant\" technology is called bottle-service; it is web framework-agnostic and should work with any library: Virtual-Dom, Angular, React, etc.", "Of course, there is a delay between the page load and the instant it becomes it fully responsive application - but at least this is better than hiding the page behind the loading screens, or sudden violent page layout shifts.", "Every time the state changes, the application needs to store both the state and the rendered HTML snapshot.", "We then can store the \"above-the-fold\" code together with the HTML snapshot in the ServiceWorker, loading it right away, making the application appear and respond to the user \"instantly\".", "Conclusion\n\nIn a sense, we have removed the need to render the application server-side (with its problems, framework compatability, etc) and instead are using the best page rendering engine - the browser itself.", "The web application can then take over, \"hydrating\" the static page.", "Then all of the sudden, everything shifts - the application's code took over, rewriting the page's tree structure, forcing the browser to render the loaded data.", "The state can be stored inside the page, even inside the localStorage , while the HTML snapshot is sent to the ServiceWorker code where it will be available on page reload.", "I want to explore dividing the library + web code into a tiny \"above-the-fold\" code fragment + the rest.", "The larger question I want to answer is this:\n\nCan we recreate the same \"instant\" page loading experience in our web application without the server-side rendering?", "), source\n\nUses bottle-service library to implement self-rewriting\n\nOpen your favorite web application, even a simple TodoMVC would work.", "The communication with the ServiceWorker part only has 1 API method, called refill ."], "title": "Better world by better software"}, {"url": "https://medium.com/@daffl/html5-nodejs-and-neural-networks-the-tech-behind-mysam-an-open-source-siri-6cc27992098b#.b87we74ey", "summary": ["It also allows you to create plugins for voice controlling local programs like iTunes or hardware like an Arduino robot.", "Once a classification comes back and is past a certain confidence level (I found a 30% to be a good threshold) the frontend will look up the action and call it if it exists.", "Here is an example how natural-brain works:\n\nnode-natural already comes with two statistical models for language classification (naive bayes and logistic regression) but since the data format was also perfect to use with a neural network, connecting it to BrainJS was an interesting experiment.", "HTML5, NodeJS and Neural Networks: The tech behind MySam, an open source Siri\n\nRecently I published the very first version of MySam, an open \u201cintelligent\u201d assistant for the web similar to Siri or Google Now.", "The NodeJS server runs natural-brain which combines node-natural, a natural language library with BrainJS, a neural network library for JavaScript.", "That means that, given some training data and an input text, you will get back probabilities with how likely it matches a certain label (in Sam\u2019s case which action).", "It makes it very easy to add voice recognition to any web application and works extremely well \u2014 even with my odd German-Canadian English accent.", "Since we can assume that a classified sentence \u2014 provided a given confidence \u2014 is quite similar to the original training sentence it simply looks at the words around a tag that it has in common.", "It makes it possible to provide different frontends like a web-page, the Electron desktop, a mobile application or even connect a chat bot to it.", "I do not have any hard numbers for comparison yet but at least in Sam\u2019s case the neural network seemed to perform much better than the other two methods and the prediction accuracy and learning ability, especially once it had more data available, was more than surprising at times.", "It is a DoneJS application which allows you to dynamically load globally installed plugins and register actions (a callback that gets the classification result and the main DOM element) and learners, which is the form that is shown when learning something new.", "While not the most clever algorithm it works quite well mainly thanks to the natural language classification accuracy."], "title": "The tech behind MySam, an open source Siri \u2014 Medium"}, {"url": "https://medium.com/@dan_abramov/react-components-elements-and-instances-90800811f8ca#.dqgdwl8cn", "summary": ["When React sees an element with a function or class type, it will know to ask that component what element it renders to with the given props.", "this.message = new Message({ text: 'Success!", "'\n\n}\n\n}\n\n}\n\n}\n\nAt the end of this process React knows the result DOM tree, and a renderer like ReactDOM or React Native applies the minimal set of changes necessary to update the actual DOM nodes.", "' });\n\nthis.el.appendChild(this.message.el);\n\n}\n\n}\n\n}\n\nThis is pseudocode, but this is more or less what you end up with when you try to write composable UI that behaves consistently in an object oriented way with a framework like Backbone.", "'\n\n}\n\n}\n\n// React: ...And Form told me this...\n\n{\n\ntype: Button,\n\nprops: {\n\nchildren: 'OK!", "When you call\n\nReactDOM.render({\n\ntype: Form,\n\nprops: {\n\nisSubmitted: false,\n\nbuttonText: 'OK!", "React Elements are easy to traverse, don\u2019t need to be parsed, and of course are much lighter than the actual DOM elements\u2014they\u2019re just objects!", "It will gradually \u201crefine\u201d its understanding of your component tree in terms of simpler primitives:\n\n// React: You told me this...\n\n{\n\ntype: Form,\n\nprops: {\n\nisSubmitted: false,\n\nbuttonText: 'OK!", "This feature lets you define a DangerButton component as a Button with a specific color property value without worrying about whether Button renders to a button, a div, or something else entirely.", "However, the type of an element can also be a function or class corresponding to a React component:\n\n{\n\ntype: Button,\n\nprops: {\n\ncolor: 'blue',\n\nchildren: 'OK!", "Recap\n\nAn element is a plain object describing what you want to appear on the screen in terms of the DOM nodes or other components.", "'\n\n}\n\n}, {\n\ntype: DangerButton,\n\nprops: {\n\nchildren: 'Yep'\n\n}\n\n}, {\n\ntype: Button,\n\nprops: {\n\ncolor: 'blue',\n\nchildren: 'Cancel'\n\n}\n\n}]\n\n});\n\nOr, if you prefer JSX:\n\nconst DeleteAccount = () => (\n\n<div>\n\n<p>Are you sure?</p>\n\n<DangerButton>Yep</DangerButton>\n\n<Button color='blue'>Cancel</Button>\n\n</div>\n\n);\n\nThis keeps components decoupled from each other, as they can express both is-a and has-a relationships exclusively through composition.", "this.button = new Button({\n\nchildren: buttonText,\n\ncolor: 'blue'\n\n});\n\nthis.el.appendChild(this.button.el);\n\n}\n\nif (this.button) {\n\n// The button is visible.", "In this traditional UI model, it is up to you take care of creating and destroying child component instances.", "React will take care of creating an instance for every class component, so that you can write components in an object oriented way with methods and local state, but other than that, instances are not very important in the React\u2019s programming model, and are managed by React itself.", "When it sees\n\n{\n\ntype: Button,\n\nprops: {\n\ncolor: 'blue',\n\nchildren: 'OK!", "This is the traditional object oriented UI programming.", "Class components have instances, but you never need to create a component instance directly\u2014React takes care of this.", "For example:\n\n{\n\ntype: 'button',\n\nprops: {\n\nclassName: 'button button-blue',\n\nchildren: {\n\ntype: 'b',\n\nchildren: 'OK!", "'\n\n}\n\n}\n\nReact will ask Button what it renders to, and it will get\n\n{\n\ntype: 'button',\n\nprops: {\n\nclassName: 'button button-blue',\n\nchildren: {\n\ntype: 'b',\n\nchildren: 'OK!", "return {\n\ntype: Message,\n\nprops: {\n\ntext: 'Success!", "class Form extends TraditionalObjectOrientedView {\n\nrender() {\n\n// Read some data passed to the view\n\nconst { isSubmitted, buttonText } = this.attrs;\n\nif (!isSubmitted && !this.button) {\n\n// Form is not yet submitted.", "An element is a plain object describing a component instance or DOM node and its desired properties.", "*\n\nWhen the element\u2019s type is a string, an element represents a DOM node with that tag name, and props correspond to its attributes.", "In both cases, it takes props as an input, and returns an element tree as the output.", "It\u2019s just an immutable description object with two fields: type: (string | Component) and props: Object.", "',\n\ncolor: 'blue'\n\n}\n\n}\n\n// React: ...and Button told me this!", "A functional component is less powerful but is simpler, and it acts like a class component with just a single render() method.", "For example, you may declare a Button component by creating a class.", "Only components declared as classes have instances, and you never create them directly: React does that for you.", "'\n\n}\n\n}, document.getElementById('root'));\n\nReact will ask the Form component what element tree it returns, given those props.", "The returned element tree can contain both elements describing DOM nodes, and elements describing other components.", "We let React create, update, and destroy instances."], "title": "React Components, Elements, and Instances \u2014 Medium"}, {"url": "https://medium.com/@gilbox/how-can-react-and-flux-help-us-create-better-stronger-faster-angular-applications-639247898fb#.mu7v1lps8", "summary": ["This is similar to the approach used by flux-angular, a flux framework for angular which forces cloning of all data going into and coming out of stores.", "Update: I\u2019ve written another article that robustly solves Angular+Flux routing.", "The role of ngRoute & ui-router\n\nAfter using these two guys for a while (mostly ui-router), I have come to the conclusion that the two most popular routers for angular are mediocre to poor at handling application flow in complex asynchronous scenarios.", "In angular, we can accomplish child-to-parent communication with two-way data binding, or event emitting.", "However, Facebook engineers recognized that allowing data to flow in two directions created applications that were difficult to reason about.", "This leads to the creation of rather dumb components which generally receive all of their state data via DOM attributes, and do not directly mutate that data.", "If you\u2019re new to Flux, it\u2019s important to realize that Action Creators and Stores aren\u2019t really concrete classes nor implementations.", "Flux Concept #1: Unidirectional Data Flow\n\nUnidirectional data flow is, in part, an evolution of the stateless components concept.", "To facilitate the unidirectional flow of data, they also introduced Action Creators and Stores.", "For example, consider the following directive implemented in two different ways.", "In color experiment flux, here\u2019s what the unidirectional dataflow looks like:\n\nReact&Flux Concept #2: Single Source of Truth\n\nWhat we can deduce from the diagram above is that the truth about the visual state of the application is managed by the store.", "ngReact allows you to include React components inside of an angular application.", "React & Flux Concepts\n\nIf you\u2019ve read about Flux already, then you probably know that Flux is an application architecture which doesn\u2019t specifically rely on React.", "Similarly, in angular we may implement stateless directives which also receive state data that is passed in with attributes, and do not directly mutate that data.", "React Concept #3: DOM Diffing\n\nSuffice to say, that in many cases React is much faster than angular.", "My theory is that in order to prevent a directive utilizing ng-model from becoming stateful, we should clone any state data going into and coming out of ng-model, and this would essentially preserve the advantages of using flux (update: check out this response by Wolfram Sokollek, he solves this very nicely).", "For most other messaging situations, the flux dispatcher is probably the way to go.", "I have an angular flux-based solution which minimally uses ngRoute along with standard flux concepts to handle application flow and routing at the same time.", "The role of ng-model\n\nIn color experiment, I used the ng-model directive to create toggle buttons out of checkbox input elements."], "title": "How can React and Flux help us create better Angular applications? \u2014 Medium"}, {"url": "https://medium.com/@nirbenita/the-10-design-heuristics-for-developers-1e70a9dc58a7", "summary": ["Focusing on making the underlying design more usable will help determine, amongst other things:\n\nHow easy it is to on board new developers.", "I would rather have you think of the following list as guidelines to designing systems rather than a set of strict rules saying \u201cThis is the best way to do X.\u201d\n\nDesign Heuristics.", "**Like designers, programmers enjoy applying their creativity to solve complex problems.", "Match between system and the real world\n\nWhen writing documentation or naming a component, always try to use familiar terms.", "While working with developers, I found out that these concepts already exist among programmers \u2014 they\u2019re just not as articulated as they are for designers.", "*I haven\u2019t gone into actual code in any of my examples as I feel people can be a bit too touchy about the right way to write any piece of software.", "Gist: I\u2019ll try to explain Jakob Nielsen\u2019s 10 design heuristics.", "When we get 3\u20135 usability experts to use our product and judge its compliance with basic usability principles a.k.a \u201cThe 10 Design Heuristics\u201d, that\u2019s heuristics simplified.", "User control and freedom\n\nA system should allow you the freedom to explore its contents, but do so in a responsible manner, such that lets you recover from mistakes should you make one.", "I use examples that you, as a developer, could relate to \u2014 so that the products you ship and the code behind them would be more usable."], "title": "10 design principles \u2014 for developers \u2014 Medium"}, {"url": "https://medium.com/@trek/last-week-i-had-a-small-meltdown-on-twitter-about-npms-future-plans-around-front-end-packaging-b424dd8d367a#.nsw0s3xsu", "summary": ["Outside its node success, CJS is maybe 2% of browser JavaScript, via browserify.", "She\u2019s probably using Rails or Node and is certainly familiar with package management from those environments.", "So, I never need to do:\n\ncli-tool install packageA packageB packageC --module=es6\n\nIf you think this isn\u2019t a MASSIVELY useful feature for both authors and consumers, try reading Github issues for almost any JavaScript project.", "Library authors without the time to make packages available for easy consumption by \u201cfront end developers\u201d can stop worrying and just publish.", "Bower gets the flat hierarchy right, but has no convention around project structure so everyone is writing their own shim code to get files from bower_compoents into their projects.", "It should look like this:\n\ncli-tool install lodash\n\nFine Grained\n\nThis is the module import process.", "For fine-grained dependencies I import using my preferred module notation.", "Clearly delineate server, build, and client packages in manifest and directory structure to minimize confusion.", "If you don\u2019t agree with that, package management probably isn\u2019t a concern for you.", "[2] Before you um actually me let\u2019s get a common conversation out of the way:\n\nYes, your {INSERT PREFERRED MODULE FORMAT} \u201cjust works\u201d for you.", "I expose my public API using my preferred module notation.", "It builds from source into multiple consumption formats.", "I don\u2019t add brittle glue code for N consumption formats.", "Handcrafted per-library build tools only add complexity to an already complex problem.", "If she\u2019s a \u201cfull stack\u201d or \u201cfull frontal\u201d developer, she\u2019s familiar with how useful dependency management can be in environments where package location and structure is mandated and a single module format is baked in: It Just Works\u2122.", "It might look like this:\n\nvar _ = require('lodash');\n\nbut is ideally much finer grained to make exact dependencies explicit and avoid bundling unused code:\n\nimport {clone, random} from \"lodash\";\n\nConstraints and Trade-offs\n\nYSlow is a great list of browser environment constraints to think about in development.", "Conservatively 70%, but probably closer 95% of all people using JavaScript in the browser today.", "A great browser package manager needs to allow both patterns easily.", "After five years of community experimentation I\u2019m pretty convinced this problem won\u2019t go away until we all start using the same module format for both authoring and consuming[3] or some central broker makes publishing and consuming formats frictionless.", "Dependency Granularity\n\nDependencies come in two granularities: coarse and fine.", "Authoring occurs in the author\u2019s preferred module format\n\nAs a library author I declare my coarse dependencies in a manifest file once and never again.", "For sufficiently trivial use cases you might think \u201cjust concat all JavaScript.\u201d This works fine if you\u2019re a front end developer or have a small full stack application.", "Was spending time building custom tooling around this really the best use of her time?", "Offer a web-based build tool/package bundler for \u201cfront end developers\u201d\n\nAll the neat package management tricks above are awesome for the subset of browser JavaScript users who are happy with build tools and command line interfaces.", "She already has a preferred workflow, build process, and module format for her code and wants to add external dependencies without additional format conversion incantations.", "I\u2019m feeling pretty convinced that you\u2019re right and {INSERT PREFERRED MODULE FORMAT} has won.", "\u2514\u2500\u2500 node_modules\n\n\u251c\u2500\u2500 express\n\n\u251c\u2500\u2500 mocha\n\n\u251c\u2500\u2500 react\n\n\u2514\u2500\u2500 underscore\n\nFlatten the dependency tree, Let consumers resolve version conflicts\n\nTo address the asset size constraints of the web platform npm-style sub-dependences don\u2019t work.", "I\u2019m convinced they don\u2019t really \u201cget\u201d the needs of the browser JavaScript community and just really, really really hope everyone starts using CJS.", "Conversion from authoring format to consumer format occurs on publish\n\nTo enable the above, publishing does not transmit authoring source code.", "I import them using my preferred module notation.", "All of her libraries have a /dist directory checked into fucking source control, she\u2019s has to research and build her own conversion tools, educate every committer about them, and keeps getting PRs targeting the build files.", "[3] so: either a) in 2015 when we all collectively agree to move to ES6 for authoring which is the correct technical solution to this problem or b) never because ES6 is a technical solution that, like all other technical solutions, has to gain broad community support to Just Work\u2122.", "\u201cFront end developers\u201d get a single, reliable source for packages.", "Good modularity is not composed at a depth of 1, so if you want both \u201cmany small packages\u201d and It Just Works\u2122 your packages must be in a single module format from your application code down to the deepest internal dependency.", "For dependency management the two most important constraints are\n\nMinimize HTTP Request Size\n\nMinimize HTTP Requests\n\nFrustratingly, these two constraints compete.", "She wants to support as many people as possible without forcing them to change their preferred module and build process.", "You don\u2019t get the clarity of expression that comes with a focused dependency syntax, or space saving features like tree-shaking but you can\u2019t knock globals for the It Just Works\u2122 success.", "She already has a preferred workflow, build process, and module format for her code.", "Although this doesn\u2019t cover every community, I roughly divide most development work with JavaScript in the browser into three broad camps:\n\n1.", "Abandon All Hope\n\nRight now you\u2019re probably thinking: this kind of behavior doesn\u2019t belong in a package management system.", "If you think that modularity is good, let\u2019s further agree you need a module format: syntax to define what code you need and a syntax expose your public API.", "I\u2019m happy to note my preference in my manifest.json file:\n\n{\n\n'module': 'cjs'\n\n}\n\nI don\u2019t add brittle glue code in the space between modules or hand-craft a separate build manifest to make sure files are loaded in the correct order.", "JavaScript Modules: Welcome to My Emo Hellscape\n\ntl;dr: unless all dependencies use the same module format, dependency tree of depth > 1 is so painful nobody does it.", "Declaring coarse dependencies is all about getting files (and the right versions of those files) from the package management system onto a computer for development, build, or deployment.", "If I\u2019m betting on an ES6 future, awesome.", "Library authors are publishing to your registry anyway, do them (and their users) a solid: make the packages available for download in a global-style format.", "I don\u2019t add brittle glue code in the space between modules.", "Please, make this problem go away.", "If you haven\u2019t read npm\u2019s plan, let me summarize: \u201cwe\u2019re going to borrow bower\u2019s flat dependency tree concept and hope the problem will just solve itself.\u201d\n\nMy twitter emo about npm stems from the fact that they don\u2019t have a public plan for the 800lbs gorilla-in-the-room problem that makes browser JavaScript dependency management a hellscape: module formats.", "Consuming occurs in the consumer\u2019s preferred module format\n\nWhen writing an application, I don\u2019t need to know what module format my dependencies were authored in.", "Authorship and Consumption\n\nPackage managers have two primary users: library consumers and library authors.", "Duo and Bower both let you point to source control for packages, but source files aren\u2019t builds so authors have to either create new source repos that are really just builds or include build files in their source."], "title": "Welcome to My Emo Hellscape \u2014 Medium"}, {"url": "https://medium.com/ben-and-dion/web-components-are-dead-3988b31c380a#.9pwd189mo", "summary": ["Now, React has had to work around the browser to give us the declarative development model that many of us enjoy.", "\u201cIt takes 10/20 years to become an overnight success\u201d\n\nOh how often we fall for that trap.", "Multiple implementations, much needed in a world where Firefox was fighting for share from IE.", "With Web Components we are still missing some crucial browser support, but it is on its way thanks to good browser engine folk.", "Once your eyes could see past syntax, you realized that it maybe was a feature and not a bug.", "Microsoft built an ActiveX component to solve a problem for the Outlook Web team.", "I remember giving talks about how to \u201cbuild killer web sites with dhtml!\u201d (or some other silly title) and the room was a lot more full once Jesse James Garrett pushed it out there in a way that made sense to folks.", "Are we tired of not having a foundation and having the \u201coh crap I really want that component but it is based on jQuery and I am on Prototype!\u201d of old?", "As we see real world usage such as AMP, it may show developers that it is ready for prime time.", "So, one thing React has done well, is that it has shown us that components can actually work well on the Web.", "This way you maybe don\u2019t run into the pain of the bugs that can occur when you have retained vs. immediate mode APIs.", "For the folks who were \u201cdoing Ajax before it was cool\u201d it was almost comical to see how it surged after years of lying dormant."], "title": "Web Components Are Dead? \u2014 Ben and Dion \u2014 Medium"}, {"url": "https://medium.com/ios-os-x-development/ios-architecture-patterns-ecba4c38de52#.3h3tf1hdd", "summary": ["\u2014 responsible for the domain data or a data access layer which manipulates the data, think of \u2018 \u2019 or \u2018 \u2019 classes.", "MVP\n\nCocoa MVC\u2019s promises delivered\n\nPassive View variant of MVP\n\nDoesn\u2019t it look exactly like the Apple\u2019s MVC?", "This distinction provides superb testability, which comes at cost of the development speed, because you have to make manual data and event binding, as you can see from the example:\n\nMVP example\n\nImportant note regarding assembly\n\nThe MVP is the first pattern that reveals the assembly problem which happens due to having three actually separate layers.", "\u2014 responsible for the presentation layer ( ), for iOS environment think of everything starting with \u2018 \u2019 prefix.", "MV(X) essentials\n\nNowadays we have many options when it comes to architecture design patterns:\n\nFirst three of them assume putting the entities of the app into one of 3 categories:\n\nModels \u2014 responsible for the domain data or a data access layer which manipulates the data, think of \u2018 Person \u2019 or \u2018 PersonDataProvider \u2019 classes.", "Although it is possible to implement the traditional MVC in iOS application, it doesn\u2019t make much sense due to the architectural problem \u2014 all three entities are tightly coupled, each entity knows about the other two.", "But let\u2019s assess it in terms of features defined in the beginning of the article:\n\nDistribution \u2014 the View and the Model in fact separated, but the View and the Controller are tightly coupled.", "Testability \u2014 is excellent, we can test most of the business logic due to the dumb View .", "Moreover, view controller offloading became an important topic for the iOS developers.", "The interactions between the View and the Controller aren\u2019t really testable with Unit Tests\n\nWith all that said, it might seems that Cocoa MVC is a pretty bad pattern to choose.", "How many times have you seen code like this:\n\nThe cell, which is the View configured directly with the Model, so MVC guidelines are violated, but this happens all the time, and usually people don\u2019t feel it is wrong.", "\u2014 due to the bad distribution you\u2019ll probably only test your Ease of use \u2014 the least amount of code among others patterns.", "Easy of use \u2014 its has the same amount of code as the MVP in our example, but in the real app where you\u2019d have to forward all events from the View to the Presenter and to update the View manually, MVVM would be much skinnier if you used bindings.", "The View might be also tested, but since it is UIKit dependant you might want to skip it.", "Having entities divided allows us to:\n\nunderstand them better (as we already know)\n\nreuse them (mostly applicable to the View and the Model )\n\nand the ) test them independently\n\nLet\u2019s start with MV(X) patterns and get back to VIPER later.", "MVVM example\n\nAnd again back to our feature assessment:\n\nDistribution \u2014 it is not clear in our tiny example, but, in fact, the MVVM\u2019s View has more responsibilities than the MVP\u2019s View .", "Views \u2014 responsible for the presentation layer ( GUI ), for iOS environment think of everything starting with \u2018 UI \u2019 prefix.", "Because the first one updates it\u2019s state from the by setting up bindings, when the second one just forwards all events to the and doesn\u2019t update itself Testability \u2014 the View Model knows nothing about the View , this allows us to test it easily.", "Because the first one updates it\u2019s state from the View Model by setting up bindings, when the second one just forwards all events to the Presenter and doesn\u2019t update itself .", "Let\u2019s look on the features of the MVP:\n\nDistribution \u2014 we have the most of responsibilities divided between the Presenter and the Model , with the pretty dumb View (in the example above the Model is dumb as well).", "We can move generation of greeting into the new GreetingModel class and test it separately, but we can\u2019t test any presentation logic (although there is not much of such logic in the example above) inside the GreetingViewController without calling the UIView related methods directly (viewDidLoad, didTapButton) which might cause loading all views, and this is bad for the unit testing.", "Although you still have ability to offload some of the business logic and data transformation to the Model, you don\u2019t have much choice when it comes to offloading work to the View, at most of times all the responsibility of the View is to send actions to the Controller.", "Let\u2019s have a look on the simple playground example:\n\nMVC example\n\nMVC assembling can be performed in the presenting view controller\n\nThis doesn\u2019t seem very testable, right?", "Testability \u2014 due to the bad distribution you\u2019ll probably only test your Model."], "title": "iOS Architecture Patterns \u2014 iOS App Development \u2014 Medium"}, {"url": "https://medium.com/javascript-scene/common-misconceptions-about-inheritance-in-javascript-d5d9bab29b0a#.ioqwuajfg", "summary": ["It\u2019s also easily tricked into false positives (and more commonly) false negatives from another source.", "Any function can create a closure for data privacy:\n\nDoes `new` mean that code is using classical inheritance?", "Aren\u2019t classes the right way to create objects in JavaScript?", "What it actually does is:\n\nCreate a new instance\n\nBind `this` to the new instance\n\nReference the new object\u2019s delegate [[Prototype]] to the object referenced by the constructor function\u2019s `prototype` property.", "Using concatenative inheritance, you just copy properties from an exemplar object to a new instance.", "Besides that, trying to force your JS code to behave like strongly typed code can block your functions from being lifted to generics, which are much more reusable and useful.", "Important: `instanceof` does not do type checking the way that you expect similar checks to do in strongly typed languages.", "`Object.create()` is an ES5 feature that was championed by Douglas Crockford so that we could attach delegate prototypes without using constructors and the `new` keyword.", "You can attach delegate prototypes with `Object.create()` (an ES5 feature):\n\nLet\u2019s break this one down a little.", "Nothing is broken \u2014 it\u2019s just that `instanceof` can\u2019t make any guarantees about type safety.", "Using delegate prototypes (setting the prototype of one instance to refer to an examplar object), it\u2019s literally Objects Linking to Other Objects, or OLOO, as Kyle Simpson calls it.", "Instead, it does an identity check on the prototype object, and it\u2019s easily fooled.", "It won\u2019t work across execution contexts, for instance (a common source of bugs, frustration, and unnecessary limitations).", "Wise people will take Douglas Crockford\u2019s advice:\n\n\u201cIf a feature is sometimes dangerous, and there is a better option, then always use the better option.\u201d\n\nDon\u2019t you need a constructor function to specify object instantiation behavior and handle object initialization?", "Allows `instanceof` to check whether or not an object\u2019s prototype reference is the same object referenced by the .prototype property of the constructor.", "For any of this article to make sense, you must keep these points in mind:\n\nIn class inheritance, instances inherit from a blueprint (the class), and create sub-class relationships.", "Prototypal inheritance does not necessarily create similar hierarchies.", "Those hierarchies lead to arthritic code (hard to change) and brittleness (easy to break due to rippling side-effects when you modify base classes).", "Names the object type after the constructor, which you\u2019ll notice mostly in the debugging console.", "It\u2019s easy to flatten many prototypes together to form a single delegate prototype.", "It looks like this (in ES6):\n\nOf course, object literals have been around a lot longer than ES6, but they lack the method shortcut seen above, and you have to use `var` instead of `let`."], "title": "Common Misconceptions About Inheritance in JavaScript \u2014 JavaScript Scene \u2014 Medium"}, {"url": "https://medium.com/javascript-scene/must-see-javascript-dev-tools-that-put-other-dev-tools-to-shame-aca6d3e3d925#.qc68yun3p", "summary": ["But JavaScript is a dynamic language, and along with its dynamic nature comes a need for more runtime developer tooling.", "ironNode: ironNode is a desktop debugging app for Node built on Electron, the same cross-platform desktop runtime that powers the Atom editor.", "To get started fast, check out the webpack config in the Universal React Boilerplate project.", "For an idea of what those tools could be like, read \u201cThe Future of Programming: WebAssembly and Life After JavaScript\u201d.", "Read \u201cSupercharge JavaScript Development in Atom\u201d for lots of great Atom plugins.", "It enables a lot of really interesting features such as hot module replacement, which lets your live code in the browser update automatically as you change files without a page reload.", "To use it with Babel, I use the following `debug.js` script:\n\nrequire('babel-core/register');\n\nrequire('./index');\n\nTo launch the debugger:\n\niron-node source/debug.js\n\nWorks like a charm.", "Here\u2019s what it looks like with the slider view:\n\nConclusion\n\nJavaScript has the richest array of developer tools I\u2019ve ever seen for any language.", "I also believe that the line between the application we\u2019re building, and the development environments we use to build it will blur over time.", "Actions such as scrolling, clicks, and form interactions will also be synchronized across devices so you can easily test your app workflows and be sure that everything appears correctly everywhere.", "Debuggers: I missed the integrated debugger when I started programming for the web, but the Chrome and FireFox teams have elevated runtime debugging to a whole new level.", "Here\u2019s why:\n\nRedux and Redux DevTools enable some truly next-level debugging interactions against your live running code.", "But the thing I like best about type annotations is runtime type reflection, and the runtime developer tools that can be enabled using it.", "TraceGL: TraceGL is a runtime debugging tool that lets you observe all of the function calls in your software as they\u2019re happening in realtime, rather than stepping through your code manually, one step at a time.", "Because React\u2019s abstraction layer is used by some great developer tools to enable the amazing developer tools of the future, featuring hot loading (updates to your live running code without page refreshes), time travel, and more\u2026 read on!", "It is really a UI abstraction layer that abstracts you away from the DOM.", "The Editor: I started my dev career using big, massively integrated IDEs like Borland IDE, Microsoft Visual Studio, Eclipse, and WebStorm.", "For example, the Unreal game engine integrates blueprint editing into the game engine itself, allowing developers and designers to build complex behaviors from inside the running game.", "Babel: Babel is a compiler that lets you use not-yet-supported features of ES6+, JSX and more in your JavaScript code today.", "It allows you to get really great, understandable insights about the actions that have been performed in your app:\n\nIt even allows you to shuttle back and forth in time using the time travel debugging features.", "I predict we\u2019ll see more live programming features come online as the JavaScript moves deeper into unified application state and immutability (which are the features that enable time travel debugging in Redux DevTools).", "In the future, we may see more cohesive integrated developer tool offerings.", "You\u2019ll also want atom-ternjs to enable JavaScript intellisense features.", "It doesn\u2019t provide a runtime solution\u2026 yet \u2014 they\u2019re working on it using experimental features of the new JavaScript Reflect API, but then you\u2019re depending on very experimental spec features that may or may not land in the spec.", "You may also want to look at Visual Studio Code.", "Linting: ESLint is by far the best linter I\u2019ve used for any language.", "Hot module replacement is the first step towards a truly continuous realtime developer feedback loop.", "It optionally adds automated runtime type checking, as well.", "I think over time, we\u2019ll start to see those features in web and native mobile applications as well.", "Everybody today seems to know about Chrome\u2019s DevTools and how to step through code, but did you know it has great features for advanced performance & memory profiling and auditing?", "Once you start using it, I predict you\u2019ll get addicted to the new syntax quickly, because ES6 offers some truly valuable syntax additions to the language, such as destructuring assignment, default parameter values, rest parameters and spread, concise object literals, and so on\u2026 Check out \u201cHow to Use ES6 for Universal JavaScript Apps\u201d for details.", "For the purposes of this article, I\u2019m going to include runtime tooling, and even a couple libraries that enhance runtime developer visibility and debugging.", "A slimmer Visual Studio for people who like minimal pluggable editors like Sublime Text and Atom.", "TL;DR quick list:\n\nAbout the Tools\n\nYour dev life is going to center around two things: The editor, and your runtime environment (e.g., the browsers, platforms, and devices you\u2019re coding for)."], "title": "Must See JavaScript Dev Tools That Put Other Dev Tools to Shame \u2014 JavaScript Scene \u2014 Medium"}, {"url": "https://www.smashingmagazine.com/2015/12/revisiting-firefox-devtools/", "summary": ["By Patrick Brosset\n\nAdvertisement\n\nIf you do any kind of development for the web, then you know how important tools are, and you like finding tools that make your life easier.", "Feel free to download Firefox Developer Edition41271 to try out the latest version of the tools.", "Way back in 2001, a debugger called \u201cVenkman\u201d was available for Netscape Navigator version 7.", "WebIDE already allows you to connect Firefox\u2019s DevTools to any website or app on Firefox OS and in Firefox for Android.", "The next piece of the puzzle was the DOM inspector, which was released around 2004 or 2005.", "The page inspector8 has a a box-model highlighter, a CSS rules editor, a viewer for computed styles, fonts and layout, support for pseudo-elements, and a search tool.", "Or, in the developer menu bar, choose the eyedropper item to copy colors from the page.", "Coming up with the perfect curve is not straightforward; so, Firefox\u2019s DevTools comes with a tooltip that allows you to modify a curve visually or even choose from a list of presets.", "So, as Firefox gets updated, keeping Firebug running as a separate add-on becomes harder and harder.", "(View large version26)\n\nSome Key Differentiators Link\n\nOn top of the usual set of tools, Firefox has a number of neat features to make your life as a developer or designer easier.", "Thankfully, Developer Edition makes this easy by letting you run both programs side by side.", "So, in early 2006 Firefox had three pieces of the puzzle: a built-in console, a debugger and a DOM inspector \u2014 each separate and not all built in.", "In the CSS rules view, with an element selected, click on the color swatch next to any color property\u2019s value to change it.", "Test on Multiple Devices, Browsers and Screens Link\n\nWhen it comes to making sure a website displays correctly for everyone, things are a lot more complex than they used to be.", "Writing a valid CSS filter function isn\u2019t the easiest thing in the world, and you can chain as many functions as you want, so Firefox\u2019s DevTools has a handy tooltip that allows you to create filters37 in a simple and visual way.", "Responsive design view Link\n\nThe responsive design view31 makes it really easy to see how a website looks at different screen sizes.", "CSS rules view search bar Link\n\nFilter styles using the CSS rules view search bar39.", "That\u2019s one of the reasons Mozilla released Firefox Developer Edition41271 in November 2014 as the recommended Firefox browser for developers.", "In late 2006 Joe Hewitt, who worked on the early release of Firefox, released Firebug version 1.0.", "CSS filter tooltip Link\n\nFilters are a relatively new feature in CSS and really powerful.", "Firefox displays these keyframe rules in the view for CSS rules when the selected element is animated, so that you can directly edit them there, where you\u2019d expect.", "Firefox makes it super-easy to get documentation for any CSS property directly in the tools where you need it.", "Developing and testing new browser features, however, takes time.", "Between the time a useful tool first appears in an experimental nightly build and the time it\u2019s available for everyone to use in Firefox, a while has passed.", "A Solid Set Of Standard Features Link\n\nFirefox\u2019s DevTools have come a long way since their inception, quickly bridging the gaps between Firebug and other browsers\u2019 developer tools.", "Discover, Use and Understand Complex CSS Features Link\n\nCSS can be complex.", "If you need to copy the color of any part of a web page or want to change the color on an element\u2019s CSS property, then use the eyedropper.", "Doing this in Firefox is easy, either by right-clicking on any node in the page inspector or by using the full-page screenshot button in the toolbar (make sure it\u2019s enabled in the options panel first).", "Firebug broke new ground in allowing developers to view the DOM and in providing a JavaScript console and debugger and DOM inspector all in the same tool.", "Upgrading the debugger APIs, which Firebug needed to keep up with, was significant work, and when the initiative to have separate browser and content processes in Firefox was announced, Mozilla decided to rebuild Firebug on top of the built-in tools."], "title": "Revisiting Firefox\u2019s DevTools \u2013 Smashing Magazine"}, {"url": "https://www.theguardian.com/info/developer-blog/2015/feb/09/do-what-you-want-building-great-products-through-anarchy", "summary": ["We learned really quickly (our editorial colleagues aren\u2019t a shy bunch) where functionality was lacking, and what we\u2019d missed.", "Stand ups Sit downs\n\nIt\u2019s fair to say that during the early phases of the product when the team was in the \u201cbuild, test, learn\u201d phase, our daily stand-ups were actually spent sat down talking about what we\u2019d all learned the previous day, and what we might want to do about it.", ") the developers on the team took this work, and hooked up a back end.", "We decided pretty early on that we would forgo traditional rounds of flat designs, and build a prototype product that we could test with our editorial users.", "By getting everyone onto the same page, it made my job an order of magnitude easier.", "We\u2019d all worked in teams where a sense of problem ownership was low and we wanted to see what would happen if we took a bit more control.", "You quickly arrive at a situation where the whole team doesn\u2019t see the full extent of the problem, and so the technical solutions are always going to be predicated on a subset of knowledge.", "Facebook Twitter Pinterest HTML prototype to explore how the tool could work.", "We need to champion whole team understanding and user engagement, and not get in the way.", "By empowering the team to speak to people directly, you end up with a greater corpus of understanding, which leads to better decision making.", "For the past six months, the Guardian\u2019s editorial tools team has been building a product for the organisation to manage its digital content through the production process.", "The team was comprised of three developers, a UX architect, a UI designer, a QA, an agile project manager, and a product manager, all with a broad range of experience building software.", "I took the time to build a clickable HTML/CSS/JavaScript prototype, which allowed us to quickly get something on screen that felt real and proportional.", "Broadly speaking, developer anarchy works on a belief that if you let a sensible development team understand the business problem\u2014in our case, managing content through a production process\u2014then you\u2019ll end up with a quality product.", "Here\u2019s a screenshot of the current product, which is being happily used by our editorial colleagues:\n\nFacebook Twitter Pinterest Screenshot of Workflow.", "We\u2019d generated over 150 user stories , many of which were epics, and so would naturally break down into more granular stories.", "The attendee list was deliberately chosen to maximise the range of opinions and depth of experience, from both an editorial and development perspective.", "I wouldn\u2019t suggest this is easy when they\u2019re not co-located, but the same principle applies: in any research, get the whole team involved in the process, and get them to know your users without the lens of a UX person filtering out.", "The working prototype was rough, but it did one thing: track a piece of content from inception to publication.", "I\u2019ve spent too much of my time pitching legitimate problems (and solutions) back to development teams in the past, attempting to get \u201cbuy in\u201d for problem (or solution).", "It\u2019s my belief that all members of the team should know the users, be able to speak to them, collate problems and understand the problem space in which they are operating.", "You know how it goes: have a conversation with a user, understand the problem, hive oneself off, then pitch a solution back to the team.", "By getting everyone onto the same page, it made my job an order of magnitude easier\n\nIt\u2019s been a product-creation epiphany.", "The workshop\n\nFacebook Twitter Pinterest Capturing the scale of the problem in a user story generation workshop.", "Photograph: Alastair Jardine\n\nBefore the team had even come together, we held a workshop in the Guardian\u2019s UX studio to understand the scope of the problem.", "Facebook Twitter Pinterest A chunk of cards containing user stories.", "The goal of this working prototype was to test concepts and execution to learn about what worked as a team."], "title": "Building great products through anarchy"}]